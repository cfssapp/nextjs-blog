"use strict";
/**
 * @fileoverview the utils function for custom render
 * @author houquan | houquan@bytedance.com
 * @version 1.0.0 | 2020-03-16 | houquan      // initial version
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const less_1 = __importDefault(require("less"));
const find_up_1 = __importDefault(require("find-up"));
const json5_1 = __importDefault(require("json5"));
const index_1 = __importDefault(require("./index"));
const checkExtList = [".less", ".css"];
function normalizePath(filename) {
    if (/\.(?:less|css)$/i.test(filename)) {
        return fs_1.default.existsSync(filename) ? filename : undefined;
    }
    for (let i = 0, len = checkExtList.length; i < len; i++) {
        const ext = checkExtList[i];
        if (fs_1.default.existsSync(`${filename}${ext}`)) {
            return `${filename}${ext}`;
        }
    }
}
exports.normalizePath = normalizePath;
function transformPathsToAliase({ paths, baseUrl } = {}) {
    const aliase = {};
    if (paths && baseUrl) {
        Object.keys(paths).forEach((key) => {
            const pathList = paths[key];
            if (key.endsWith('/*')) {
                key = key.slice(0, key.length - 2);
            }
            aliase[key] = pathList.map((p) => path_1.default.resolve(baseUrl, p.endsWith('/*') ? p.slice(0, p.length - 2) : p));
        });
    }
    return aliase;
}
exports.transformPathsToAliase = transformPathsToAliase;
function readTSConf() {
    const tsconfPath = find_up_1.default.sync('tsconfig.json');
    if (!tsconfPath) {
        return {};
    }
    const tsconfigJSON = json5_1.default.parse(fs_1.default.readFileSync(tsconfPath).toString()) || {};
    return tsconfigJSON.compilerOptions || {};
}
exports.readTSConf = readTSConf;
function createCustomRender(options) {
    const { prefix = '~', ...lessOpts } = options;
    return function (css, { fileName: filename, logger, compilerOptions = readTSConf() }) {
        let transforedCSS = '';
        const aliases = transformPathsToAliase(compilerOptions);
        less_1.default.render(css, {
            syncImport: true,
            filename,
            plugins: [
                new index_1.default({
                    prefix,
                    aliases,
                    logger
                })
            ],
            ...lessOpts
        }, (error, output) => {
            if (error || output === undefined) {
                throw error;
            }
            transforedCSS = output.css.toString();
        });
        return transforedCSS;
    };
}
exports.createCustomRender = createCustomRender;
