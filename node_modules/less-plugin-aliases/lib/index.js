"use strict";
/**
 * @fileoverview the plugin for less to support custom aliase
 * @author houquan | 870301137@qq.com
 * @version 1.0.0 | 2020-03-15 | houquan      // initial version
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const utils_1 = require("./utils");
const defaultLogger = {
    log: console.log,
    error: console.error
};
class LessAliasesPlugin {
    constructor(options) {
        this.options = options;
    }
    install(less, pluginManager) {
        const { prefix = '~', aliases, logger = defaultLogger } = this.options;
        function resolve(filename) {
            if (filename.startsWith(prefix)) {
                const chunks = filename.split('/');
                const aliaseKey = chunks[0].slice(1);
                const restPath = chunks.slice(1).join('/');
                const resolvedAliase = aliases[aliaseKey];
                let resolvedPath;
                if (Array.isArray(resolvedAliase)) {
                    for (let i = 0, len = resolvedAliase.length; i < len; i++) {
                        resolvedPath = utils_1.normalizePath(path_1.default.join(resolvedAliase[i], restPath));
                        if (resolvedPath) {
                            return resolvedPath;
                        }
                    }
                }
                else {
                    resolvedPath = utils_1.normalizePath(path_1.default.join(resolvedAliase, restPath));
                }
                if (!resolvedPath) {
                    throw new Error(`Invalid aliase config for key: ${aliaseKey}`);
                }
                return resolvedPath;
            }
            return filename;
        }
        class AliasePlugin extends less.FileManager {
            supports(filename, currentDirectory) {
                const aliaseNames = Object.keys(aliases);
                const len = aliaseNames.length;
                for (let i = 0; i < len; i++) {
                    const key = `${prefix}${aliaseNames[i]}`;
                    if (filename.indexOf(key) !== -1 || currentDirectory.indexOf(key) !== -1) {
                        return true;
                    }
                }
                return false;
            }
            supportsSync(filename, currentDirectory) {
                return this.supports(filename, currentDirectory);
            }
            loadFile(filename, currentDirectory, options, enviroment, callback) {
                let resolved;
                try {
                    resolved = resolve(filename);
                }
                catch (error) {
                    logger.error(error);
                }
                if (!resolved) {
                    const error = new Error(`[less-plugin-aliases]: '${filename}' not found.`);
                    logger.error(error);
                    throw error;
                }
                return super.loadFile(resolved, currentDirectory, options, enviroment, callback);
            }
            loadFileSync(filename, currentDirectory, options, enviroment, callback) {
                let resolved;
                try {
                    resolved = resolve(filename);
                }
                catch (error) {
                    logger.error(error);
                }
                if (!resolved) {
                    const error = new Error(`[less-plugin-aliases]: '${filename}' not found.`);
                    logger.error(error);
                    throw error;
                }
                return super.loadFileSync(resolved, currentDirectory, options, enviroment, callback);
            }
        }
        pluginManager.addFileManager(new AliasePlugin());
    }
}
exports.default = LessAliasesPlugin;
