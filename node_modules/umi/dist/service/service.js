"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Service = void 0;
const core_1 = require("@umijs/core");
const fs_1 = require("fs");
const path_1 = require("path");
const constants_1 = require("../constants");
const cwd_1 = require("./cwd");
class Service extends core_1.Service {
    constructor(opts) {
        process.env.UMI_DIR = (0, path_1.dirname)(require.resolve('../../package'));
        const cwd = (0, cwd_1.getCwd)();
        super(Object.assign(Object.assign({}, opts), { env: process.env.NODE_ENV, cwd, defaultConfigFiles: constants_1.DEFAULT_CONFIG_FILES, frameworkName: constants_1.FRAMEWORK_NAME, presets: [require.resolve('@umijs/preset-umi'), ...((opts === null || opts === void 0 ? void 0 : opts.presets) || [])], plugins: [
                (0, fs_1.existsSync)((0, path_1.join)(cwd, 'plugin.ts')) && (0, path_1.join)(cwd, 'plugin.ts'),
                (0, fs_1.existsSync)((0, path_1.join)(cwd, 'plugin.js')) && (0, path_1.join)(cwd, 'plugin.js'),
            ].filter(Boolean) }));
    }
    run2(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            let name = opts.name;
            if ((opts === null || opts === void 0 ? void 0 : opts.args.version) || name === 'v') {
                name = 'version';
            }
            else if ((opts === null || opts === void 0 ? void 0 : opts.args.help) || !name || name === 'h') {
                name = 'help';
            }
            // TODO
            // initWebpack
            return yield this.run(Object.assign(Object.assign({}, opts), { name }));
        });
    }
}
exports.Service = Service;
