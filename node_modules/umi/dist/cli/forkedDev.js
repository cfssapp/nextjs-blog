"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@umijs/utils");
const constants_1 = require("../constants");
const service_1 = require("../service/service");
const node_1 = require("./node");
(0, node_1.setNodeTitle)(`${constants_1.FRAMEWORK_NAME}-dev`);
(0, node_1.setNoDeprecation)();
(() => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const args = (0, utils_1.yParser)(process.argv.slice(2));
        const service = new service_1.Service();
        yield service.run2({
            name: constants_1.DEV_COMMAND,
            args,
        });
        let closed = false;
        // kill(2) Ctrl-C
        process.once('SIGINT', () => onSignal('SIGINT'));
        // kill(3) Ctrl-\
        process.once('SIGQUIT', () => onSignal('SIGQUIT'));
        // kill(15) default
        process.once('SIGTERM', () => onSignal('SIGTERM'));
        function onSignal(signal) {
            if (closed)
                return;
            closed = true;
            // 退出时触发插件中的 onExit 事件
            service.applyPlugins({
                key: 'onExit',
                args: {
                    signal,
                },
            });
            process.exit(0);
        }
    }
    catch (e) {
        utils_1.logger.error(e);
        process.exit(1);
    }
}))();
