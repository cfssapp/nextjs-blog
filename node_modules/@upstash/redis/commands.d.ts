import { g as Command, N as NonEmptyArray, S as ScanCommandOptions } from './zunionstore-e1cc0e90';
export { g as Command, h as ScanCommand, S as ScanCommandOptions, b as ScoreMember, i as SetCommand, a as SetCommandOptions, T as Type, j as TypeCommand, U as UnlinkCommand, k as ZAddCommand, Z as ZAddCommandOptions, c as ZAddCommandOptionsWithIncr, l as ZInterStoreCommand, d as ZInterStoreCommandOptions, m as ZRangeCommand, e as ZRangeCommandOptions, n as ZUnionStoreCommand, f as ZUnionStoreCommandOptions } from './zunionstore-e1cc0e90';
import './http';

/**
 * @see https://redis.io/commands/append
 */
declare class AppendCommand extends Command<number, number> {
    constructor(key: string, value: string);
}

/**
 * @see https://redis.io/commands/bitcount
 */
declare class BitCountCommand extends Command<number, number> {
    constructor(key: string, start?: never, end?: never);
    constructor(key: string, start: number, end: number);
}

/**
 * @see https://redis.io/commands/bitop
 */
declare class BitOpCommand extends Command<number, number> {
    constructor(op: "and" | "or" | "xor", destinationKey: string, sourceKey: string, ...sourceKeys: string[]);
    constructor(op: "not", destinationKey: string, sourceKey: string);
}

/**
 * @see https://redis.io/commands/bitpos
 */
declare class BitPosCommand extends Command<number, number> {
    constructor(key: string, start: number, end: number);
}

/**
 * @see https://redis.io/commands/dbsize
 */
declare class DBSizeCommand extends Command<number, number> {
    constructor();
}

/**
 * @see https://redis.io/commands/decr
 */
declare class DecrCommand extends Command<number, number> {
    constructor(key: string);
}

/**
 * @see https://redis.io/commands/decrby
 */
declare class DecrByCommand extends Command<number, number> {
    constructor(key: string, decrement: number);
}

/**
 * @see https://redis.io/commands/del
 */
declare class DelCommand extends Command<number, number> {
    constructor(...keys: NonEmptyArray<string>);
}

/**
 * @see https://redis.io/commands/echo
 */
declare class EchoCommand extends Command<string, string> {
    constructor(message: string);
}

/**
 * @see https://redis.io/commands/exists
 */
declare class ExistsCommand extends Command<0 | 1, "0" | "1"> {
    constructor(...keys: NonEmptyArray<string>);
}

/**
 * @see https://redis.io/commands/expire
 */
declare class ExpireCommand extends Command<0 | 1, "0" | "1"> {
    constructor(key: string, seconds: number);
}

/**
 * @see https://redis.io/commands/expireat
 */
declare class ExpireAtCommand extends Command<0 | 1, "0" | "1"> {
    constructor(key: string, unix: number);
}

/**
 * @see https://redis.io/commands/flushall
 */
declare class FlushAllCommand extends Command<"OK", "OK"> {
    constructor(opts?: {
        async?: boolean;
    });
}

/**
 * @see https://redis.io/commands/flushdb
 */
declare class FlushDBCommand extends Command<"OK", "OK"> {
    constructor(opts?: {
        async?: boolean;
    });
}

/**
 * @see https://redis.io/commands/get
 */
declare class GetCommand<TData = string> extends Command<TData | null, unknown | null> {
    constructor(key: string);
}

/**
 * @see https://redis.io/commands/getbit
 */
declare class GetBitCommand extends Command<0 | 1, "0" | "1"> {
    constructor(key: string, offset: number);
}

/**
 * @see https://redis.io/commands/getrange
 */
declare class GetRangeCommand extends Command<string, string> {
    constructor(key: string, start: number, end: number);
}

/**
 * @see https://redis.io/commands/getset
 */
declare class GetSetCommand<TData = string> extends Command<TData | null, unknown | null> {
    constructor(key: string, value: TData);
}

/**
 * @see https://redis.io/commands/hdel
 */
declare class HDelCommand extends Command<0 | 1, "0" | "1"> {
    constructor(key: string, field: string);
}

/**
 * @see https://redis.io/commands/hexists
 */
declare class HExistsCommand extends Command<number, number> {
    constructor(key: string, field: string);
}

/**
 * @see https://redis.io/commands/hget
 */
declare class HGetCommand<TData> extends Command<TData | null, unknown | null> {
    constructor(key: string, field: string);
}

/**
 * @see https://redis.io/commands/hgetall
 */
declare class HGetAllCommand<TData extends Record<string, unknown>> extends Command<TData | null, unknown | null> {
    constructor(key: string);
}

/**
 * @see https://redis.io/commands/hincrby
 */
declare class HIncrByCommand extends Command<number, number> {
    constructor(key: string, field: string, increment: number);
}

/**
 * @see https://redis.io/commands/hincrbyfloat
 */
declare class HIncrByFloatCommand extends Command<number, number> {
    constructor(key: string, field: string, increment: number);
}

/**
 * @see https://redis.io/commands/hkeys
 */
declare class HKeysCommand extends Command<string[], string[]> {
    constructor(key: string);
}

/**
 * @see https://redis.io/commands/hlen
 */
declare class HLenCommand extends Command<number, number> {
    constructor(key: string);
}

/**
 * hmget returns an object of all requested fields from a hash
 * The field values are returned as an object like this:
 * ```ts
 * {[fieldName: string]: T | null}
 * ```
 *
 * In case the hash does not exist or all fields are empty `null` is returned
 *
 * @see https://redis.io/commands/hmget
 */
declare class HMGetCommand<TData extends Record<string, unknown>> extends Command<TData | null, (string | null)[]> {
    constructor(key: string, ...fields: string[]);
}

/**
 * @see https://redis.io/commands/hmset
 */
declare class HMSetCommand<TData> extends Command<number, number> {
    constructor(key: string, kv: {
        [field: string]: TData;
    });
}

/**
 * @see https://redis.io/commands/hscan
 */
declare class HScanCommand extends Command<[
    number,
    (string | number)[]
], [
    number,
    (string | number)[]
]> {
    constructor(key: string, cursor: number, opts?: ScanCommandOptions);
}

/**
 * @see https://redis.io/commands/hset
 */
declare class HSetCommand<TData> extends Command<number, number> {
    constructor(key: string, kv: {
        [field: string]: TData;
    });
}

/**
 * @see https://redis.io/commands/hsetnx
 */
declare class HSetNXCommand<TData> extends Command<0 | 1, "0" | "1"> {
    constructor(key: string, field: string, value: TData);
}

/**
 * @see https://redis.io/commands/hstrlen
 */
declare class HStrLenCommand extends Command<number, number> {
    constructor(key: string, field: string);
}

/**
 * @see https://redis.io/commands/hvals
 */
declare class HValsCommand<TData extends unknown[]> extends Command<TData, unknown[]> {
    constructor(key: string);
}

/**
 * @see https://redis.io/commands/incr
 */
declare class IncrCommand extends Command<number, number> {
    constructor(key: string);
}

/**
 * @see https://redis.io/commands/incrby
 */
declare class IncrByCommand extends Command<number, number> {
    constructor(key: string, value: number);
}

/**
 * @see https://redis.io/commands/incrbyfloat
 */
declare class IncrByFloatCommand extends Command<number, number> {
    constructor(key: string, value: number);
}

/**
 * @see https://redis.io/commands/keys
 */
declare class KeysCommand extends Command<string[], string[]> {
    constructor(pattern: string);
}

declare class LIndexCommand<TData = string> extends Command<TData | null, unknown | null> {
    constructor(key: string, index: number);
}

declare class LInsertCommand<TData = string> extends Command<number, number> {
    constructor(key: string, direction: "before" | "after", pivot: TData, value: TData);
}

/**
 * @see https://redis.io/commands/llen
 */
declare class LLenCommand extends Command<number, number> {
    constructor(key: string);
}

/**
 * @see https://redis.io/commands/lpop
 */
declare class LPopCommand<TData = string> extends Command<TData | null, unknown | null> {
    constructor(key: string);
}

/**
 * @see https://redis.io/commands/lpush
 */
declare class LPushCommand<TData = string> extends Command<number, number> {
    constructor(key: string, ...elements: NonEmptyArray<TData>);
}

/**
 * @see https://redis.io/commands/lpushx
 */
declare class LPushXCommand<TData> extends Command<number, number> {
    constructor(key: string, ...elements: NonEmptyArray<TData>);
}

declare class LRangeCommand<TData = string> extends Command<TData[], unknown[]> {
    constructor(key: string, start: number, end: number);
}

declare class LRemCommand<TData> extends Command<number, number> {
    constructor(key: string, count: number, value: TData);
}

declare class LSetCommand<TData = string> extends Command<"OK", "OK"> {
    constructor(key: string, value: TData, index: number);
}

declare class LTrimCommand extends Command<"OK", "OK"> {
    constructor(key: string, start: number, end: number);
}

/**
 * @see https://redis.io/commands/mget
 */
declare class MGetCommand<TData extends unknown[]> extends Command<TData, (string | null)[]> {
    constructor(...keys: [string, ...string[]]);
}

/**
 * @see https://redis.io/commands/mset
 */
declare class MSetCommand<TData> extends Command<"OK", "OK"> {
    constructor(kv: {
        [key: string]: TData;
    });
}

/**
 * @see https://redis.io/commands/msetnx
 */
declare class MSetNXCommand<TData = string> extends Command<number, number> {
    constructor(kv: {
        [key: string]: TData;
    });
}

/**
 * @see https://redis.io/commands/persist
 */
declare class PersistCommand extends Command<0 | 1, "0" | "1"> {
    constructor(key: string);
}

/**
 * @see https://redis.io/commands/pexpire
 */
declare class PExpireCommand extends Command<0 | 1, "0" | "1"> {
    constructor(key: string, milliseconds: number);
}

/**
 * @see https://redis.io/commands/pexpireat
 */
declare class PExpireAtCommand extends Command<0 | 1, "0" | "1"> {
    constructor(key: string, unix: number);
}

/**
 * @see https://redis.io/commands/ping
 */
declare class PingCommand extends Command<string | "PONG", string | "PONG"> {
    constructor(message?: string);
}

/**
 * @see https://redis.io/commands/psetex
 */
declare class PSetEXCommand<TData = string> extends Command<string, string> {
    constructor(key: string, ttl: number, value: TData);
}

/**
 * @see https://redis.io/commands/pttl
 */
declare class PTtlCommand extends Command<number, number> {
    constructor(key: string);
}

/**
 * @see https://redis.io/commands/randomkey
 */
declare class RandomKeyCommand extends Command<string | null, string | null> {
    constructor();
}

/**
 * @see https://redis.io/commands/rename
 */
declare class RenameCommand extends Command<"OK", "OK"> {
    constructor(source: string, destination: string);
}

/**
 * @see https://redis.io/commands/renamenx
 */
declare class RenameNXCommand extends Command<0 | 1, "0" | "1"> {
    constructor(source: string, destination: string);
}

/**
 * @see https://redis.io/commands/rpop
 */
declare class RPopCommand<TData = string> extends Command<TData | null, unknown | null> {
    constructor(key: string);
}

/**
 * @see https://redis.io/commands/rpush
 */
declare class RPushCommand<TData = string> extends Command<number, number> {
    constructor(key: string, ...elements: NonEmptyArray<TData>);
}

/**
 * @see https://redis.io/commands/rpushx
 */
declare class RPushXCommand<TData = string> extends Command<number, number> {
    constructor(key: string, ...elements: NonEmptyArray<TData>);
}

/**
 * @see https://redis.io/commands/sadd
 */
declare class SAddCommand<TData = string> extends Command<number, number> {
    constructor(key: string, ...members: NonEmptyArray<TData>);
}

/**
 * @see https://redis.io/commands/scard
 */
declare class SCardCommand extends Command<number, number> {
    constructor(key: string);
}

/**
 * @see https://redis.io/commands/sdiff
 */
declare class SDiffCommand<TData> extends Command<TData[], unknown[]> {
    constructor(key: string, ...keys: string[]);
}

/**
 * @see https://redis.io/commands/sdiffstpre
 */
declare class SDiffStoreCommand extends Command<number, number> {
    constructor(destination: string, ...keys: NonEmptyArray<string>);
}

/**
 * @see https://redis.io/commands/setbit
 */
declare class SetBitCommand extends Command<0 | 1, "0" | "1"> {
    constructor(key: string, offset: number, value: 0 | 1);
}

/**
 * @see https://redis.io/commands/setex
 */
declare class SetExCommand<TData = string> extends Command<"OK", "OK"> {
    constructor(key: string, ttl: number, value: TData);
}

/**
 * @see https://redis.io/commands/setnx
 */
declare class SetNxCommand<TData = string> extends Command<number, number> {
    constructor(key: string, value: TData);
}

/**
 * @see https://redis.io/commands/setrange
 */
declare class SetRangeCommand extends Command<number, number> {
    constructor(key: string, offset: number, value: string);
}

/**
 * @see https://redis.io/commands/sinter
 */
declare class SInterCommand<TData = string> extends Command<TData[], unknown[]> {
    constructor(key: string, ...keys: string[]);
}

/**
 * @see https://redis.io/commands/sinterstore
 */
declare class SInterStoreCommand<TData = string> extends Command<TData[], unknown[]> {
    constructor(destination: string, key: string, ...keys: string[]);
}

/**
 * @see https://redis.io/commands/sismember
 */
declare class SIsMemberCommand<TData = string> extends Command<0 | 1, "0" | "1"> {
    constructor(key: string, member: TData);
}

/**
 * @see https://redis.io/commands/smembers
 */
declare class SMembersCommand<TData = string> extends Command<TData[], unknown[]> {
    constructor(key: string);
}

/**
 * @see https://redis.io/commands/smove
 */
declare class SMoveCommand<TData> extends Command<0 | 1, "0" | "1"> {
    constructor(source: string, destination: string, member: TData);
}

/**
 * @see https://redis.io/commands/spop
 */
declare class SPopCommand<TData = number> extends Command<TData | null, string | null> {
    constructor(key: string, count?: number);
}

/**
 * @see https://redis.io/commands/srandmember
 */
declare class SRandMemberCommand<TData> extends Command<TData | null, string | null> {
    constructor(key: string, count?: number);
}

/**
 * @see https://redis.io/commands/srem
 */
declare class SRemCommand<TData = string> extends Command<number, number> {
    constructor(key: string, ...members: NonEmptyArray<TData>);
}

/**
 * @see https://redis.io/commands/sscan
 */
declare class SScanCommand extends Command<[
    number,
    (string | number)[]
], [
    number,
    (string | number)[]
]> {
    constructor(key: string, cursor: number, opts?: ScanCommandOptions);
}

/**
 * @see https://redis.io/commands/strlen
 */
declare class StrLenCommand extends Command<number, number> {
    constructor(key: string);
}

/**
 * @see https://redis.io/commands/sunion
 */
declare class SUnionCommand<TData> extends Command<TData[], string[]> {
    constructor(key: string, ...keys: string[]);
}

/**
 * @see https://redis.io/commands/sunionstore
 */
declare class SUnionStoreCommand extends Command<number, number> {
    constructor(destination: string, key: string, ...keys: string[]);
}

/**
 * @see https://redis.io/commands/time
 */
declare class TimeCommand extends Command<[number, number], [number, number]> {
    constructor();
}

/**
 * @see https://redis.io/commands/touch
 */
declare class TouchCommand extends Command<number, number> {
    constructor(...keys: NonEmptyArray<string>);
}

/**
 * @see https://redis.io/commands/ttl
 */
declare class TtlCommand extends Command<number, number> {
    constructor(key: string);
}

/**
 * @see https://redis.io/commands/zcard
 */
declare class ZCardCommand extends Command<number, number> {
    constructor(key: string);
}

/**
 * @see https://redis.io/commands/zcount
 */
declare class ZCountCommand extends Command<number, number> {
    constructor(key: string, min: number | string, max: number | string);
}

/**
 * @see https://redis.io/commands/zincrby
 */
declare class ZIncrByComand<TData> extends Command<number, number> {
    constructor(key: string, increment: number, member: TData);
}

/**
 * @see https://redis.io/commands/zlexcount
 */
declare class ZLexCountCommand extends Command<number, number> {
    constructor(key: string, min: string, max: string);
}

/**
 * @see https://redis.io/commands/zpopmax
 */
declare class ZPopMaxCommand<TData> extends Command<TData[], string[]> {
    constructor(key: string, count?: number);
}

/**
 * @see https://redis.io/commands/zpopmin
 */
declare class ZPopMinCommand<TData> extends Command<TData[], string[]> {
    constructor(key: string, count?: number);
}

/**
 *  @see https://redis.io/commands/zrank
 */
declare class ZRankCommand<TData> extends Command<number | null, number | null> {
    constructor(key: string, member: TData);
}

/**
 * @see https://redis.io/commands/zrem
 */
declare class ZRemCommand<TData = string> extends Command<number, number> {
    constructor(key: string, ...members: NonEmptyArray<TData>);
}

/**
 * @see https://redis.io/commands/zremrangebylex
 */
declare class ZRemRangeByLexCommand extends Command<number, number> {
    constructor(key: string, min: string, max: string);
}

/**
 * @see https://redis.io/commands/zremrangebyrank
 */
declare class ZRemRangeByRankCommand extends Command<number, number> {
    constructor(key: string, start: number, stop: number);
}

/**
 * @see https://redis.io/commands/zremrangebyscore
 */
declare class ZRemRangeByScoreCommand extends Command<number, number> {
    constructor(key: string, min: number, max: number);
}

/**
 *  @see https://redis.io/commands/zrevrank
 */
declare class ZRevRankCommand<TData> extends Command<number | null, number | null> {
    constructor(key: string, member: TData);
}

/**
 * @see https://redis.io/commands/zscan
 */
declare class ZScanCommand extends Command<[
    number,
    (string | number)[]
], [
    number,
    (string | number)[]
]> {
    constructor(key: string, cursor: number, opts?: ScanCommandOptions);
}

/**
 * @see https://redis.io/commands/zscore
 */
declare class ZScoreCommand<TData> extends Command<number | null, string | null> {
    constructor(key: string, member: TData);
}

export { AppendCommand, BitCountCommand, BitOpCommand, BitPosCommand, DBSizeCommand, DecrByCommand, DecrCommand, DelCommand, EchoCommand, ExistsCommand, ExpireAtCommand, ExpireCommand, FlushAllCommand, FlushDBCommand, GetBitCommand, GetCommand, GetRangeCommand, GetSetCommand, HDelCommand, HExistsCommand, HGetAllCommand, HGetCommand, HIncrByCommand, HIncrByFloatCommand, HKeysCommand, HLenCommand, HMGetCommand, HMSetCommand, HScanCommand, HSetCommand, HSetNXCommand, HStrLenCommand, HValsCommand, IncrByCommand, IncrByFloatCommand, IncrCommand, KeysCommand, LIndexCommand, LInsertCommand, LLenCommand, LPopCommand, LPushCommand, LPushXCommand, LRangeCommand, LRemCommand, LSetCommand, LTrimCommand, MGetCommand, MSetCommand, MSetNXCommand, PExpireAtCommand, PExpireCommand, PSetEXCommand, PTtlCommand, PersistCommand, PingCommand, RPopCommand, RPushCommand, RPushXCommand, RandomKeyCommand, RenameCommand, RenameNXCommand, SAddCommand, SCardCommand, SDiffCommand, SDiffStoreCommand, SInterCommand, SInterStoreCommand, SIsMemberCommand, SMembersCommand, SMoveCommand, SPopCommand, SRandMemberCommand, SRemCommand, SScanCommand, SUnionCommand, SUnionStoreCommand, SetBitCommand, SetExCommand, SetNxCommand, SetRangeCommand, StrLenCommand, TimeCommand, TouchCommand, TtlCommand, ZCardCommand, ZCountCommand, ZIncrByComand, ZLexCountCommand, ZPopMaxCommand, ZPopMinCommand, ZRankCommand, ZRemCommand, ZRemRangeByLexCommand, ZRemRangeByRankCommand, ZRemRangeByScoreCommand, ZRevRankCommand, ZScanCommand, ZScoreCommand };
