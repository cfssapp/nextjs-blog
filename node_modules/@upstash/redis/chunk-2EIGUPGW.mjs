import {
  AppendCommand,
  BitCountCommand,
  BitOpCommand,
  BitPosCommand,
  DBSizeCommand,
  DecrByCommand,
  DecrCommand,
  DelCommand,
  EchoCommand,
  ExistsCommand,
  ExpireAtCommand,
  ExpireCommand,
  FlushAllCommand,
  FlushDBCommand,
  GetBitCommand,
  GetCommand,
  GetRangeCommand,
  GetSetCommand,
  HDelCommand,
  HExistsCommand,
  HGetAllCommand,
  HGetCommand,
  HIncrByCommand,
  HIncrByFloatCommand,
  HKeysCommand,
  HLenCommand,
  HMGetCommand,
  HMSetCommand,
  HScanCommand,
  HSetCommand,
  HSetNXCommand,
  HStrLenCommand,
  HValsCommand,
  IncrByCommand,
  IncrByFloatCommand,
  IncrCommand,
  KeysCommand,
  LIndexCommand,
  LInsertCommand,
  LLenCommand,
  LPopCommand,
  LPushCommand,
  LPushXCommand,
  LRangeCommand,
  LRemCommand,
  LSetCommand,
  LTrimCommand,
  MGetCommand,
  MSetCommand,
  MSetNXCommand,
  PExpireAtCommand,
  PExpireCommand,
  PSetEXCommand,
  PTtlCommand,
  PersistCommand,
  PingCommand,
  RPopCommand,
  RPushCommand,
  RPushXCommand,
  RandomKeyCommand,
  RenameCommand,
  RenameNXCommand,
  SAddCommand,
  SCardCommand,
  SDiffCommand,
  SDiffStoreCommand,
  SInterCommand,
  SInterStoreCommand,
  SIsMemberCommand,
  SMembersCommand,
  SMoveCommand,
  SPopCommand,
  SRandMemberCommand,
  SRemCommand,
  SScanCommand,
  SUnionCommand,
  SUnionStoreCommand,
  ScanCommand,
  SetBitCommand,
  SetCommand,
  SetExCommand,
  SetNxCommand,
  SetRangeCommand,
  StrLenCommand,
  TimeCommand,
  TouchCommand,
  TtlCommand,
  TypeCommand,
  UnlinkCommand,
  ZAddCommand,
  ZCardCommand,
  ZCountCommand,
  ZIncrByComand,
  ZInterStoreCommand,
  ZLexCountCommand,
  ZPopMaxCommand,
  ZPopMinCommand,
  ZRangeCommand,
  ZRankCommand,
  ZRemCommand,
  ZRemRangeByLexCommand,
  ZRemRangeByRankCommand,
  ZRemRangeByScoreCommand,
  ZRevRankCommand,
  ZScanCommand,
  ZScoreCommand,
  ZUnionStoreCommand
} from "./chunk-HGM7M7CJ.mjs";
import {
  UpstashError
} from "./chunk-7YUZYRJS.mjs";

// pkg/pipeline.ts
var Pipeline = class {
  constructor(client) {
    this.exec = async () => {
      if (this.commands.length === 0) {
        throw new Error("Pipeline is empty");
      }
      const res = await this.client.request({
        path: ["pipeline"],
        body: Object.values(this.commands).map((c) => c.command)
      });
      return res.map(({ error, result }, i) => {
        if (error) {
          throw new UpstashError(`Command ${i + 1} [ ${this.commands[i].command[0]} ] failed: ${error}`);
        }
        return this.commands[i].deserialize(result);
      });
    };
    this.append = (...args) => this.chain(new AppendCommand(...args));
    this.bitcount = (...args) => this.chain(new BitCountCommand(...args));
    this.bitop = (op, destinationKey, sourceKey, ...sourceKeys) => this.chain(new BitOpCommand(op, destinationKey, sourceKey, ...sourceKeys));
    this.bitpos = (...args) => this.chain(new BitPosCommand(...args));
    this.dbsize = () => this.chain(new DBSizeCommand());
    this.decr = (...args) => this.chain(new DecrCommand(...args));
    this.decrby = (...args) => this.chain(new DecrByCommand(...args));
    this.del = (...args) => this.chain(new DelCommand(...args));
    this.echo = (...args) => this.chain(new EchoCommand(...args));
    this.exists = (...args) => this.chain(new ExistsCommand(...args));
    this.expire = (...args) => this.chain(new ExpireCommand(...args));
    this.expireat = (...args) => this.chain(new ExpireAtCommand(...args));
    this.flushall = (...args) => this.chain(new FlushAllCommand(...args));
    this.flushdb = (...args) => this.chain(new FlushDBCommand(...args));
    this.get = (...args) => this.chain(new GetCommand(...args));
    this.getbit = (...args) => this.chain(new GetBitCommand(...args));
    this.getrange = (...args) => this.chain(new GetRangeCommand(...args));
    this.getset = (key, value) => this.chain(new GetSetCommand(key, value));
    this.hdel = (...args) => this.chain(new HDelCommand(...args));
    this.hexists = (...args) => this.chain(new HExistsCommand(...args));
    this.hget = (...args) => this.chain(new HGetCommand(...args));
    this.hgetall = (...args) => this.chain(new HGetAllCommand(...args));
    this.hincrby = (...args) => this.chain(new HIncrByCommand(...args));
    this.hincrbyfloat = (...args) => this.chain(new HIncrByFloatCommand(...args));
    this.hkeys = (...args) => this.chain(new HKeysCommand(...args));
    this.hlen = (...args) => this.chain(new HLenCommand(...args));
    this.hmget = (...args) => this.chain(new HMGetCommand(...args));
    this.hmset = (key, kv) => this.chain(new HMSetCommand(key, kv));
    this.hscan = (...args) => this.chain(new HScanCommand(...args));
    this.hset = (key, kv) => this.chain(new HSetCommand(key, kv));
    this.hsetnx = (key, field, value) => this.chain(new HSetNXCommand(key, field, value));
    this.hstrlen = (...args) => this.chain(new HStrLenCommand(...args));
    this.hvals = (...args) => this.chain(new HValsCommand(...args));
    this.incr = (...args) => this.chain(new IncrCommand(...args));
    this.incrby = (...args) => this.chain(new IncrByCommand(...args));
    this.incrbyfloat = (...args) => this.chain(new IncrByFloatCommand(...args));
    this.keys = (...args) => this.chain(new KeysCommand(...args));
    this.lindex = (...args) => this.chain(new LIndexCommand(...args));
    this.linsert = (key, direction, pivot, value) => this.chain(new LInsertCommand(key, direction, pivot, value));
    this.llen = (...args) => this.chain(new LLenCommand(...args));
    this.lpop = (...args) => this.chain(new LPopCommand(...args));
    this.lpush = (key, ...elements) => this.chain(new LPushCommand(key, ...elements));
    this.lpushx = (key, ...elements) => this.chain(new LPushXCommand(key, ...elements));
    this.lrange = (...args) => this.chain(new LRangeCommand(...args));
    this.lrem = (key, count, value) => this.chain(new LRemCommand(key, count, value));
    this.lset = (key, value, index) => this.chain(new LSetCommand(key, value, index));
    this.ltrim = (...args) => this.chain(new LTrimCommand(...args));
    this.mget = (...args) => this.chain(new MGetCommand(...args));
    this.mset = (kv) => this.chain(new MSetCommand(kv));
    this.msetnx = (kv) => this.chain(new MSetNXCommand(kv));
    this.persist = (...args) => this.chain(new PersistCommand(...args));
    this.pexpire = (...args) => this.chain(new PExpireCommand(...args));
    this.pexpireat = (...args) => this.chain(new PExpireAtCommand(...args));
    this.ping = (...args) => this.chain(new PingCommand(...args));
    this.psetex = (key, ttl, value) => this.chain(new PSetEXCommand(key, ttl, value));
    this.pttl = (...args) => this.chain(new PTtlCommand(...args));
    this.randomkey = () => this.chain(new RandomKeyCommand());
    this.rename = (...args) => this.chain(new RenameCommand(...args));
    this.renamenx = (...args) => this.chain(new RenameNXCommand(...args));
    this.rpop = (...args) => this.chain(new RPopCommand(...args));
    this.rpush = (key, ...elements) => this.chain(new RPushCommand(key, ...elements));
    this.rpushx = (key, ...elements) => this.chain(new RPushXCommand(key, ...elements));
    this.sadd = (key, ...members) => this.chain(new SAddCommand(key, ...members));
    this.scan = (...args) => this.chain(new ScanCommand(...args));
    this.scard = (...args) => this.chain(new SCardCommand(...args));
    this.sdiff = (...args) => this.chain(new SDiffCommand(...args));
    this.sdiffstore = (...args) => this.chain(new SDiffStoreCommand(...args));
    this.set = (key, value, opts) => this.chain(new SetCommand(key, value, opts));
    this.setbit = (...args) => this.chain(new SetBitCommand(...args));
    this.setex = (key, ttl, value) => this.chain(new SetExCommand(key, ttl, value));
    this.setnx = (key, value) => this.chain(new SetNxCommand(key, value));
    this.setrange = (...args) => this.chain(new SetRangeCommand(...args));
    this.sinter = (...args) => this.chain(new SInterCommand(...args));
    this.sinterstore = (...args) => this.chain(new SInterStoreCommand(...args));
    this.sismember = (key, member) => this.chain(new SIsMemberCommand(key, member));
    this.smembers = (...args) => this.chain(new SMembersCommand(...args));
    this.smove = (source, destination, member) => this.chain(new SMoveCommand(source, destination, member));
    this.spop = (...args) => this.chain(new SPopCommand(...args));
    this.srandmember = (...args) => this.chain(new SRandMemberCommand(...args));
    this.srem = (key, ...members) => this.chain(new SRemCommand(key, ...members));
    this.sscan = (...args) => this.chain(new SScanCommand(...args));
    this.strlen = (...args) => this.chain(new StrLenCommand(...args));
    this.sunion = (...args) => this.chain(new SUnionCommand(...args));
    this.sunionstore = (...args) => this.chain(new SUnionStoreCommand(...args));
    this.time = () => this.chain(new TimeCommand());
    this.touch = (...args) => this.chain(new TouchCommand(...args));
    this.ttl = (...args) => this.chain(new TtlCommand(...args));
    this.type = (...args) => this.chain(new TypeCommand(...args));
    this.unlink = (...args) => this.chain(new UnlinkCommand(...args));
    this.zadd = (...args) => {
      if ("score" in args[1]) {
        return this.chain(new ZAddCommand(args[0], args[1], ...args.slice(2)));
      }
      return this.chain(new ZAddCommand(args[0], args[1], ...args.slice(2)));
    };
    this.zcard = (...args) => this.chain(new ZCardCommand(...args));
    this.zcount = (...args) => this.chain(new ZCountCommand(...args));
    this.zincrby = (key, increment, member) => this.chain(new ZIncrByComand(key, increment, member));
    this.zinterstore = (...args) => this.chain(new ZInterStoreCommand(...args));
    this.zlexcount = (...args) => this.chain(new ZLexCountCommand(...args));
    this.zpopmax = (...args) => this.chain(new ZPopMaxCommand(...args));
    this.zpopmin = (...args) => this.chain(new ZPopMinCommand(...args));
    this.zrange = (...args) => this.chain(new ZRangeCommand(...args));
    this.zrank = (key, member) => this.chain(new ZRankCommand(key, member));
    this.zrem = (key, ...members) => this.chain(new ZRemCommand(key, ...members));
    this.zremrangebylex = (...args) => this.chain(new ZRemRangeByLexCommand(...args));
    this.zremrangebyrank = (...args) => this.chain(new ZRemRangeByRankCommand(...args));
    this.zremrangebyscore = (...args) => this.chain(new ZRemRangeByScoreCommand(...args));
    this.zrevrank = (key, member) => this.chain(new ZRevRankCommand(key, member));
    this.zscan = (...args) => this.chain(new ZScanCommand(...args));
    this.zscore = (key, member) => this.chain(new ZScoreCommand(key, member));
    this.zunionstore = (...args) => this.chain(new ZUnionStoreCommand(...args));
    this.client = client;
    this.commands = [];
  }
  chain(command) {
    this.commands.push(command);
    return this;
  }
};

// pkg/redis.ts
var Redis = class {
  constructor(client) {
    this.pipeline = () => new Pipeline(this.client);
    this.append = (...args) => new AppendCommand(...args).exec(this.client);
    this.bitcount = (...args) => new BitCountCommand(...args).exec(this.client);
    this.bitop = (op, destinationKey, sourceKey, ...sourceKeys) => new BitOpCommand(op, destinationKey, sourceKey, ...sourceKeys).exec(this.client);
    this.bitpos = (...args) => new BitPosCommand(...args).exec(this.client);
    this.dbsize = () => new DBSizeCommand().exec(this.client);
    this.decr = (...args) => new DecrCommand(...args).exec(this.client);
    this.decrby = (...args) => new DecrByCommand(...args).exec(this.client);
    this.del = (...args) => new DelCommand(...args).exec(this.client);
    this.echo = (...args) => new EchoCommand(...args).exec(this.client);
    this.exists = (...args) => new ExistsCommand(...args).exec(this.client);
    this.expire = (...args) => new ExpireCommand(...args).exec(this.client);
    this.expireat = (...args) => new ExpireAtCommand(...args).exec(this.client);
    this.flushall = (...args) => new FlushAllCommand(...args).exec(this.client);
    this.flushdb = (...args) => new FlushDBCommand(...args).exec(this.client);
    this.get = (...args) => new GetCommand(...args).exec(this.client);
    this.getbit = (...args) => new GetBitCommand(...args).exec(this.client);
    this.getrange = (...args) => new GetRangeCommand(...args).exec(this.client);
    this.getset = (key, value) => new GetSetCommand(key, value).exec(this.client);
    this.hdel = (...args) => new HDelCommand(...args).exec(this.client);
    this.hexists = (...args) => new HExistsCommand(...args).exec(this.client);
    this.hget = (...args) => new HGetCommand(...args).exec(this.client);
    this.hgetall = (...args) => new HGetAllCommand(...args).exec(this.client);
    this.hincrby = (...args) => new HIncrByCommand(...args).exec(this.client);
    this.hincrbyfloat = (...args) => new HIncrByFloatCommand(...args).exec(this.client);
    this.hkeys = (...args) => new HKeysCommand(...args).exec(this.client);
    this.hlen = (...args) => new HLenCommand(...args).exec(this.client);
    this.hmget = (...args) => new HMGetCommand(...args).exec(this.client);
    this.hmset = (key, kv) => new HMSetCommand(key, kv).exec(this.client);
    this.hscan = (...args) => new HScanCommand(...args).exec(this.client);
    this.hset = (key, kv) => new HSetCommand(key, kv).exec(this.client);
    this.hsetnx = (key, field, value) => new HSetNXCommand(key, field, value).exec(this.client);
    this.hstrlen = (...args) => new HStrLenCommand(...args).exec(this.client);
    this.hvals = (...args) => new HValsCommand(...args).exec(this.client);
    this.incr = (...args) => new IncrCommand(...args).exec(this.client);
    this.incrby = (...args) => new IncrByCommand(...args).exec(this.client);
    this.incrbyfloat = (...args) => new IncrByFloatCommand(...args).exec(this.client);
    this.keys = (...args) => new KeysCommand(...args).exec(this.client);
    this.lindex = (...args) => new LIndexCommand(...args).exec(this.client);
    this.linsert = (key, direction, pivot, value) => new LInsertCommand(key, direction, pivot, value).exec(this.client);
    this.llen = (...args) => new LLenCommand(...args).exec(this.client);
    this.lpop = (...args) => new LPopCommand(...args).exec(this.client);
    this.lpush = (key, ...elements) => new LPushCommand(key, ...elements).exec(this.client);
    this.lpushx = (key, ...elements) => new LPushXCommand(key, ...elements).exec(this.client);
    this.lrange = (...args) => new LRangeCommand(...args).exec(this.client);
    this.lrem = (key, count, value) => new LRemCommand(key, count, value).exec(this.client);
    this.lset = (key, value, index) => new LSetCommand(key, value, index).exec(this.client);
    this.ltrim = (...args) => new LTrimCommand(...args).exec(this.client);
    this.mget = (...args) => new MGetCommand(...args).exec(this.client);
    this.mset = (kv) => new MSetCommand(kv).exec(this.client);
    this.msetnx = (kv) => new MSetNXCommand(kv).exec(this.client);
    this.persist = (...args) => new PersistCommand(...args).exec(this.client);
    this.pexpire = (...args) => new PExpireCommand(...args).exec(this.client);
    this.pexpireat = (...args) => new PExpireAtCommand(...args).exec(this.client);
    this.ping = (...args) => new PingCommand(...args).exec(this.client);
    this.psetex = (key, ttl, value) => new PSetEXCommand(key, ttl, value).exec(this.client);
    this.pttl = (...args) => new PTtlCommand(...args).exec(this.client);
    this.randomkey = () => new RandomKeyCommand().exec(this.client);
    this.rename = (...args) => new RenameCommand(...args).exec(this.client);
    this.renamenx = (...args) => new RenameNXCommand(...args).exec(this.client);
    this.rpop = (...args) => new RPopCommand(...args).exec(this.client);
    this.rpush = (key, ...elements) => new RPushCommand(key, ...elements).exec(this.client);
    this.rpushx = (key, ...elements) => new RPushXCommand(key, ...elements).exec(this.client);
    this.sadd = (key, ...members) => new SAddCommand(key, ...members).exec(this.client);
    this.scan = (...args) => new ScanCommand(...args).exec(this.client);
    this.scard = (...args) => new SCardCommand(...args).exec(this.client);
    this.sdiff = (...args) => new SDiffCommand(...args).exec(this.client);
    this.sdiffstore = (...args) => new SDiffStoreCommand(...args).exec(this.client);
    this.set = (key, value, opts) => new SetCommand(key, value, opts).exec(this.client);
    this.setbit = (...args) => new SetBitCommand(...args).exec(this.client);
    this.setex = (key, ttl, value) => new SetExCommand(key, ttl, value).exec(this.client);
    this.setnx = (key, value) => new SetNxCommand(key, value).exec(this.client);
    this.setrange = (...args) => new SetRangeCommand(...args).exec(this.client);
    this.sinter = (...args) => new SInterCommand(...args).exec(this.client);
    this.sinterstore = (...args) => new SInterStoreCommand(...args).exec(this.client);
    this.sismember = (key, member) => new SIsMemberCommand(key, member).exec(this.client);
    this.smembers = (...args) => new SMembersCommand(...args).exec(this.client);
    this.smove = (source, destination, member) => new SMoveCommand(source, destination, member).exec(this.client);
    this.spop = (...args) => new SPopCommand(...args).exec(this.client);
    this.srandmember = (...args) => new SRandMemberCommand(...args).exec(this.client);
    this.srem = (key, ...members) => new SRemCommand(key, ...members).exec(this.client);
    this.sscan = (...args) => new SScanCommand(...args).exec(this.client);
    this.strlen = (...args) => new StrLenCommand(...args).exec(this.client);
    this.sunion = (...args) => new SUnionCommand(...args).exec(this.client);
    this.sunionstore = (...args) => new SUnionStoreCommand(...args).exec(this.client);
    this.time = () => new TimeCommand().exec(this.client);
    this.touch = (...args) => new TouchCommand(...args).exec(this.client);
    this.ttl = (...args) => new TtlCommand(...args).exec(this.client);
    this.type = (...args) => new TypeCommand(...args).exec(this.client);
    this.unlink = (...args) => new UnlinkCommand(...args).exec(this.client);
    this.zadd = (...args) => {
      if ("score" in args[1]) {
        return new ZAddCommand(args[0], args[1], ...args.slice(2)).exec(this.client);
      }
      return new ZAddCommand(args[0], args[1], ...args.slice(2)).exec(this.client);
    };
    this.zcard = (...args) => new ZCardCommand(...args).exec(this.client);
    this.zcount = (...args) => new ZCountCommand(...args).exec(this.client);
    this.zincrby = (key, increment, member) => new ZIncrByComand(key, increment, member).exec(this.client);
    this.zinterstore = (...args) => new ZInterStoreCommand(...args).exec(this.client);
    this.zlexcount = (...args) => new ZLexCountCommand(...args).exec(this.client);
    this.zpopmax = (...args) => new ZPopMaxCommand(...args).exec(this.client);
    this.zpopmin = (...args) => new ZPopMinCommand(...args).exec(this.client);
    this.zrange = (...args) => new ZRangeCommand(...args).exec(this.client);
    this.zrank = (key, member) => new ZRankCommand(key, member).exec(this.client);
    this.zrem = (key, ...members) => new ZRemCommand(key, ...members).exec(this.client);
    this.zremrangebylex = (...args) => new ZRemRangeByLexCommand(...args).exec(this.client);
    this.zremrangebyrank = (...args) => new ZRemRangeByRankCommand(...args).exec(this.client);
    this.zremrangebyscore = (...args) => new ZRemRangeByScoreCommand(...args).exec(this.client);
    this.zrevrank = (key, member) => new ZRevRankCommand(key, member).exec(this.client);
    this.zscan = (...args) => new ZScanCommand(...args).exec(this.client);
    this.zscore = (key, member) => new ZScoreCommand(key, member).exec(this.client);
    this.zunionstore = (...args) => new ZUnionStoreCommand(...args).exec(this.client);
    this.client = client;
  }
};

export {
  Redis
};
