"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const t = __importStar(require("@umijs/bundler-utils/compiled/babel/types"));
const path_1 = require("path");
const CSS_EXT_NAMES = ['.css', '.less', '.sass', '.scss', '.stylus', '.styl'];
function default_1() {
    return {
        visitor: {
            ImportDeclaration(path) {
                const { specifiers, source, source: { value }, } = path.node;
                if (specifiers.length && CSS_EXT_NAMES.includes((0, path_1.extname)(value))) {
                    source.value = `${value}?modules`;
                }
            },
            // e.g.
            // const styles = await import('./index.less');
            VariableDeclarator(path) {
                const { node } = path;
                if (t.isAwaitExpression(node.init) &&
                    t.isCallExpression(node.init.argument) &&
                    t.isImport(node.init.argument.callee) &&
                    node.init.argument.arguments.length === 1 &&
                    t.isStringLiteral(node.init.argument.arguments[0]) &&
                    CSS_EXT_NAMES.includes((0, path_1.extname)(node.init.argument.arguments[0].value))) {
                    node.init.argument.arguments[0].value = `${node.init.argument.arguments[0].value}?modules`;
                }
            },
        },
    };
}
exports.default = default_1;
