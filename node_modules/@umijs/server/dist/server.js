"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRequestHandler = exports.getMarkup = void 0;
const react_1 = __importDefault(require("react"));
const server_1 = __importDefault(require("react-dom/server"));
const react_router_dom_1 = require("react-router-dom");
const routes_1 = require("./routes");
const scripts_1 = require("./scripts");
const styles_1 = require("./styles");
function getMarkup(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        // TODO: use real component
        let markup = server_1.default.renderToString(react_1.default.createElement('div', { id: opts.mountElementId || 'root' }));
        function propsToString(opts) {
            return Object.keys(opts.props)
                .filter((key) => !(opts.filters || []).includes(key))
                .map((key) => `${key}=${JSON.stringify(opts.props[key])}`)
                .join(' ');
        }
        function getScriptContent(script) {
            const attrs = propsToString({
                props: script,
                filters: ['src', 'content'],
            });
            return script.src
                ? `<script${opts.esmScript ? ' type="module"' : ''} ${attrs} src="${script.src}"></script>`
                : `<script${opts.esmScript ? ' type="module"' : ''} ${attrs}>${script.content}</script>`;
        }
        function getStyleContent(style) {
            const attrs = propsToString({
                props: style,
                filters: ['src', 'content'],
            });
            return style.src
                ? `<link rel="stylesheet" ${attrs} href="${style.src}" />`
                : `<style ${attrs}>${style.content}</style>`;
        }
        function getTagContent(opts) {
            const attrs = propsToString({
                props: opts.attrs,
            });
            return `<${opts.tagName} ${attrs} />`;
        }
        const favicon = opts.favicon
            ? `<link rel="shortcut icon" href="${opts.favicon}">`
            : '';
        const metas = (opts.metas || []).map((meta) => getTagContent({ attrs: meta, tagName: 'meta' }));
        const links = (opts.links || []).map((link) => getTagContent({ attrs: link, tagName: 'link' }));
        const styles = (0, styles_1.normalizeStyles)(opts.styles || []).map(getStyleContent);
        const headScripts = (0, scripts_1.normalizeScripts)(opts.headScripts || []).map(getScriptContent);
        const scripts = (0, scripts_1.normalizeScripts)(opts.scripts || []).map(getScriptContent);
        markup = [
            `<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8" />
<meta
  name="viewport"
  content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"
/>
<meta http-equiv="X-UA-Compatible" content="ie=edge" />`,
            metas.join('\n'),
            favicon,
            links.join('\n'),
            styles.join('\n'),
            headScripts.join('\n'),
            `</head>
<body>`,
            markup,
            scripts.join('\n'),
            `</body>
</html>`,
        ]
            .filter(Boolean)
            .join('\n');
        if (opts.modifyHTML) {
            markup = yield opts.modifyHTML(markup, { path: opts.path });
        }
        return markup;
    });
}
exports.getMarkup = getMarkup;
function createRequestHandler(opts) {
    return (req, res, next) => __awaiter(this, void 0, void 0, function* () {
        // 匹配路由，不匹配走 next()
        // TODO: cache
        const routes = (0, routes_1.createServerRoutes)({
            routesById: opts.routes,
        });
        const matches = (0, react_router_dom_1.matchRoutes)(routes, req.path, opts.base);
        if (matches) {
            res.set('Content-Type', 'text/html');
            const markup = yield getMarkup(Object.assign(Object.assign({}, opts), { path: req.path }));
            res.end(markup);
        }
        else {
            next();
        }
    });
}
exports.createRequestHandler = createRequestHandler;
