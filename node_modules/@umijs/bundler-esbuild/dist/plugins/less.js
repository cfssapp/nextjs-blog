"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.aliasLessImportPath = void 0;
const enhanced_resolve_1 = __importDefault(require("enhanced-resolve"));
const fs_1 = require("fs");
const less_1 = __importDefault(require("less"));
const less_plugin_aliases_1 = __importDefault(require("less-plugin-aliases"));
const path_1 = __importDefault(require("path"));
const postcssProcess_1 = require("../utils/postcssProcess");
const sortByAffix_1 = require("../utils/sortByAffix");
const resolver = enhanced_resolve_1.default.create({
    mainFields: ['module', 'browser', 'main'],
    extensions: [
        '.json',
        '.js',
        '.jsx',
        '.ts',
        '.tsx',
        '.cjs',
        '.mjs',
        '.less',
        '.css',
    ],
    // TODO: support exports
    exportsFields: [],
});
function resolve(context, path) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            resolver(context, path, (err, result) => err ? reject(err) : resolve(result));
        });
    });
}
const aliasLessImports = (ctx, alias, importer) => __awaiter(void 0, void 0, void 0, function* () {
    const importRegex = /@import(?:\s+\((.*)\))?\s+['"](.*)['"]/;
    const globalImportRegex = /@import(?:\s+\((.*)\))?\s+['"](.*)['"]/g;
    const match = ctx.match(globalImportRegex) || [];
    for (const el of match) {
        const [imp, _, filePath] = el.match(importRegex) || [];
        let aliaPath = yield (0, exports.aliasLessImportPath)(filePath, alias, importer);
        if (aliaPath) {
            ctx = ctx.replace(imp, el.replace(filePath, aliaPath));
        }
    }
    return ctx;
});
const aliasLessImportPath = (filePath, alias, importer) => __awaiter(void 0, void 0, void 0, function* () {
    // ～ 写法在 esbuild 中无实际意义
    let aliaPath = filePath.startsWith('~')
        ? filePath.replace('~', '')
        : filePath;
    const keys = (0, sortByAffix_1.sortByAffix)({ arr: Object.keys(alias), affix: '$' });
    for (const key of keys) {
        const pathSegments = aliaPath.split('/');
        if (pathSegments[0] === key) {
            pathSegments[0] = alias[key];
            aliaPath = pathSegments.join('/');
            aliaPath = path_1.default.extname(aliaPath) ? aliaPath : `${aliaPath}.less`;
            return yield resolve(importer, aliaPath);
        }
    }
    return null;
});
exports.aliasLessImportPath = aliasLessImportPath;
exports.default = (options = {}) => {
    const { alias, inlineStyle, config } = options, lessOptions = __rest(options, ["alias", "inlineStyle", "config"]);
    return {
        name: 'less',
        setup({ onResolve, onLoad }) {
            onResolve({ filter: /\.less$/, namespace: 'file' }, (args) => __awaiter(this, void 0, void 0, function* () {
                let filePath = args.path;
                let isMatchedAlias = false;
                // first match alias
                if (!!alias) {
                    const aliasMatchPath = yield (0, exports.aliasLessImportPath)(filePath, alias, args.path);
                    if (aliasMatchPath) {
                        isMatchedAlias = true;
                        filePath = aliasMatchPath;
                    }
                }
                // if alias not matched, identify whether import from deps (node_modules)
                if (!isMatchedAlias) {
                    const isImportFromDeps = !path_1.default.isAbsolute(filePath) && !filePath.startsWith('.');
                    if (isImportFromDeps) {
                        filePath = yield resolve(process.cwd(), filePath);
                    }
                    else {
                        filePath = path_1.default.resolve(process.cwd(), path_1.default.relative(process.cwd(), args.resolveDir), args.path);
                    }
                }
                return {
                    path: filePath,
                    namespace: inlineStyle ? 'less-file' : 'file',
                };
            }));
            if (inlineStyle) {
                onResolve({ filter: /\.less$/, namespace: 'less-file' }, (args) => {
                    return { path: args.path, namespace: 'less-content' };
                });
                onResolve({ filter: /^__style_helper__$/, namespace: 'less-file' }, (args) => ({
                    path: args.path,
                    namespace: 'style-helper',
                    sideEffects: false,
                }));
                onLoad({ filter: /.*/, namespace: 'less-file' }, (args) => __awaiter(this, void 0, void 0, function* () {
                    return ({
                        contents: `
            import { injectStyle } from "__style_helper__"
            import css from ${JSON.stringify(args.path)}
            injectStyle(css)
            export default{}
          `,
                    });
                }));
            }
            onLoad({ filter: /\.less$/, namespace: inlineStyle ? 'less-content' : 'file' }, (args) => __awaiter(this, void 0, void 0, function* () {
                let content = yield fs_1.promises.readFile(args.path, 'utf-8');
                if (!!alias) {
                    content = yield aliasLessImports(content, alias, args.path);
                }
                const dir = path_1.default.dirname(args.path);
                const filename = path_1.default.basename(args.path);
                try {
                    const result = yield less_1.default.render(content, Object.assign(Object.assign({ plugins: [
                            new less_plugin_aliases_1.default({
                                prefix: '~',
                                aliases: alias || {},
                            }),
                        ], filename, rootpath: dir }, lessOptions), { paths: [...(lessOptions.paths || []), dir] }));
                    const postcssrResult = yield (0, postcssProcess_1.postcssProcess)(config, result.css, args.path);
                    return {
                        contents: postcssrResult.css,
                        loader: inlineStyle ? 'text' : 'css',
                        resolveDir: dir,
                    };
                }
                catch (error) {
                    return {
                        errors: [
                            {
                                text: error.message,
                                location: {
                                    namespace: 'file',
                                    file: error.filename,
                                    line: error.line,
                                    column: error.column,
                                },
                            },
                        ],
                        resolveDir: dir,
                    };
                }
            }));
        },
    };
};
