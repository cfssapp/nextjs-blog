"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
const utils_1 = require("@umijs/utils");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const vite_1 = require("../compiled/vite");
const config_1 = require("./config/config");
const deleteOutputFiles_1 = __importDefault(require("./plugins/deleteOutputFiles"));
const types_1 = require("./types");
/**
 * get umi template directory from entry
 */
function getUmiTmpDir(entry) {
    const mainEntry = Object.values(entry).find((p) => p.includes('/umi.ts'));
    return mainEntry && path_1.default.dirname(mainEntry);
}
/**
 * generate temp html entry for vite builder
 * @param cwd   project root
 * @param entry umi entry config
 */
function generateTempEntry(cwd, entry) {
    const umiTmpDir = entry && getUmiTmpDir(entry);
    if (umiTmpDir) {
        const entryTmpDir = path_1.default.join(umiTmpDir, '.bundler-vite-entry');
        fs_1.default.mkdirSync(entryTmpDir);
        return Object.keys(entry).reduce((r, name) => {
            const entryFilePath = path_1.default.join(entryTmpDir, `${name}.html`);
            fs_1.default.writeFileSync(entryFilePath, `<html><head></head><body><script type="module" src="${entry[name]}"></script></body></html>`, 'utf8');
            return Object.assign(Object.assign({}, r), { [name]: path_1.default.relative(cwd, entryFilePath) });
        }, {});
    }
}
function build(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        let extraHtmlPart;
        const startTms = +new Date();
        const result = {
            isFirstCompile: true,
            time: 0,
        };
        const tmpHtmlEntry = generateTempEntry(opts.cwd, opts.entry);
        const viteUserConfig = yield (0, config_1.getConfig)({
            cwd: opts.cwd,
            env: types_1.Env.production,
            entry: opts.entry,
            userConfig: opts.config,
            extraBabelPlugins: [
                ...(opts.beforeBabelPlugins || []),
                ...(opts.extraBabelPlugins || []),
            ],
            extraBabelPresets: [
                ...(opts.beforeBabelPresets || []),
                ...(opts.extraBabelPresets || []),
            ],
            modifyViteConfig: opts.modifyViteConfig,
        });
        const viteBuildConfig = (0, vite_1.mergeConfig)({
            root: opts.cwd,
            mode: types_1.Env.production,
            build: {
                // generate assets to publicPath dir
                assetsDir: path_1.default.relative('/', path_1.default.join('/', opts.config.publicPath || '')),
                rollupOptions: tmpHtmlEntry
                    ? // first use entry from options
                        {
                            // use temp html entry for vite build
                            input: tmpHtmlEntry,
                            // remove temp html entry after build
                            plugins: [
                                (0, deleteOutputFiles_1.default)(Object.values(tmpHtmlEntry), (file) => {
                                    if (file.type === 'asset') {
                                        const $ = utils_1.cheerio.load(file.source);
                                        extraHtmlPart = {
                                            head: $('head').html(),
                                            body: $('body').html(),
                                        };
                                    }
                                }),
                            ],
                        }
                    : // fallback to vite default entry
                        {},
            },
        }, viteUserConfig);
        try {
            result.stats = yield (0, vite_1.build)(viteBuildConfig);
            result.stats.extraHtml = extraHtmlPart;
            result.time = +new Date() - startTms;
        }
        catch (err) {
            result.err = err;
        }
        opts.onBuildComplete && opts.onBuildComplete(result);
    });
}
exports.build = build;
