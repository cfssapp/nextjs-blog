"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
const core_1 = require("@svgr/core");
const esbuild_1 = require("@umijs/bundler-utils/compiled/esbuild");
const fs_1 = __importDefault(require("fs"));
/**
 * an universal tool to transform SVG into React components
 * @param svgr svgr options
 * @param svgo svgo options
 * @param transformOptions include transform options to translate svg ReactComponent
 */
function svgrPlugin(svgr = {}, svgo = {}, transformOptions) {
    return {
        name: 'bundler-vite:svgr',
        transform(code, id) {
            return __awaiter(this, void 0, void 0, function* () {
                if (id.endsWith('.svg')) {
                    let componentCode = code;
                    if (svgr) {
                        const svgFile = fs_1.default.readFileSync(id, 'utf8');
                        const svgrCode = yield (0, core_1.transform)(svgFile, Object.assign(Object.assign({ icon: true, svgoConfig: Object.assign({}, (svgo || {})) }, svgr), { svgo: !!svgo }), { componentName: 'ReactComponent' });
                        componentCode =
                            svgrCode.replace('export default ReactComponent', 'export { ReactComponent }') +
                                '\n' +
                                code;
                    }
                    const result = yield (0, esbuild_1.transform)(componentCode, Object.assign({ loader: 'jsx', sourcefile: id, sourcemap: true }, transformOptions));
                    return {
                        code: result.code,
                        map: result.map || null,
                    };
                }
            });
        },
    };
}
exports.default = svgrPlugin;
