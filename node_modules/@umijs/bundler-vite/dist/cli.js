"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const esbuild_1 = __importDefault(require("@umijs/bundler-utils/compiled/esbuild"));
const utils_1 = require("@umijs/utils");
const assert_1 = __importDefault(require("assert"));
const fs_1 = require("fs");
const path_1 = require("path");
const build_1 = require("./build");
const dev_1 = require("./dev");
const args = (0, utils_1.yParser)(process.argv.slice(2), {});
const command = args._[0];
const cwd = process.cwd();
const entry = (0, utils_1.tryPaths)([
    (0, path_1.join)(cwd, 'src/index.tsx'),
    (0, path_1.join)(cwd, 'src/index.ts'),
    (0, path_1.join)(cwd, 'index.tsx'),
    (0, path_1.join)(cwd, 'index.ts'),
]);
let config = {};
const configFile = (0, path_1.join)(cwd, args.config || 'config.ts');
utils_1.register.register({
    implementor: esbuild_1.default,
});
utils_1.register.clearFiles();
if ((0, fs_1.existsSync)(configFile)) {
    config = require(configFile).default;
}
Object.assign(config, args);
if (command === 'build') {
    (() => __awaiter(void 0, void 0, void 0, function* () {
        process.env.NODE_ENV = 'production';
        (0, assert_1.default)(entry, `Build failed: entry not found.`);
        try {
            yield (0, build_1.build)({
                config,
                cwd,
                entry: {
                    [getEntryKey(entry)]: entry,
                },
            });
        }
        catch (e) {
            console.error(e);
        }
    }))();
}
else if (command === 'dev') {
    (() => __awaiter(void 0, void 0, void 0, function* () {
        process.env.NODE_ENV = 'development';
        try {
            (0, assert_1.default)(entry, `Build failed: entry not found.`);
            yield (0, dev_1.dev)({
                config,
                cwd,
                entry: {
                    [getEntryKey(entry)]: entry,
                },
            });
        }
        catch (e) {
            console.error(e);
        }
    }))();
}
else {
    error(`Unsupported command ${command}.`);
}
function error(msg) {
    console.error(utils_1.chalk.red(msg));
}
function getEntryKey(path) {
    return (0, path_1.basename)(path, (0, path_1.extname)(path));
}
