"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function hoistAlias(alias) {
    function getFinalReplacement(oAlias, replacement, index) {
        //过滤重复配置，防止死循环
        const newAlias = oAlias.slice();
        newAlias.splice(index, 1);
        //遍历找到需要深层替换的配置
        for (let i = 0; i < newAlias.length; i++) {
            if (newAlias[i].find.test(replacement)) {
                replacement = replacement.replace(newAlias[i].find, newAlias[i].replacement);
                return getFinalReplacement(newAlias, replacement, i);
            }
        }
        return replacement;
    }
    alias.forEach((rule, index, alias) => {
        rule.replacement = getFinalReplacement(alias, rule.replacement, index);
    });
    return alias;
}
/**
 * transform umi alias to vite alias
 */
exports.default = (function alias(userConfig) {
    const config = {
        resolve: {
            alias: [
                // to support less-loader ~ for local deps, refer: https://github.com/vitejs/vite/issues/2185
                { find: /^~/, replacement: '' },
            ],
        },
    };
    // alias: { foo:  bar } foo => bar, foo/hoo => bar/foo
    // alias: { foo$: bar } foo => bar, foo/hoo => foo/hoo
    if (userConfig.alias) {
        const userAlias = Object.entries(userConfig.alias).map(([name, target]) => ({
            // supports webpack suffix $ and less-loader prefix ~
            // example:
            //   - dep => ^~?dep(?=\/|$)
            //   - dep$ => ^~?dep$
            find: new RegExp(`^~?${name.replace(/(?<!\$)$/, '(?=/|$)')}`),
            replacement: target,
        }));
        const wholeAlias = config.resolve.alias;
        wholeAlias.unshift(...userAlias);
        config.resolve.alias = hoistAlias(wholeAlias);
    }
    return config;
});
