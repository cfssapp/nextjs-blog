"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = void 0;
const vite_1 = require("../../compiled/vite");
const plugins_1 = __importDefault(require("../plugins"));
const transformer_1 = __importDefault(require("./transformer"));
function getConfig(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const applyOpts = Object.assign(Object.assign({}, opts.userConfig), { entry: opts.entry, extraBabelPlugins: [
                ...(opts.extraBabelPlugins || []),
                ...(opts.userConfig.extraBabelPlugins || []),
            ], extraBabelPresets: [
                ...(opts.extraBabelPresets || []),
                ...(opts.userConfig.extraBabelPresets || []),
            ] });
        const vitePluginsConfig = (0, plugins_1.default)(applyOpts);
        const viteConfigFromUserConfig = (0, transformer_1.default)(applyOpts);
        let viteConfig = (0, vite_1.mergeConfig)(vitePluginsConfig, viteConfigFromUserConfig);
        if (opts.modifyViteConfig) {
            viteConfig = yield opts.modifyViteConfig(viteConfig, {
                env: opts.env,
            });
        }
        return viteConfig;
    });
}
exports.getConfig = getConfig;
