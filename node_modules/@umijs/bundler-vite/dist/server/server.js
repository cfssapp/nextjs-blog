"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createServer = void 0;
const utils_1 = require("@umijs/utils");
const http_1 = __importDefault(require("http"));
const express_1 = __importDefault(require("../../compiled/express"));
const vite_1 = require("../../compiled/vite");
const onHotUpdate_1 = __importDefault(require("./plugins/onHotUpdate"));
function createServer(opts) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const startTms = +new Date();
        const { viteConfig, onDevCompileDone } = opts;
        const app = (0, express_1.default)();
        const vite = yield (0, vite_1.createServer)(Object.assign(Object.assign(Object.assign({}, viteConfig), (typeof onDevCompileDone === 'function'
            ? {
                plugins: viteConfig.plugins.concat([
                    (0, onHotUpdate_1.default)((modules) => __awaiter(this, void 0, void 0, function* () {
                        yield onDevCompileDone({
                            time: 0,
                            isFirstCompile: false,
                            stats: modules,
                        });
                    })),
                ]),
            }
            : {})), { server: Object.assign(Object.assign({}, viteConfig.server), { middlewareMode: 'html' }) }));
        // before middlewares
        (_a = opts.beforeMiddlewares) === null || _a === void 0 ? void 0 : _a.forEach((m) => app.use(m));
        // after middlewares, insert before vite spaFallbackMiddleware
        // refer: https://github.com/vitejs/vite/blob/2c586165d7bc4b60f8bcf1f3b462b97a72cce58c/packages/vite/src/node/server/index.ts#L508
        if ((_b = opts.afterMiddlewares) === null || _b === void 0 ? void 0 : _b.length) {
            vite.middlewares.stack.some((s, i) => {
                if (s.handle.name === 'viteSpaFallbackMiddleware') {
                    const afterStacks = opts.afterMiddlewares.map((handle) => ({
                        route: '',
                        handle,
                    }));
                    vite.middlewares.stack.splice(i, 0, ...afterStacks);
                    return true;
                }
                return false;
            });
        }
        // use vite via middleware way
        app.use(vite.middlewares);
        // writeToDisk(?)
        // mock
        // prerender
        // bundless
        const server = http_1.default.createServer(app);
        const port = opts.port || 8000;
        server.listen(port, () => __awaiter(this, void 0, void 0, function* () {
            if (typeof onDevCompileDone === 'function') {
                yield onDevCompileDone({
                    time: +new Date() - startTms,
                    isFirstCompile: true,
                    // @ts-ignore
                    stats: vite._optimizeDepsMetadata,
                });
            }
            utils_1.logger.ready(`Example app listening at http://${process.env.HOST || '127.0.0.1'}:${port}`);
        }));
        return server;
    });
}
exports.createServer = createServer;
