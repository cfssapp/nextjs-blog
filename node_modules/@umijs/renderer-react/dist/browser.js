import React from 'react';
import ReactDOM from 'react-dom';
import { Router, useRoutes } from 'react-router-dom';
import { AppContext, useAppData } from './appContext';
import { createClientRoutes } from './routes';
function BrowserRoutes(props) {
    const { history } = props;
    const [state, setState] = React.useState({
        action: history.action,
        location: history.location,
    });
    React.useLayoutEffect(() => history.listen(setState), [history]);
    React.useLayoutEffect(() => history.listen((location, action) => {
        props.pluginManager.applyPlugins({
            key: 'onRouteChange',
            type: 'event',
            args: {
                routes: props.routes,
                clientRoutes: props.clientRoutes,
                location,
                action,
            },
        });
    }), [history, props.routes, props.clientRoutes]);
    return (React.createElement(Router, { navigator: history, location: state.location, basename: props.basename }, props.children));
}
function Routes() {
    const { clientRoutes } = useAppData();
    return useRoutes(clientRoutes);
}
export function renderClient(opts) {
    const basename = opts.basename || '/';
    const rootElement = opts.rootElement || document.getElementById('root');
    const clientRoutes = createClientRoutes({
        routesById: opts.routes,
        routeComponents: opts.routeComponents,
        loadingComponent: opts.loadingComponent,
    });
    let rootContainer = (React.createElement(BrowserRoutes, { basename: basename, pluginManager: opts.pluginManager, routes: opts.routes, clientRoutes: clientRoutes, history: opts.history },
        React.createElement(Routes, null)));
    for (const key of [
        // Lowest to the highest priority
        'innerProvider',
        'i18nProvider',
        'accessProvider',
        'dataflowProvider',
        'outerProvider',
        'rootContainer',
    ]) {
        rootContainer = opts.pluginManager.applyPlugins({
            type: 'modify',
            key: key,
            initialValue: rootContainer,
            args: {},
        });
    }
    const browser = (React.createElement(AppContext.Provider, { value: {
            routes: opts.routes,
            routeComponents: opts.routeComponents,
            clientRoutes,
            pluginManager: opts.pluginManager,
            rootElement: opts.rootElement,
            basename,
        } }, rootContainer));
    // @ts-ignore
    if (ReactDOM.createRoot) {
        // @ts-ignore
        ReactDOM.createRoot(rootElement).render(browser);
    }
    else {
        ReactDOM.render(browser, rootElement);
    }
}
