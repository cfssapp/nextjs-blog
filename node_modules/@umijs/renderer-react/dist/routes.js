var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
// @ts-ignore
import loadable from '@loadable/component';
import React from 'react';
import { Navigate } from 'react-router-dom';
import { RouteContext } from './routeContext';
export function createClientRoutes(opts) {
    const { routesById, parentId, routeComponents } = opts;
    return Object.keys(routesById)
        .filter((id) => routesById[id].parentId === parentId)
        .map((id) => {
        const route = createClientRoute({
            route: routesById[id],
            routeComponent: routeComponents[id],
            loadingComponent: opts.loadingComponent,
        });
        const children = createClientRoutes({
            routesById,
            routeComponents,
            parentId: route.id,
            loadingComponent: opts.loadingComponent,
        });
        if (children.length > 0) {
            // @ts-ignore
            route.children = children;
            // TODO: remove me
            // compatible with @ant-design/pro-layout
            // @ts-ignore
            route.routes = children;
        }
        return route;
    });
}
export function createClientRoute(opts) {
    const { route } = opts;
    const { id, path, index, redirect } = route, props = __rest(route, ["id", "path", "index", "redirect"]);
    return Object.assign({ id: id, path: path, index: index, element: redirect ? (React.createElement(Navigate, { to: redirect })) : (React.createElement(RouteContext.Provider, { value: {
                route: opts.route,
            } },
            React.createElement(RemoteComponent, { loader: opts.routeComponent, loadingComponent: opts.loadingComponent || DefaultLoading }))) }, props);
}
function DefaultLoading() {
    return React.createElement("div", null);
}
function RemoteComponent(props) {
    const Component = loadable(props.loader, {
        fallback: React.createElement(props.loadingComponent, null),
    });
    return React.createElement(Component, null);
}
