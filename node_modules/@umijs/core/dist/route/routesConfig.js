"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfigRoutes = void 0;
const assert_1 = __importDefault(require("assert"));
function getConfigRoutes(opts) {
    const memo = { ret: {}, id: 1 };
    transformRoutes({ routes: opts.routes, parentId: undefined, memo });
    return memo.ret;
}
exports.getConfigRoutes = getConfigRoutes;
function transformRoutes(opts) {
    opts.routes.forEach((route) => {
        transformRoute({ route, parentId: opts.parentId, memo: opts.memo });
    });
}
function transformRoute(opts) {
    (0, assert_1.default)(!opts.route.children, 'children is not allowed in route props, use routes instead.');
    const id = String(opts.memo.id++);
    const _a = opts.route, { routes, component } = _a, routeProps = __rest(_a, ["routes", "component"]);
    let absPath = opts.route.path;
    if ((absPath === null || absPath === void 0 ? void 0 : absPath.charAt(0)) !== '/') {
        const parentAbsPath = opts.parentId
            ? opts.memo.ret[opts.parentId].absPath.replace(/\/*$/, '/') // to remove '/'s on the tail
            : '/';
        absPath = parentAbsPath + absPath;
    }
    opts.memo.ret[id] = Object.assign(Object.assign(Object.assign(Object.assign({}, routeProps), { path: opts.route.path }), (component ? { file: component } : {})), { parentId: opts.parentId, id });
    if (absPath) {
        opts.memo.ret[id].absPath = absPath;
    }
    if (opts.route.routes) {
        transformRoutes({
            routes: opts.route.routes,
            parentId: id,
            memo: opts.memo,
        });
    }
}
