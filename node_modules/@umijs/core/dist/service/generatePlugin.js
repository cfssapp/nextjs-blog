"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@umijs/utils");
const generator_1 = require("./generator");
exports.default = (api) => {
    api.registerCommand({
        name: 'generate',
        alias: 'g',
        details: `
umi generate
`,
        description: 'generate code snippets quickly',
        fn({ args }) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const [type] = args._;
                const runGenerator = (generator) => __awaiter(this, void 0, void 0, function* () {
                    yield (generator === null || generator === void 0 ? void 0 : generator.fn({
                        api,
                        args,
                        generateFile: utils_1.generateFile,
                        installDeps: utils_1.installDeps,
                        updatePackageJSON: utils_1.updatePackageJSON,
                    }));
                });
                if (type) {
                    const generator = api.service.generators[type];
                    if (!generator) {
                        throw new Error(`Generator ${type} not found.`);
                    }
                    if (generator.type === generator_1.GeneratorType.enable) {
                        const enable = yield ((_a = generator.checkEnable) === null || _a === void 0 ? void 0 : _a.call(generator, {
                            api,
                            args,
                        }));
                        if (!enable) {
                            throw new Error(`Generator ${type} is unable.The corresponding function has been turned on or is not available.`);
                        }
                    }
                    yield runGenerator(generator);
                }
                else {
                    const getEnableGenerators = (generators) => __awaiter(this, void 0, void 0, function* () {
                        const questions = [];
                        Object.keys(generators).forEach((key) => __awaiter(this, void 0, void 0, function* () {
                            var _b, _c;
                            if (generators[key].type === generator_1.GeneratorType.generate) {
                                questions.push({
                                    title: `${generators[key].name} -- ${generators[key].description}` ||
                                        '',
                                    value: generators[key].key,
                                });
                            }
                            else {
                                const enable = yield ((_c = (_b = generators[key]) === null || _b === void 0 ? void 0 : _b.checkEnable) === null || _c === void 0 ? void 0 : _c.call(_b, {
                                    api,
                                    args,
                                }));
                                if (enable) {
                                    questions.push({
                                        title: `${generators[key].name} -- ${generators[key].description}` ||
                                            '',
                                        value: generators[key].key,
                                    });
                                }
                            }
                        }));
                        return questions;
                    });
                    const questions = yield getEnableGenerators(api.service.generators);
                    const { gType } = yield (0, utils_1.prompts)({
                        type: 'select',
                        name: 'gType',
                        message: 'Pick generator type',
                        choices: questions,
                    });
                    yield runGenerator(api.service.generators[gType]);
                }
            });
        },
    });
};
