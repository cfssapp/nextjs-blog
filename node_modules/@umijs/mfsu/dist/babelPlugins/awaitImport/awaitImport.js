"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const t = __importStar(require("@umijs/bundler-utils/compiled/babel/types"));
const checkMatch_1 = require("./checkMatch");
function default_1() {
    return {
        pre() {
            // @ts-ignore
            this.cache = new Map();
        },
        post(state) {
            var _a, _b;
            // @ts-ignore
            const { cache } = this;
            if (cache.has(state.opts.filename)) {
                // @ts-ignore
                (_b = (_a = this.opts).onCollect) === null || _b === void 0 ? void 0 : _b.call(_a, {
                    file: state.opts.filename,
                    data: cache.get(state.opts.filename),
                });
            }
        },
        visitor: {
            Program: {
                exit(path, { opts }) {
                    let index = path.node.body.length - 1;
                    while (index >= 0) {
                        const node = path.node.body[index];
                        // import x from 'x';
                        // import * as x from 'x';
                        // import x, * as xx from 'x';
                        // import { x } from 'x';
                        if (t.isImportDeclaration(node)) {
                            const { isMatch, replaceValue } = (0, checkMatch_1.checkMatch)({
                                // @ts-ignore
                                cache: this.cache,
                                value: node.source.value,
                                opts,
                                path,
                            });
                            if (isMatch) {
                                node.source.value = replaceValue;
                            }
                        }
                        // export * from 'x';
                        else if (t.isExportAllDeclaration(node)) {
                            const { isMatch, replaceValue } = (0, checkMatch_1.checkMatch)({
                                // @ts-ignore
                                cache: this.cache,
                                value: node.source.value,
                                opts,
                                path,
                            });
                            if (isMatch) {
                                node.source.value = replaceValue;
                            }
                        }
                        // export { x } from 'x';
                        else if (t.isExportNamedDeclaration(node) && node.source) {
                            const { isMatch, replaceValue } = (0, checkMatch_1.checkMatch)({
                                // @ts-ignore
                                cache: this.cache,
                                value: node.source.value,
                                opts,
                                path,
                            });
                            if (isMatch) {
                                node.source.value = replaceValue;
                            }
                        }
                        index -= 1;
                    }
                },
            },
            CallExpression: {
                exit(path, { opts }) {
                    const { node } = path;
                    if (t.isImport(node.callee) &&
                        node.arguments.length === 1 &&
                        node.arguments[0].type === 'StringLiteral') {
                        const { isMatch, replaceValue } = (0, checkMatch_1.checkMatch)({
                            // @ts-ignore
                            cache: this.cache,
                            value: node.arguments[0].value,
                            opts,
                            path,
                        });
                        if (isMatch) {
                            node.arguments[0] = t.stringLiteral(replaceValue);
                        }
                    }
                },
            },
        },
    };
}
exports.default = default_1;
