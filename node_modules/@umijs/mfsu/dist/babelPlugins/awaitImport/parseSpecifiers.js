"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseSpecifiers = void 0;
const t = __importStar(require("@umijs/bundler-utils/compiled/babel/types"));
const DEFAULT = 'default';
function parseSpecifiers(specifiers) {
    return specifiers.reduce((memo, s) => {
        if (t.isImportDefaultSpecifier(s)) {
            memo.properties.push(t.objectProperty(t.identifier(DEFAULT), s.local));
        }
        else if (t.isExportDefaultSpecifier(s)) {
            memo.properties.push(t.objectProperty(t.identifier(DEFAULT), s.exported));
        }
        else if (t.isExportSpecifier(s)) {
            if (t.isIdentifier(s.exported, { name: DEFAULT })) {
                memo.defaultIdentifier = s.local.name;
                memo.properties.push(t.objectProperty(s.local, s.local));
            }
            else {
                memo.properties.push(t.objectProperty(s.local, s.exported));
            }
        }
        else if (t.isImportNamespaceSpecifier(s)) {
            memo.namespaceIdentifier = s.local;
        }
        else {
            memo.properties.push(t.objectProperty(s.imported, s.local));
        }
        return memo;
    }, { properties: [], namespaceIdentifier: null, defaultIdentifier: null });
}
exports.parseSpecifiers = parseSpecifiers;
