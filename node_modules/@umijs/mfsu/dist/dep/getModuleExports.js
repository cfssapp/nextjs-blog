"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getModuleExports = void 0;
const es_module_lexer_1 = require("@umijs/bundler-utils/compiled/es-module-lexer");
const esbuild_1 = require("@umijs/bundler-utils/compiled/esbuild");
const path_1 = require("path");
const getCJSExports_1 = require("./getCJSExports");
function getModuleExports({ content, filePath, }) {
    return __awaiter(this, void 0, void 0, function* () {
        // Support tsx and jsx
        if (filePath && /\.(tsx|jsx)$/.test(filePath)) {
            content = (yield (0, esbuild_1.transform)(content, {
                sourcemap: false,
                sourcefile: filePath,
                format: 'esm',
                target: 'es6',
                loader: (0, path_1.extname)(filePath).slice(1),
            })).code;
        }
        yield es_module_lexer_1.init;
        const [imports, exports] = (0, es_module_lexer_1.parse)(content);
        let isCJS = !imports.length && !exports.length;
        let cjsEsmExports = null;
        if (isCJS) {
            cjsEsmExports = (0, getCJSExports_1.getCJSExports)({ content });
            if (cjsEsmExports.includes('__esModule')) {
                isCJS = false;
            }
        }
        return {
            exports: cjsEsmExports || exports,
            isCJS,
        };
    });
}
exports.getModuleExports = getModuleExports;
