"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const es_module_lexer_1 = require("@umijs/bundler-utils/compiled/es-module-lexer");
const utils_1 = require("@umijs/utils");
const assert_1 = __importDefault(require("assert"));
const fs_1 = require("fs");
const path_1 = require("path");
const isTypeScriptFile_1 = require("./utils/isTypeScriptFile");
const transformIEAR_1 = __importDefault(require("./utils/transformIEAR"));
exports.default = (api) => {
    [
        'onGenerateFiles',
        'onBeforeCompiler',
        'onBuildComplete',
        'onPatchRoute',
        // 'onPatchRouteBefore',
        // 'onPatchRoutes',
        // 'onPatchRoutesBefore',
        'onPkgJSONChanged',
        'onDevCompileDone',
        'onCheckPkgJSON',
        'onCheckCode',
        'onCheckConfig',
        'addBeforeMiddlewares',
        'addLayouts',
        'addMiddlewares',
        'addApiMiddlewares',
        'addRuntimePlugin',
        'addRuntimePluginKey',
        // 'addUmiExports',
        'addPolyfillImports',
        'addEntryImportsAhead',
        'addEntryImports',
        'addEntryCodeAhead',
        'addEntryCode',
        'addExtraBabelPresets',
        'addExtraBabelPlugins',
        'addBeforeBabelPresets',
        'addBeforeBabelPlugins',
        'addHTMLMetas',
        'addHTMLLinks',
        'addHTMLStyles',
        'addHTMLHeadScripts',
        'addHTMLScripts',
        'addTmpGenerateWatcherPaths',
        'chainWebpack',
        'modifyHTMLFavicon',
        'modifyHTML',
        'modifyWebpackConfig',
        'modifyViteConfig',
        // 'modifyHTMLChunks',
        // 'modifyExportRouteMap',
        // 'modifyPublicPathStr',
        'modifyRendererPath',
        'modifyRoutes',
    ].forEach((name) => {
        api.registerMethod({ name });
    });
    api.onStart(() => __awaiter(void 0, void 0, void 0, function* () {
        yield es_module_lexer_1.init;
    }));
    api.registerMethod({
        name: 'writeTmpFile',
        fn(opts) {
            (0, assert_1.default)(api.service.stage >= api.ServiceStage.runCommand, `api.writeTmpFile() should not execute in register stage.`);
            const absPath = (0, path_1.join)(api.paths.absTmpPath, 
            // @ts-ignore
            this.plugin.key && !opts.noPluginDir ? `plugin-${this.plugin.key}` : '', opts.path);
            utils_1.fsExtra.mkdirpSync((0, path_1.dirname)(absPath));
            let content = opts.content;
            if (!content) {
                (0, assert_1.default)(!opts.tplPath ||
                    ((0, fs_1.existsSync)(opts.tplPath) && (0, fs_1.statSync)(opts.tplPath).isFile()), `opts.tplPath does not exists or is not a file.`);
                const tpl = opts.tplPath
                    ? (0, fs_1.readFileSync)(opts.tplPath, 'utf-8')
                    : opts.tpl;
                (0, assert_1.default)(tpl, `opts.tpl or opts.tplPath must be supplied.`);
                (0, assert_1.default)(utils_1.lodash.isPlainObject(opts.context), `opts.context must be plain object.`);
                content = utils_1.Mustache.render(tpl, opts.context);
            }
            content = [
                (0, isTypeScriptFile_1.isTypeScriptFile)(opts.path) && `// @ts-nocheck`,
                '// This file is generated by Umi automatically',
                '// DO NOT CHANGE IT MANUALLY!',
                content.trim(),
                '',
            ]
                .filter((text) => text !== false)
                .join('\n');
            // transform imports for all javascript-like files
            if (/\.(t|j)sx?$/.test(absPath)) {
                content = (0, transformIEAR_1.default)({ content, path: absPath }, api);
            }
            if (!(0, fs_1.existsSync)(absPath) || (0, fs_1.readFileSync)(absPath, 'utf-8') !== content) {
                (0, fs_1.writeFileSync)(absPath, content, 'utf-8');
            }
        },
    });
};
