"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageGenerator = void 0;
const core_1 = require("@umijs/core");
const utils_1 = require("@umijs/utils");
const path_1 = require("path");
exports.default = (api) => {
    api.registerGenerator({
        key: 'page',
        name: 'Create Pages',
        description: 'Create a umi page by page name',
        type: core_1.GeneratorType.generate,
        fn: (options) => __awaiter(void 0, void 0, void 0, function* () {
            return new PageGenerator({
                generateFile: options.generateFile,
                args: options.args,
                absPagesPath: options.api.paths.absPagesPath,
            }).run();
        }),
    });
};
const INDEX_TPL_PATH = (0, path_1.join)(__dirname, '../../../templates/generate/page/index.tsx.tpl');
const LEES_TPL_PATH = (0, path_1.join)(__dirname, '../../../templates/generate/page/index.less.tpl');
class PageGenerator {
    constructor(options) {
        this.options = options;
        this.isDirMode = false;
        this.dir = '';
        this.name = '';
        this.isDirMode = options.args.dir;
        const [_, nameOrPath = ''] = options.args._;
        if (nameOrPath) {
            this.setPath(nameOrPath);
        }
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ensureName();
            if (this.isDirMode) {
                yield this.dirModeRun();
            }
            else {
                yield this.fileModeRun();
            }
        });
    }
    setPath(np) {
        const { dir, name } = (0, path_1.parse)(np);
        this.name = name;
        this.dir = dir;
    }
    ensureName() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.name) {
                return;
            }
            const response = yield (0, utils_1.prompts)({
                type: 'text',
                name: 'name',
                message: 'What is the name of page?',
            });
            if (!response.name) {
                this.name = response.name || 'index';
                this.isDirMode = false;
            }
        });
    }
    fileModeRun() {
        return __awaiter(this, void 0, void 0, function* () {
            const { generateFile, absPagesPath } = this.options;
            const data = {
                color: (0, utils_1.randomColor)(),
                name: this.name,
                cssExt: '.less',
            };
            yield generateFile({
                path: INDEX_TPL_PATH,
                target: (0, path_1.join)(absPagesPath, this.dir, `${this.name}.tsx`),
                data,
            });
            yield generateFile({
                path: LEES_TPL_PATH,
                target: (0, path_1.join)(absPagesPath, this.dir, `${this.name}.less`),
                data,
            });
        });
    }
    dirModeRun() {
        return __awaiter(this, void 0, void 0, function* () {
            const { generateFile, absPagesPath } = this.options;
            yield generateFile({
                path: (0, path_1.join)(__dirname, '../../../templates/generate/page'),
                target: (0, path_1.join)(absPagesPath, this.dir, this.name),
                data: {
                    color: (0, utils_1.randomColor)(),
                    name: 'index',
                    cssExt: '.less',
                },
            });
        });
    }
}
exports.PageGenerator = PageGenerator;
