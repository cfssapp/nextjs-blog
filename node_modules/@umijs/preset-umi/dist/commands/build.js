"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const server_1 = require("@umijs/server");
const utils_1 = require("@umijs/utils");
const fs_1 = require("fs");
const path_1 = require("path");
const clearTmp_1 = require("../utils/clearTmp");
const getBabelOpts_1 = require("./dev/getBabelOpts");
const getMarkupArgs_1 = require("./dev/getMarkupArgs");
const printMemoryUsage_1 = require("./dev/printMemoryUsage");
const getAssetsMap_1 = require("./dev/getAssetsMap");
const bundlerWebpack = (0, utils_1.importLazy)('@umijs/bundler-webpack');
const bundlerVite = (0, utils_1.importLazy)('@umijs/bundler-vite');
exports.default = (api) => {
    api.registerCommand({
        name: 'build',
        description: 'build app for production',
        details: `
umi build

# build without compression
COMPRESS=none umi build

# clean and build
umi build --clean
`,
        fn: function () {
            return __awaiter(this, void 0, void 0, function* () {
                // clear tmp except cache
                (0, clearTmp_1.clearTmp)(api.paths.absTmpPath);
                // check package.json
                yield api.applyPlugins({
                    key: 'onCheckPkgJSON',
                    args: {
                        origin: null,
                        current: api.appData.pkg,
                    },
                });
                // generate files
                function generate(opts) {
                    return __awaiter(this, void 0, void 0, function* () {
                        yield api.applyPlugins({
                            key: 'onGenerateFiles',
                            args: {
                                files: opts.files || null,
                                isFirstTime: opts.isFirstTime,
                            },
                        });
                    });
                }
                yield generate({
                    isFirstTime: true,
                });
                yield api.applyPlugins({
                    key: 'onBeforeCompiler',
                });
                // build
                // TODO: support watch mode
                const { babelPreset, beforeBabelPlugins, beforeBabelPresets, extraBabelPlugins, extraBabelPresets, } = yield (0, getBabelOpts_1.getBabelOpts)({ api });
                const chainWebpack = (memo, args) => __awaiter(this, void 0, void 0, function* () {
                    yield api.applyPlugins({
                        key: 'chainWebpack',
                        type: api.ApplyPluginsType.modify,
                        initialValue: memo,
                        args,
                    });
                });
                const modifyWebpackConfig = (memo, args) => __awaiter(this, void 0, void 0, function* () {
                    return yield api.applyPlugins({
                        key: 'modifyWebpackConfig',
                        initialValue: memo,
                        args,
                    });
                });
                const modifyViteConfig = (memo, args) => __awaiter(this, void 0, void 0, function* () {
                    return yield api.applyPlugins({
                        key: 'modifyViteConfig',
                        initialValue: memo,
                        args,
                    });
                });
                const opts = Object.assign(Object.assign({ config: api.config, cwd: api.cwd, entry: {
                        umi: (0, path_1.join)(api.paths.absTmpPath, 'umi.ts'),
                    } }, (api.config.vite
                    ? { modifyViteConfig }
                    : { babelPreset, chainWebpack, modifyWebpackConfig })), { beforeBabelPlugins,
                    beforeBabelPresets,
                    extraBabelPlugins,
                    extraBabelPresets,
                    onBuildComplete(opts) {
                        (0, printMemoryUsage_1.printMemoryUsage)();
                        api.applyPlugins({
                            key: 'onBuildComplete',
                            args: opts,
                        });
                    }, clean: api.args.clean });
                let stats;
                if (api.config.vite) {
                    stats = yield bundlerVite.build(opts);
                }
                else {
                    stats = yield bundlerWebpack.build(opts);
                }
                // generate html
                // vite 在 build 时通过插件注入 js 和 css
                const assetsMap = api.config.vite
                    ? {}
                    : (0, getAssetsMap_1.getAssetsMap)({
                        stats,
                        publicPath: api.config.publicPath,
                    });
                const { vite } = api.args;
                const markupArgs = yield (0, getMarkupArgs_1.getMarkupArgs)({ api });
                // @ts-ignore
                const markup = yield (0, server_1.getMarkup)(Object.assign(Object.assign({}, markupArgs), { styles: (api.config.vite ? [] : assetsMap['umi.css'] || []).concat(markupArgs.styles), scripts: (api.config.vite ? [] : assetsMap['umi.js'] || []).concat(markupArgs.scripts), esmScript: !!opts.config.esm || vite, path: '/' }));
                (0, fs_1.writeFileSync)((0, path_1.join)(api.paths.absOutputPath, 'index.html'), markup, 'utf-8');
                utils_1.logger.event('Build index.html');
                // print size
            });
        },
    });
};
