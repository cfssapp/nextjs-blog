"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const list_1 = require("./list");
const remove_1 = require("./remove");
const set_1 = require("./set");
exports.default = (api) => {
    api.registerCommand({
        name: 'config',
        description: 'umi config cli',
        details: `
# umi configs
$ umi config [type] [name] [value]

# List configs
$ umi config list

# Get the specific config
$ umi config list --name history
$ umi config get history

# Set the specific config (only local config) [beta]
$ umi config set history "{type:'hash'}"

# Remove the specific config (only local config) [beta]
$ umi config remove history
$ umi config r history
    `.trim(),
        fn({ args }) {
            return __awaiter(this, void 0, void 0, function* () {
                const { _, all = false } = args;
                const [command, name, value] = _;
                switch (command) {
                    case 'list':
                        (0, list_1.list)(all ? api.config : api.userConfig, args.name || '');
                        break;
                    case 'get':
                        (0, list_1.list)(api.config, name);
                        break;
                    case 'set':
                        (0, set_1.set)(api, name, value);
                        break;
                    case 'remove':
                    case 'r':
                        (0, remove_1.remove)(api.appData.mainConfigFile, name);
                        break;
                    default:
                        throw new Error(`Unsupported sub command ${command} for umi config.`);
                }
            });
        },
    });
};
