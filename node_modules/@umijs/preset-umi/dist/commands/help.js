"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@umijs/utils");
exports.default = (api) => {
    api.registerCommand({
        name: 'help',
        description: 'show commands help',
        details: `
umi help build
umi help dev
`,
        fn() {
            const subCommand = api.args._[0];
            if (subCommand) {
                if (subCommand in api.service.commands) {
                    showHelp(api.service.commands[subCommand]);
                }
                else {
                    utils_1.logger.error(`Invalid sub command ${subCommand}.`);
                }
            }
            else {
                showHelps(api.service.commands);
            }
        },
    });
    function showHelp(command) {
        console.log(`
Usage: umi ${command.name} [options]
${command.description ? `${utils_1.chalk.gray(command.description)}.\n` : ''}
${command.options ? `Options:\n${padLeft(command.options)}\n` : ''}
${command.details ? `Details:\n${padLeft(command.details)}` : ''}
`);
    }
    function showHelps(commands) {
        console.log(`
Usage: umi <command> [options]

Commands:

${getDeps(commands)}
`);
        console.log(`Run \`${utils_1.chalk.bold('umi help <command>')}\` for more information of specific commands.`);
        console.log(`Visit ${utils_1.chalk.bold('https://umijs.org/')} to learn more about Umi.`);
        console.log();
    }
    function getDeps(commands) {
        return Object.keys(commands)
            .map((key) => {
            return `    ${utils_1.chalk.green(utils_1.lodash.padEnd(key, 10))}${commands[key].description || ''}`;
        })
            .join('\n');
    }
    function padLeft(str) {
        return str
            .trim()
            .split('\n')
            .map((line) => `    ${line}`)
            .join('\n');
    }
};
