"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMarkupArgs = void 0;
const cheerio_1 = __importDefault(require("@umijs/utils/compiled/cheerio"));
function getMarkupArgs(opts) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const headScripts = yield opts.api.applyPlugins({
            key: 'addHTMLHeadScripts',
            initialValue: opts.api.config.headScripts || [],
        });
        const scripts = yield opts.api.applyPlugins({
            key: 'addHTMLScripts',
            initialValue: opts.api.config.scripts || [],
        });
        const metas = yield opts.api.applyPlugins({
            key: 'addHTMLMetas',
            initialValue: opts.api.config.metas || [],
        });
        const links = yield opts.api.applyPlugins({
            key: 'addHTMLLinks',
            initialValue: opts.api.config.links || [],
        });
        const styles = yield opts.api.applyPlugins({
            key: 'addHTMLStyles',
            initialValue: opts.api.config.styles || [],
        });
        const favicon = yield opts.api.applyPlugins({
            key: 'modifyHTMLFavicon',
            initialValue: opts.api.config.favicon,
        });
        return {
            mountElementId: opts.api.config.mountElementId,
            base: ((_a = opts.api.config.history) === null || _a === void 0 ? void 0 : _a.type) === 'browser' ? opts.api.config.base : '/',
            routes: opts.api.appData.routes,
            favicon,
            headScripts,
            scripts,
            metas,
            links,
            styles,
            modifyHTML(memo, args) {
                return __awaiter(this, void 0, void 0, function* () {
                    let $ = cheerio_1.default.load(memo, {
                        // @ts-ignore
                        decodeEntities: false,
                    });
                    $ = yield opts.api.applyPlugins({
                        key: 'modifyHTML',
                        initialValue: $,
                        args,
                    });
                    let html = $.html();
                    // TODO: prettier html
                    // html = prettier.format(html, {
                    //   parser: 'html',
                    // });
                    return html;
                });
            },
        };
    });
}
exports.getMarkupArgs = getMarkupArgs;
