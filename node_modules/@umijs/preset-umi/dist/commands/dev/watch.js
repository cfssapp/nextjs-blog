"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.expandJSPaths = exports.unwatch = exports.createDebouncedHandler = exports.watch = exports.addUnWatch = void 0;
const utils_1 = require("@umijs/utils");
const unWatches = [];
function addUnWatch(unWatcher) {
    unWatches.push(unWatcher);
}
exports.addUnWatch = addUnWatch;
function watch(opts) {
    const watcher = utils_1.chokidar.watch(opts.path, Object.assign(Object.assign({}, opts.watchOpts), { ignoreInitial: true }));
    watcher.on('all', opts.onChange);
    if (opts.addToUnWatches) {
        addUnWatch(() => {
            watcher.close();
        });
    }
    return watcher;
}
exports.watch = watch;
function createDebouncedHandler(opts) {
    let timer = null;
    let files = [];
    return (event, path) => {
        if (timer) {
            clearTimeout(timer);
        }
        files.push({ event, path: (0, utils_1.winPath)(path) });
        timer = setTimeout(() => __awaiter(this, void 0, void 0, function* () {
            timer = null;
            yield opts.onChange({ files });
            files = [];
        }), opts.timeout || 2000);
    };
}
exports.createDebouncedHandler = createDebouncedHandler;
function unwatch() {
    unWatches.forEach((unWatch) => unWatch());
}
exports.unwatch = unwatch;
function expandJSPaths(path) {
    return ['.js', '.jsx', '.ts', '.tsx'].map((ext) => {
        return `${path}${ext}`;
    });
}
exports.expandJSPaths = expandJSPaths;
