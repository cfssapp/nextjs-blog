"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRouteMiddleware = void 0;
const server_1 = require("@umijs/server");
const getMarkupArgs_1 = require("./getMarkupArgs");
const getAssetsMap_1 = require("./getAssetsMap");
// TODO: extract to bundler-vite
// refer: https://vitejs.dev/guide/backend-integration.html#backend-integration
const viteRefreshScript = `
import RefreshRuntime from '/@react-refresh'
RefreshRuntime.injectIntoGlobalHook(window)
window.$RefreshReg$ = () => {}
window.$RefreshSig$ = () => (type) => type
window.__vite_plugin_react_preamble_installed__ = true
`;
function createRouteMiddleware(opts) {
    return ({ compiler }) => {
        const { vite } = opts.api.config;
        let webpackStats = null;
        let onStats = null;
        if (!vite) {
            compiler.hooks.done.tap('umiRouteMiddleware', (stats) => {
                webpackStats = stats;
                onStats === null || onStats === void 0 ? void 0 : onStats(stats);
            });
        }
        function getStats() {
            return __awaiter(this, void 0, void 0, function* () {
                if (webpackStats)
                    return Promise.resolve(webpackStats);
                return new Promise((resolve) => {
                    onStats = (stats) => {
                        resolve(stats);
                    };
                });
            });
        }
        return (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const viteScripts = [
                // add noshim attr for skip import-maps shim logic for this modules
                { content: viteRefreshScript, noshim: '' },
                { src: '/@vite/client', noshim: '' },
                opts.api.appData.hasSrcDir ? '/src/.umi/umi.ts' : '/.umi/umi.ts',
            ];
            const markupArgs = yield (0, getMarkupArgs_1.getMarkupArgs)(opts);
            let assetsMap = {};
            if (!vite) {
                const stats = yield getStats();
                assetsMap = (0, getAssetsMap_1.getAssetsMap)({
                    stats,
                    publicPath: opts.api.config.publicPath,
                });
            }
            const requestHandler = yield (0, server_1.createRequestHandler)(Object.assign(Object.assign({}, markupArgs), { 
                // css will be injected with style tag in vite mode
                styles: (vite ? [] : assetsMap['umi.css'] || []).concat(markupArgs.styles), scripts: (vite ? viteScripts : assetsMap['umi.js'] || []).concat(markupArgs.scripts), esmScript: vite }));
            requestHandler(req, res, next);
        });
    };
}
exports.createRouteMiddleware = createRouteMiddleware;
