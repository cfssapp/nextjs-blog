"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBabelOpts = void 0;
const utils_1 = require("@umijs/utils");
function getBabelOpts(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        // TODO: 支持用户自定义
        const isGTEReact17 = utils_1.semver.gte(opts.api.appData.react.version, '17.0.0');
        const babelPreset = [
            require.resolve('@umijs/babel-preset-umi'),
            {
                presetEnv: {},
                presetReact: {
                    runtime: isGTEReact17 ? 'automatic' : 'classic',
                },
                presetTypeScript: {},
                pluginTransformRuntime: {},
                pluginLockCoreJS: {},
                pluginDynamicImportNode: false,
                pluginAutoCSSModules: opts.api.config.autoCSSModules,
            },
        ];
        const extraBabelPresets = yield opts.api.applyPlugins({
            key: 'addExtraBabelPresets',
            initialValue: [],
        });
        const extraBabelPlugins = yield opts.api.applyPlugins({
            key: 'addExtraBabelPlugins',
            initialValue: [],
        });
        const beforeBabelPresets = yield opts.api.applyPlugins({
            key: 'addBeforeBabelPresets',
            initialValue: [],
        });
        const beforeBabelPlugins = yield opts.api.applyPlugins({
            key: 'addBeforeBabelPlugins',
            initialValue: [],
        });
        return {
            babelPreset,
            extraBabelPlugins,
            extraBabelPresets,
            beforeBabelPresets,
            beforeBabelPlugins,
        };
    });
}
exports.getBabelOpts = getBabelOpts;
