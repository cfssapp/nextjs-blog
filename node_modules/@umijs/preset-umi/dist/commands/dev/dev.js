"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@umijs/utils");
const fs_1 = require("fs");
const path_1 = require("path");
const constants_1 = require("../../constants");
const clearTmp_1 = require("../../utils/clearTmp");
const createRouteMiddleware_1 = require("./createRouteMiddleware");
const faviconMiddleware_1 = require("./faviconMiddleware");
const getBabelOpts_1 = require("./getBabelOpts");
const printMemoryUsage_1 = require("./printMemoryUsage");
const watch_1 = require("./watch");
const bundlerWebpack = (0, utils_1.importLazy)('@umijs/bundler-webpack');
const bundlerVite = (0, utils_1.importLazy)('@umijs/bundler-vite');
exports.default = (api) => {
    api.describe({
        enableBy() {
            return api.name === 'dev';
        },
    });
    api.registerCommand({
        name: 'dev',
        description: 'dev server for development',
        details: `
umi dev

# dev with specified port
PORT=8888 umi dev
`,
        fn() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const enableVite = !!api.config.vite;
                // clear tmp except cache
                (0, clearTmp_1.clearTmp)(api.paths.absTmpPath);
                // check package.json
                yield api.applyPlugins({
                    key: 'onCheckPkgJSON',
                    args: {
                        origin: null,
                        current: api.appData.pkg,
                    },
                });
                // clean cache if umi version not matched
                // const umiJSONPath = join(api.paths.absTmpPath, 'umi.json');
                // if (existsSync(umiJSONPath)) {
                //   const originVersion = require(umiJSONPath).version;
                //   if (originVersion !== api.appData.umi.version) {
                //     logger.info(`Delete cache folder since umi version updated.`);
                //     rimraf.sync(api.paths.absTmpPath);
                //   }
                // }
                // fsExtra.outputFileSync(
                //   umiJSONPath,
                //   JSON.stringify({ version: api.appData.umi.version }),
                // );
                // generate files
                function generate(opts) {
                    return __awaiter(this, void 0, void 0, function* () {
                        yield api.applyPlugins({
                            key: 'onGenerateFiles',
                            args: {
                                files: opts.files || null,
                                isFirstTime: opts.isFirstTime,
                            },
                        });
                    });
                }
                yield generate({
                    isFirstTime: true,
                });
                const { absPagesPath, absSrcPath } = api.paths;
                const watcherPaths = yield api.applyPlugins({
                    key: 'addTmpGenerateWatcherPaths',
                    initialValue: [
                        absPagesPath,
                        !api.config.routes && ((_a = api.config.conventionRoutes) === null || _a === void 0 ? void 0 : _a.base),
                        (0, path_1.join)(absSrcPath, 'layouts'),
                        ...(0, watch_1.expandJSPaths)((0, path_1.join)(absSrcPath, 'loading')),
                        ...(0, watch_1.expandJSPaths)((0, path_1.join)(absSrcPath, 'app')),
                    ].filter(Boolean),
                });
                utils_1.lodash.uniq(watcherPaths.map(utils_1.winPath)).forEach((p) => {
                    (0, watch_1.watch)({
                        path: p,
                        addToUnWatches: true,
                        onChange: (0, watch_1.createDebouncedHandler)({
                            timeout: 2000,
                            onChange(opts) {
                                return __awaiter(this, void 0, void 0, function* () {
                                    yield generate({ files: opts.files, isFirstTime: false });
                                });
                            },
                        }),
                    });
                });
                // watch package.json change
                const pkgPath = (0, path_1.join)(api.cwd, 'package.json');
                (0, watch_1.watch)({
                    path: pkgPath,
                    addToUnWatches: true,
                    onChange() {
                        const origin = api.appData.pkg;
                        api.appData.pkg = JSON.parse((0, fs_1.readFileSync)(pkgPath, 'utf-8'));
                        api.applyPlugins({
                            key: 'onCheckPkgJSON',
                            args: {
                                origin,
                                current: api.appData.pkg,
                            },
                        });
                        api.applyPlugins({
                            key: 'onPkgJSONChanged',
                            args: {
                                origin,
                                current: api.appData.pkg,
                            },
                        });
                    },
                });
                // watch config change
                (0, watch_1.addUnWatch)(api.service.configManager.watch({
                    schemas: api.service.configSchemas,
                    onChangeTypes: api.service.configOnChanges,
                    onChange(opts) {
                        return __awaiter(this, void 0, void 0, function* () {
                            yield api.applyPlugins({
                                key: 'onCheckConfig',
                                args: {
                                    config: api.config,
                                    userConfig: api.userConfig,
                                },
                            });
                            const { data } = opts;
                            if (data.changes[api.ConfigChangeType.reload]) {
                                utils_1.logger.event(`config ${data.changes[api.ConfigChangeType.reload].join(', ')} changed, restart server...`);
                                api.restartServer();
                                return;
                            }
                            if (data.changes[api.ConfigChangeType.regenerateTmpFiles]) {
                                utils_1.logger.event(`config ${data.changes[api.ConfigChangeType.regenerateTmpFiles].join(', ')} changed, regenerate tmp files...`);
                                yield generate({ isFirstTime: false });
                            }
                            for (const fn of data.fns) {
                                fn();
                            }
                        });
                    },
                }));
                // watch plugin change
                const pluginFiles = [
                    (0, path_1.join)(api.cwd, 'plugin.ts'),
                    (0, path_1.join)(api.cwd, 'plugin.js'),
                ];
                pluginFiles.forEach((filePath) => {
                    (0, watch_1.watch)({
                        path: filePath,
                        addToUnWatches: true,
                        onChange() {
                            utils_1.logger.event(`${(0, path_1.basename)(filePath)} changed, restart server...`);
                            api.restartServer();
                        },
                    });
                });
                yield api.applyPlugins({
                    key: 'onBeforeCompiler',
                });
                // start dev server
                const beforeMiddlewares = yield api.applyPlugins({
                    key: 'addBeforeMiddlewares',
                    initialValue: [],
                });
                const middlewares = yield api.applyPlugins({
                    key: 'addMiddlewares',
                    initialValue: [],
                });
                const { babelPreset, beforeBabelPlugins, beforeBabelPresets, extraBabelPlugins, extraBabelPresets, } = yield (0, getBabelOpts_1.getBabelOpts)({ api });
                const chainWebpack = (memo, args) => __awaiter(this, void 0, void 0, function* () {
                    yield api.applyPlugins({
                        key: 'chainWebpack',
                        type: api.ApplyPluginsType.modify,
                        initialValue: memo,
                        args,
                    });
                });
                const modifyWebpackConfig = (memo, args) => __awaiter(this, void 0, void 0, function* () {
                    return yield api.applyPlugins({
                        key: 'modifyWebpackConfig',
                        initialValue: memo,
                        args,
                    });
                });
                const modifyViteConfig = (memo, args) => __awaiter(this, void 0, void 0, function* () {
                    return yield api.applyPlugins({
                        key: 'modifyViteConfig',
                        initialValue: memo,
                        args,
                    });
                });
                const opts = Object.assign(Object.assign({ config: api.config, cwd: api.cwd, entry: {
                        umi: (0, path_1.join)(api.paths.absTmpPath, 'umi.ts'),
                    }, port: api.appData.port, host: api.appData.host }, (enableVite
                    ? { modifyViteConfig }
                    : { babelPreset, chainWebpack, modifyWebpackConfig })), { beforeBabelPlugins,
                    beforeBabelPresets,
                    extraBabelPlugins,
                    extraBabelPresets, beforeMiddlewares: [].concat([
                        ...beforeMiddlewares,
                        faviconMiddleware_1.faviconMiddleware,
                    ]), afterMiddlewares: middlewares.concat((0, createRouteMiddleware_1.createRouteMiddleware)({ api })), onDevCompileDone(opts) {
                        (0, printMemoryUsage_1.printMemoryUsage)();
                        api.applyPlugins({
                            key: 'onDevCompileDone',
                            args: opts,
                        });
                    }, mfsuWithESBuild: (_b = api.config.mfsu) === null || _b === void 0 ? void 0 : _b.esbuild, cache: {
                        buildDependencies: [
                            api.pkgPath,
                            api.service.configManager.mainConfigFile || '',
                        ].filter(Boolean),
                    } });
                if (enableVite) {
                    yield bundlerVite.dev(opts);
                }
                else {
                    yield bundlerWebpack.dev(opts);
                }
            });
        },
    });
    api.modifyAppData((memo) => __awaiter(void 0, void 0, void 0, function* () {
        memo.port = yield utils_1.portfinder.getPortPromise({
            port: parseInt(String(process.env.PORT || constants_1.DEFAULT_PORT), 10),
        });
        memo.host = process.env.HOST || constants_1.DEFAULT_HOST;
        return memo;
    }));
    api.registerMethod({
        name: 'restartServer',
        fn() {
            var _a;
            utils_1.logger.info(`Restart dev server with port ${api.appData.port}...`);
            (0, watch_1.unwatch)();
            (_a = process.send) === null || _a === void 0 ? void 0 : _a.call(process, {
                type: 'RESTART',
                payload: {
                    port: api.appData.port,
                },
            });
        },
    });
};
