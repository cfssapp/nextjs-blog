"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@umijs/bundler-utils/compiled/babel/core");
const utils_1 = require("@umijs/utils");
const path_1 = require("path");
exports.default = (api) => {
    api.describe({
        key: 'polyfill',
        config: {
            schema(Joi) {
                return Joi.object().keys({
                    imports: Joi.array().items(Joi.string()).required().unique(),
                });
            },
        },
        enableBy: () => {
            return process.env.BABEL_POLYFILL !== 'none';
        },
    });
    api.onGenerateFiles(() => {
        var _a, _b;
        const coreJsImports = ((_a = api.config.polyfill) === null || _a === void 0 ? void 0 : _a.imports)
            ? (_b = api.config.polyfill) === null || _b === void 0 ? void 0 : _b.imports.map((item) => `import '${item}';`).join('\n')
            : `import 'core-js';`;
        const { code } = (0, core_1.transform)(`
${coreJsImports}
import '${(0, utils_1.winPath)(require.resolve('regenerator-runtime/runtime'))}';
export {};
`, {
            filename: 'polyfill.ts',
            presets: [
                [
                    require.resolve('@umijs/bundler-utils/compiled/babel/preset-env'),
                    {
                        useBuiltIns: 'entry',
                        corejs: (0, utils_1.getCorejsVersion)((0, path_1.join)(__dirname, '../../../package.json')),
                        modules: false,
                        targets: api.config.targets,
                    },
                ],
            ],
            plugins: [
                require.resolve('@umijs/babel-preset-umi/dist/plugins/lockCoreJS'),
            ],
        });
        api.writeTmpFile({
            path: 'core/polyfill.ts',
            noPluginDir: true,
            content: code,
        });
    });
    api.addPolyfillImports(() => [{ source: `./core/polyfill` }]);
    api.modifyConfig((memo) => {
        memo.alias['regenerator-runtime'] = (0, path_1.dirname)(require.resolve('regenerator-runtime/package'));
        return memo;
    });
};
