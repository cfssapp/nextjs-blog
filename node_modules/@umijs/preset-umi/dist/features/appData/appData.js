"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const bundler_utils_1 = require("@umijs/bundler-utils");
const utils_1 = require("@umijs/utils");
const fs_1 = require("fs");
const path_1 = require("path");
const ini_1 = require("../../../compiled/ini");
const watch_1 = require("../../commands/dev/watch");
const scan_1 = require("../../libs/scan");
const routes_1 = require("../tmpFiles/routes");
exports.default = (api) => {
    api.modifyAppData((memo) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        memo.routes = yield (0, routes_1.getRoutes)({
            api,
        });
        memo.apiRoutes = yield (0, routes_1.getApiRoutes)({
            api,
        });
        memo.hasSrcDir = api.paths.absSrcPath.endsWith('/src');
        memo.npmClient = api.userConfig.npmClient || (0, utils_1.getNpmClient)();
        memo.umi = {
            version: require('../../../package.json').version,
        };
        memo.react = {
            version: require((0, path_1.join)(api.config.alias.react, 'package.json')).version,
        };
        memo.appJS = yield getAppJsInfo();
        memo.vite = api.config.vite ? {} : undefined;
        memo.globalCSS = [
            'global.css',
            'global.less',
            'global.scss',
            'global.sass',
        ].reduce((memo, key) => {
            if ((0, fs_1.existsSync)((0, path_1.join)(api.paths.absSrcPath, key))) {
                memo.push((0, path_1.join)(api.paths.absSrcPath, key));
            }
            return memo;
        }, []);
        memo.globalJS = [
            'global.ts',
            'global.tsx',
            'global.jsx',
            'global.js',
        ].reduce((memo, key) => {
            if ((0, fs_1.existsSync)((0, path_1.join)(api.paths.absSrcPath, key))) {
                memo.push((0, path_1.join)(api.paths.absSrcPath, key));
            }
            return memo;
        }, []);
        const gitDir = findGitDir(api.paths.cwd);
        if (gitDir) {
            const git = {};
            const configPath = (0, path_1.join)(gitDir, 'config');
            if ((0, fs_1.existsSync)(configPath)) {
                const config = (0, fs_1.readFileSync)(configPath, 'utf-8');
                const url = (_a = (0, ini_1.parse)(config)['remote "origin"']) === null || _a === void 0 ? void 0 : _a.url;
                if (url) {
                    git.originUrl = url;
                }
            }
            memo.git = git;
        }
        return memo;
    }));
    function findGitDir(dir) {
        if (dir === (0, path_1.resolve)('/')) {
            return null;
        }
        if ((0, fs_1.existsSync)((0, path_1.join)(dir, '.git'))) {
            return (0, path_1.join)(dir, '.git');
        }
        const parent = findGitDir((0, path_1.join)(dir, '..'));
        if (parent) {
            return parent;
        }
        return null;
    }
    // Execute earliest, so that other onGenerateFiles can get it
    api.register({
        key: 'onGenerateFiles',
        fn(args) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!args.isFirstTime) {
                    api.appData.appJS = yield getAppJsInfo();
                }
            });
        },
        stage: Number.NEGATIVE_INFINITY,
    });
    // used in esmi and vite
    api.register({
        key: 'updateAppDataDeps',
        fn() {
            return __awaiter(this, void 0, void 0, function* () {
                const resolver = (0, scan_1.createResolver)({
                    alias: api.config.alias,
                });
                api.appData.deps = yield (0, scan_1.scan)({
                    entry: (0, path_1.join)(api.paths.absTmpPath, 'umi.ts'),
                    externals: api.config.externals,
                    resolver,
                });
                // FIXME: force include react & react-dom
                if (api.appData.deps['react']) {
                    api.appData.deps['react'].version = api.appData.react.version;
                }
                api.appData.deps['react-dom'] = {
                    version: api.appData.react.version,
                    matches: ['react-dom'],
                    subpaths: [],
                };
            });
        },
    });
    function getAppJsInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const path of (0, watch_1.expandJSPaths)((0, path_1.join)(api.paths.absSrcPath, 'app'))) {
                if ((0, fs_1.existsSync)(path)) {
                    const [_, exports] = yield (0, bundler_utils_1.parseModule)({
                        path,
                        content: (0, fs_1.readFileSync)(path, 'utf-8'),
                    });
                    return {
                        path,
                        exports,
                    };
                }
            }
            return null;
        });
    }
};
