"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const helper_module_imports_1 = require("@umijs/bundler-utils/compiled/babel/helper-module-imports");
const t = __importStar(require("@umijs/bundler-utils/compiled/babel/types"));
const path_1 = require("path");
const CACHE_LIBS = 'cacheLibs';
function save(file, libName, name, newNode) {
    const cacheLibs = file.get(CACHE_LIBS);
    const cache = cacheLibs[libName] || {};
    cache[name] = newNode;
    cacheLibs[libName] = cache;
    file.set(CACHE_LIBS, cacheLibs);
}
function getCache(file, libName, name) {
    const cacheLibs = file.get(CACHE_LIBS);
    const cache = cacheLibs[libName] || {};
    return cache[name];
}
function replaceWith(path, name, libName, file, getNode) {
    let newNode = getCache(file, name, libName);
    if (!newNode) {
        newNode = getNode();
        save(file, name, libName, newNode);
    }
    path.replaceWith(newNode);
}
function default_1() {
    return {
        pre(file) {
            file.set(CACHE_LIBS, {});
        },
        visitor: {
            Identifier(path, state) {
                var _a, _b, _c, _d, _e;
                const { name } = path.node;
                if (path.scope.hasBinding(path.node.name)) {
                    return;
                }
                const parentNode = path.parentPath.node;
                if (t.isImportSpecifier(parentNode) ||
                    t.isImportDefaultSpecifier(parentNode) ||
                    t.isImportNamespaceSpecifier(parentNode)) {
                    return;
                }
                // don't support member expression
                // e.g. foo.styles
                if (t.isMemberExpression(parentNode) &&
                    path.node === parentNode.property) {
                    return;
                }
                // don't support object property
                // e.g. { styles: 1 }
                if (t.isObjectProperty(parentNode) && path.node === parentNode.key) {
                    return;
                }
                if ((_a = state.opts.opts.identifierToLib) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(name)) {
                    const libName = state.opts.opts.identifierToLib[name];
                    replaceWith(path, name, libName, state.file, () => (0, helper_module_imports_1.addNamed)(path, name, libName));
                }
                else if ((_b = state.opts.opts.defaultToLib) === null || _b === void 0 ? void 0 : _b.hasOwnProperty(name)) {
                    const libName = state.opts.opts.defaultToLib[name];
                    replaceWith(path, name, libName, state.file, () => (0, helper_module_imports_1.addDefault)(path, libName, {
                        nameHint: name,
                    }));
                }
                else if ((_c = state.opts.opts.namespaceToLib) === null || _c === void 0 ? void 0 : _c.hasOwnProperty(name)) {
                    const libName = state.opts.opts.namespaceToLib[name];
                    replaceWith(path, name, libName, state.file, () => (0, helper_module_imports_1.addNamespace)(path, libName));
                }
                // import css
                if (name === 'styles' && state.opts.css) {
                    const { filename } = state.file.opts;
                    const cssFilename = (0, path_1.basename)(filename, (0, path_1.extname)(filename)) + '.' + state.opts.css;
                    replaceWith(path, name, './' + cssFilename, state.file, () => (0, helper_module_imports_1.addDefault)(path, './' + cssFilename, { nameHint: name }));
                }
                // import umi
                if ((_d = state.opts.umiImportItems) === null || _d === void 0 ? void 0 : _d.includes(name)) {
                    replaceWith(path, name, 'umi', state.file, () => (0, helper_module_imports_1.addNamed)(path, name, 'umi'));
                }
                // import React
                if (name === 'React') {
                    replaceWith(path, name, 'react', state.file, () => (0, helper_module_imports_1.addDefault)(path, 'react', { nameHint: name }));
                }
                if ((_e = state.opts.reactImportItems) === null || _e === void 0 ? void 0 : _e.includes(name)) {
                    replaceWith(path, name, 'react', state.file, () => (0, helper_module_imports_1.addNamed)(path, name, 'react'));
                }
            },
            MemberExpression(path, state) {
                var _a, _b;
                const { object, property } = path.node;
                if (path.scope.hasBinding(object.name)) {
                    return;
                }
                const parentNode = path.parentPath.node;
                if (t.isImportSpecifier(parentNode) ||
                    t.isImportDefaultSpecifier(parentNode) ||
                    t.isImportNamespaceSpecifier(parentNode)) {
                    return;
                }
                if (((_a = state.opts.opts.withObjs) === null || _a === void 0 ? void 0 : _a[object.name]) &&
                    (((_b = state.opts.opts.withObjs) === null || _b === void 0 ? void 0 : _b[object.name].members) || []).includes(property.name)) {
                    const libName = state.opts.opts.withObjs[object.name].importFrom;
                    replaceWith(path, property.name, libName, state.file, () => (0, helper_module_imports_1.addNamed)(path, property.name, libName));
                }
            },
        },
    };
}
exports.default = default_1;
