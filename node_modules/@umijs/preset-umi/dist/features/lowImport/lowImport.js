"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Inspired by
// - https://github.com/google/zx
// - https://github.com/antfu/unplugin-auto-import
const fs_1 = require("fs");
const path_1 = require("path");
const babelPlugin_1 = __importDefault(require("./babelPlugin"));
const umiImportItems = [
    'createSearchParams',
    'Link',
    'matchPath',
    'matchRoutes',
    'NavLink',
    'Outlet',
    'renderClient',
    'useAppData',
    'useLocation',
    'useMatch',
    'useNavigate',
    'useOutlet',
    'useParams',
    'useResolvedPath',
    'useRouteData',
    'useRoutes',
    'useSearchParams',
    // TODO: 这两个似乎从 umi 引入不了
    //'ApplyPluginsType',
    //'PluginManager',
];
const reactImportItems = [
    'createElement',
    'createFactory',
    'cloneElement',
    'isValidElement',
    'createRef',
    'forwardRef',
    // hooks
    'useState',
    'useEffect',
    'useContext',
    'useReducer',
    'useCallback',
    'useMemo',
    'useRef',
    'useImperativeHandle',
    'useLayoutEffect',
    'useDebugValue',
];
exports.default = (api) => {
    api.describe({
        key: 'lowImport',
        config: {
            schema(Joi) {
                return Joi.object({
                    libs: Joi.array(),
                    css: Joi.string(),
                });
            },
        },
        enableBy: api.EnableBy.config,
    });
    api.modifyAppData((memo) => __awaiter(void 0, void 0, void 0, function* () {
        memo.lowImport = [
            yield api.applyPlugins({
                key: 'addLowImportLibs',
                initialValue: [],
            }),
            ...(api.config.lowImport.libs || []),
        ];
    }));
    api.onStart(() => {
        // generate dts
        const dts = api.appData.lowImport.map((lib) => {
            if (lib.withObj) {
                const memberDts = (lib.members || [])
                    .map((member) => `${member}: typeof import('${lib.importFrom}')['${member}'],`)
                    .join('\n');
                return `const ${lib.withObj} : {\n${memberDts}\n};`;
            }
            else if (lib.namespaceImport) {
                return `const ${lib.namespaceImport}: typeof import('${lib.importFrom}');`;
            }
            else if (lib.defaultImport) {
                return `const ${lib.defaultImport}: typeof import('${lib.importFrom}')['default'];`;
            }
            else {
                return (lib.members || [])
                    .map((member) => `const ${member}: typeof import('${lib.importFrom}')['${member}'];`)
                    .join('\n');
            }
        });
        // umi dts
        const umiDts = umiImportItems
            .map((item) => `const ${item}: typeof import('umi')['${item}']`)
            .join(';\n');
        // react dts
        const reactDts = reactImportItems
            .map((item) => `const ${item}: typeof import('react')['${item}']`)
            .join('\n');
        // TODO: styles 的类型提示
        const content = `
// generated by umi
declare global {
const React: typeof import('react');
${dts.join('\n')}
const styles: any;
${umiDts}
${reactDts}
}
export {}
    `.trim() + `\n`;
        (0, fs_1.writeFileSync)((0, path_1.join)(api.paths.cwd, 'lowImport.d.ts'), content, 'utf-8');
    });
    api.addBeforeBabelPresets(() => {
        var _a;
        const opts = normalizeLibs(api.appData.lowImport);
        const css = ((_a = api.config.lowImport) === null || _a === void 0 ? void 0 : _a.css) || 'less';
        return [
            {
                plugins: [
                    [babelPlugin_1.default, { opts, css, umiImportItems, reactImportItems }],
                ],
            },
        ];
    });
};
function normalizeLibs(libs) {
    const withObjs = {};
    const identifierToLib = {};
    const defaultToLib = {};
    const namespaceToLib = {};
    for (const lib of libs) {
        if (lib.withObj) {
            withObjs[lib.withObj] = lib;
        }
        else if (lib.namespaceImport) {
            namespaceToLib[lib.namespaceImport] = lib.importFrom;
        }
        else if (lib.defaultImport) {
            defaultToLib[lib.defaultImport] = lib.importFrom;
        }
        else {
            for (const member of lib.members || []) {
                identifierToLib[member] = lib.importFrom;
            }
        }
    }
    return {
        withObjs,
        identifierToLib,
        defaultToLib,
        namespaceToLib,
    };
}
