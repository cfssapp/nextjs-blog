"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRouteComponents = exports.getRoutes = exports.getApiRoutes = void 0;
const core_1 = require("@umijs/core");
const utils_1 = require("@umijs/utils");
const fs_1 = require("fs");
const path_1 = require("path");
// get api routs
function getApiRoutes(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const routes = (0, core_1.getConventionRoutes)({
            base: opts.api.paths.absApiRoutesPath,
            prefix: '',
        });
        function localPath(path) {
            if (path.charAt(0) !== '.') {
                return `./${path}`;
            }
            {
                return path;
            }
        }
        for (const id of Object.keys(routes)) {
            if (routes[id].file) {
                // TODO: cache for performance
                const file = (0, path_1.isAbsolute)(routes[id].file)
                    ? routes[id].file
                    : utils_1.resolve.sync(localPath(routes[id].file), {
                        basedir: opts.api.paths.absApiRoutesPath,
                        extensions: ['.js', '.jsx', '.tsx', '.ts'],
                    });
                routes[id].__content = (0, fs_1.readFileSync)(file, 'utf-8');
            }
        }
        return routes;
    });
}
exports.getApiRoutes = getApiRoutes;
// get route config
function getRoutes(opts) {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        let routes = null;
        if (opts.api.config.routes) {
            routes = (0, core_1.getConfigRoutes)({
                routes: opts.api.config.routes,
            });
        }
        else {
            routes = (0, core_1.getConventionRoutes)({
                base: ((_a = opts.api.config.conventionRoutes) === null || _a === void 0 ? void 0 : _a.base) || opts.api.paths.absPagesPath,
                exclude: (_b = opts.api.config.conventionRoutes) === null || _b === void 0 ? void 0 : _b.exclude,
                prefix: '',
            });
        }
        function localPath(path) {
            if (path.charAt(0) !== '.') {
                return `./${path}`;
            }
            {
                return path;
            }
        }
        for (const id of Object.keys(routes)) {
            if (routes[id].file) {
                // TODO: cache for performance
                const file = (0, path_1.isAbsolute)(routes[id].file)
                    ? routes[id].file
                    : utils_1.resolve.sync(localPath(routes[id].file), {
                        basedir: ((_c = opts.api.config.conventionRoutes) === null || _c === void 0 ? void 0 : _c.base) ||
                            opts.api.paths.absPagesPath,
                        extensions: ['.js', '.jsx', '.tsx', '.ts'],
                    });
                routes[id].__content = (0, fs_1.readFileSync)(file, 'utf-8');
            }
        }
        // layout routes
        const absLayoutPath = (0, path_1.join)(opts.api.paths.absSrcPath, 'layouts/index.tsx');
        const layouts = yield opts.api.applyPlugins({
            key: 'addLayouts',
            initialValue: [
                (0, fs_1.existsSync)(absLayoutPath) && {
                    id: '@@/global-layout',
                    file: absLayoutPath,
                },
            ].filter(Boolean),
        });
        for (const layout of layouts) {
            (0, core_1.addParentRoute)({
                addToAll: true,
                target: {
                    id: layout.id,
                    path: '/',
                    file: layout.file,
                    parentId: undefined,
                    absPath: '/',
                },
                routes,
                test: layout.test,
            });
        }
        // patch routes
        for (const id of Object.keys(routes)) {
            yield opts.api.applyPlugins({
                key: 'onPatchRoute',
                args: {
                    route: routes[id],
                },
            });
        }
        routes = yield opts.api.applyPlugins({
            key: 'modifyRoutes',
            initialValue: routes,
        });
        return routes;
    });
}
exports.getRoutes = getRoutes;
function getRouteComponents(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const imports = Object.keys(opts.routes)
            .map((key) => {
            const route = opts.routes[key];
            if (!route.file) {
                return `'${key}': () => import('./EmptyRoute'),`;
            }
            // e.g.
            // component: () => <h1>foo</h1>
            // component: (() => () => <h1>foo</h1>)()
            if (route.file.startsWith('(')) {
                return `'${key}': () => Promise.resolve(${route.file}),`;
            }
            const path = (0, path_1.isAbsolute)(route.file) || route.file.startsWith('@/')
                ? route.file
                : `${opts.prefix}${route.file}`;
            return `'${key}': () => import('${(0, utils_1.winPath)(path)}'),`;
        })
            .join('\n');
        return `{\n${imports}\n}`;
    });
}
exports.getRouteComponents = getRouteComponents;
