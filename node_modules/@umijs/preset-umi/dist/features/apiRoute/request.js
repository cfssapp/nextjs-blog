"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
class UmiApiRequest {
    constructor(req, apiRoutes) {
        this._params = {};
        this._body = null;
        this._req = req;
        const m = (0, utils_1.matchApiRoute)(apiRoutes, this.pathName || '');
        if (m)
            this._params = m.params;
    }
    get params() {
        return this._params;
    }
    get body() {
        return this._body;
    }
    get headers() {
        return this._req.headers;
    }
    get method() {
        return this._req.method;
    }
    get query() {
        var _a, _b;
        return (((_b = (_a = this._req.url) === null || _a === void 0 ? void 0 : _a.split('?')[1]) === null || _b === void 0 ? void 0 : _b.split('&').reduce((acc, cur) => {
            const [key, value] = cur.split('=');
            const k = acc[key];
            if (k) {
                if (k instanceof Array) {
                    k.push(value);
                }
                else {
                    acc[key] = [k, value];
                }
            }
            else {
                acc[key] = value;
            }
            return acc;
        }, {})) || {});
    }
    get cookies() {
        var _a;
        return (_a = this._req.headers.cookie) === null || _a === void 0 ? void 0 : _a.split(';').reduce((acc, cur) => {
            const [key, value] = cur.split('=');
            acc[key.trim()] = value;
            return acc;
        }, {});
    }
    get url() {
        return this._req.url;
    }
    get pathName() {
        var _a;
        return (_a = this._req.url) === null || _a === void 0 ? void 0 : _a.split('?')[0];
    }
    readBody() {
        if (this._req.headers['content-length'] === '0') {
            return Promise.resolve();
        }
        return new Promise((resolve, reject) => {
            let body = '';
            this._req.on('data', (chunk) => {
                body += chunk;
            });
            this._req.on('end', () => {
                // TODO: handle other content types
                switch (this._req.headers['content-type']) {
                    case 'application/json':
                        try {
                            this._body = JSON.parse(body);
                        }
                        catch (e) {
                            this._body = body;
                        }
                        break;
                    default:
                        this._body = body;
                        break;
                }
                resolve();
            });
            this._req.on('error', reject);
        });
    }
}
exports.default = UmiApiRequest;
