"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const esbuild_1 = __importDefault(require("@umijs/bundler-utils/compiled/esbuild"));
const utils_1 = require("@umijs/utils");
const path_1 = require("path");
const constants_1 = require("../constants");
const utils_2 = require("../utils");
// 将 API 路由的临时文件打包为 Umi Dev Server 可以使用的格式
function default_1(api, apiRoutes) {
    return __awaiter(this, void 0, void 0, function* () {
        const apiRoutePaths = apiRoutes.map((r) => (0, path_1.join)(api.paths.absTmpPath, 'api', r.file));
        yield esbuild_1.default.build({
            format: 'cjs',
            platform: 'node',
            bundle: true,
            entryPoints: [
                ...apiRoutePaths,
                (0, path_1.resolve)(api.paths.absTmpPath, 'api/_middlewares.ts'),
            ],
            outdir: (0, path_1.resolve)(api.paths.cwd, constants_1.OUTPUT_PATH),
            plugins: [(0, utils_2.esbuildIgnorePathPrefixPlugin)()],
            watch: {
                onRebuild(error) {
                    if (error)
                        utils_1.logger.error('Compile api routes failed: ', error);
                    // Reload API route modules
                    Object.keys(require.cache).forEach((modulePath) => {
                        if (modulePath.startsWith((0, path_1.join)(api.paths.cwd, constants_1.OUTPUT_PATH)))
                            delete require.cache[modulePath];
                    });
                },
            },
        });
    });
}
exports.default = default_1;
