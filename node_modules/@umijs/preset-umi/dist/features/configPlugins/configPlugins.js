"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schema_1 = require("@umijs/bundler-vite/dist/schema");
const constants_1 = require("@umijs/bundler-webpack/dist/constants");
const schema_2 = require("@umijs/bundler-webpack/dist/schema");
const utils_1 = require("@umijs/utils");
const path_1 = require("path");
const schema_3 = require("./schema");
function resolveProjectDep(opts) {
    var _a, _b;
    if (((_a = opts.pkg.dependencies) === null || _a === void 0 ? void 0 : _a[opts.dep]) ||
        ((_b = opts.pkg.devDependencies) === null || _b === void 0 ? void 0 : _b[opts.dep])) {
        return (0, path_1.dirname)(utils_1.resolve.sync(`${opts.dep}/package.json`, {
            basedir: opts.cwd,
        }));
    }
}
exports.default = (api) => {
    const configDefaults = {
        alias: {
            umi: '@@/exports',
            react: resolveProjectDep({
                pkg: api.pkg,
                cwd: api.cwd,
                dep: 'react',
            }) || (0, path_1.dirname)(require.resolve('react/package.json')),
            'react-dom': resolveProjectDep({
                pkg: api.pkg,
                cwd: api.cwd,
                dep: 'react-dom',
            }) || (0, path_1.dirname)(require.resolve('react-dom/package.json')),
            'react-router': (0, path_1.dirname)(require.resolve('react-router/package.json')),
            'react-router-dom': (0, path_1.dirname)(require.resolve('react-router-dom/package.json')),
        },
        externals: {},
        autoCSSModules: true,
        publicPath: '/',
        mountElementId: 'root',
        base: '/',
        history: { type: 'browser' },
        targets: constants_1.DEFAULT_BROWSER_TARGETS,
    };
    const bundleSchemas = api.config.vite
        ? (0, schema_1.getSchemas)()
        : (0, schema_2.getSchemas)();
    const extraSchemas = (0, schema_3.getSchemas)();
    const schemas = Object.assign(Object.assign({}, bundleSchemas), extraSchemas);
    for (const key of Object.keys(schemas)) {
        const config = {
            schema: schemas[key] || ((Joi) => Joi.any()),
        };
        if (key in configDefaults) {
            config.default = configDefaults[key];
        }
        api.registerPlugins([
            {
                id: `virtual: config-${key}`,
                key: key,
                config,
            },
        ]);
    }
    // api.paths is ready after register
    api.modifyConfig((memo, args) => {
        memo.alias = Object.assign(Object.assign({}, memo.alias), { '@': args.paths.absSrcPath, '@@': args.paths.absTmpPath, 
            // like vite, use to pre-bundling dependencies in vite mode
            '@fs': '/' });
        return memo;
    });
};
