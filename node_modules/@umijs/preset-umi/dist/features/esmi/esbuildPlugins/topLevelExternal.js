"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * only external top level import, exclude sub-path imports for esmi
 * example:
 *   - import from 'antd' will be externalized
 *   - import from 'antd/dist/antd.less' will not be externalized
 */
function topLevelExternal({ exclude, resolver, }) {
    const regSafeExclude = exclude.map((e) => e.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
    const subImportRegExp = new RegExp(`^(${regSafeExclude.join('|')})/`);
    const extRegExp = /\.((?<!d)\.ts|jsx?|tsx)$/;
    return {
        name: 'preset-umi:esmi-top-level-external',
        setup(build) {
            build.onResolve({
                filter: subImportRegExp,
            }, (args) => __awaiter(this, void 0, void 0, function* () {
                const resolved = yield resolver.resolve(args.resolveDir, args.path);
                // only process javascript-like files
                if (extRegExp.test(resolved)) {
                    return { path: resolved };
                }
            }));
        },
    };
}
exports.default = topLevelExternal;
