"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("@umijs/utils/compiled/lodash");
/**
 * transform require call to import
 */
function requireToImportPlugin({ exclude, }) {
    const regSafeExclude = exclude.map((e) => e.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
    const requireRegExp = new RegExp(`^(${regSafeExclude.join('|')})$`);
    return {
        name: 'preset-umi:esmi-require-to-import',
        setup(build) {
            // handler require calls for external deps
            build.onResolve({
                filter: requireRegExp,
            }, (args) => __awaiter(this, void 0, void 0, function* () {
                if (args.kind === 'require-call') {
                    return {
                        path: args.path,
                        namespace: 'esmi-require-to-import',
                        pluginData: {
                            resolveDir: args.resolveDir,
                        },
                    };
                }
            }));
            // replace load content
            build.onLoad({
                filter: /.*/,
                namespace: 'esmi-require-to-import',
            }, (args) => {
                const { resolveDir } = args.pluginData || {};
                const packageName = args.path;
                const starSpecifier = `${(0, lodash_1.camelCase)(packageName)}Star`;
                const defaultSpecifier = `${(0, lodash_1.camelCase)(packageName)}Default`;
                return {
                    resolveDir,
                    contents: [
                        `import * as ${starSpecifier} from '${packageName}';`,
                        '',
                        `const ${defaultSpecifier} = ${starSpecifier}.default ? ${starSpecifier}.default : ${starSpecifier};`,
                        '',
                        `export default ${defaultSpecifier};`,
                        `export * from '${packageName}';`,
                        '',
                    ].join('\n'),
                };
            });
        },
    };
}
exports.default = requireToImportPlugin;
