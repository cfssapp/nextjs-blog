"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@umijs/utils");
const crypto_1 = require("crypto");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
/**
 * class for connect esmi server
 */
class ESMIService {
    constructor(opts) {
        this.cdnOrigin = '';
        this.cacheDir = '';
        this.cache = {};
        this.cdnOrigin = opts.cdnOrigin;
        this.cacheDir = opts.cacheDir;
        // restore local cache
        const cacheFilePath = path_1.default.join(this.cacheDir, 'importmap.json');
        if (fs_1.default.existsSync(cacheFilePath)) {
            try {
                this.cache = require(cacheFilePath);
            }
            catch (_a) {
                /* nothing */
            }
        }
    }
    /**
     * get cache file path by cache key
     * @param data  pkg data
     */
    static getCacheKey(data) {
        const hash = (0, crypto_1.createHash)('md4');
        hash.update(JSON.stringify(data.pkgInfo.exports));
        return hash.digest('hex');
    }
    /**
     * get importmap cache by cache key
     * @param key cache key
     */
    getCache(key) {
        return this.cache[key];
    }
    /**
     * set importmap cache
     * @param key   cache key
     * @param data  importmap data
     */
    setCache(key, data) {
        this.cache[key] = data;
        // create cache dir
        if (!fs_1.default.existsSync(this.cacheDir)) {
            fs_1.default.mkdirSync(this.cacheDir, { recursive: true });
        }
        // write cache to file system
        fs_1.default.writeFileSync(path_1.default.join(this.cacheDir, 'importmap.json'), JSON.stringify(this.cache, null, 2));
    }
    /**
     * build importmap from deps tree
     * @param data  package data
     * @returns ticketId
     */
    build(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return utils_1.axios
                .post(`${this.cdnOrigin}/api/v1/esm/build`, data)
                .then((a) => { var _a; return (_a = a.data.data) === null || _a === void 0 ? void 0 : _a.ticketId; });
        });
    }
    /**
     * get importmap from deps tree
     * @param data  package data
     * @returns importmap
     */
    getImportmap(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const cacheKey = ESMIService.getCacheKey(data);
            const cache = this.getCache(cacheKey);
            const stamp = +new Date();
            // use valid cache first
            if (cache) {
                utils_1.logger.info('ESMi cache used');
                return cache;
            }
            // log dependency list
            utils_1.logger.info(utils_1.chalk.greenBright('Pre-compiling dependencies on esmi:'));
            data.pkgInfo.exports[0].deps.forEach((dep) => {
                console.log(utils_1.chalk.yellow(`  ${dep.name}`));
            });
            // get the build ticket id
            const ticketId = yield this.build(data);
            utils_1.logger.info(`ticketId: ${ticketId}`);
            // continue to the next request after 2s
            const next = () => new Promise((resolve) => setTimeout(() => resolve(deferrer()), 2000));
            const deferrer = () => {
                return utils_1.axios
                    .get(`${this.cdnOrigin}/api/v1/esm/importmap/${ticketId}`)
                    .then((res) => {
                    if (res.data.success) {
                        this.setCache(cacheKey, res.data.data);
                        utils_1.logger.info(`Done, took ${((+new Date() - stamp) / 1000).toFixed(1)}s`);
                        return res.data.data;
                    }
                    return next();
                }, next);
            };
            return deferrer();
        });
    }
}
exports.default = ESMIService;
