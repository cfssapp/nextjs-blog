"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const watch_1 = require("../../commands/dev/watch");
const createMockMiddleware_1 = require("./createMockMiddleware");
const getMockData_1 = require("./getMockData");
function default_1(api) {
    api.describe({
        key: 'mock',
        config: {
            schema(Joi) {
                return Joi.object().keys({
                    exclude: Joi.array()
                        .items(Joi.string())
                        .description('exclude files not parse mock'),
                    include: Joi.array().items(Joi.string()),
                });
            },
        },
        enableBy() {
            return api.name === 'dev';
        },
    });
    // context for update mockData
    const context = {
        mockData: null,
    };
    api.onStart(() => {
        (0, watch_1.watch)({
            path: `${api.cwd}/mock`,
            addToUnWatches: true,
            onChange: () => {
                context.mockData = (0, getMockData_1.getMockData)({
                    cwd: api.cwd,
                    mockConfig: api.config.mock || {},
                });
            },
        });
    });
    api.addBeforeMiddlewares(() => __awaiter(this, void 0, void 0, function* () {
        context.mockData = (0, getMockData_1.getMockData)({
            cwd: api.cwd,
            mockConfig: api.config.mock || {},
        });
        return [
            (0, createMockMiddleware_1.createMockMiddleware)({
                context,
            }),
        ];
    }));
}
exports.default = default_1;
