"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const FAVICON_FILES = [
    'favicon.ico',
    'favicon.gif',
    'favicon.png',
    'favicon.jpg',
    'favicon.jpeg',
    'favicon.svg',
    'favicon.avif',
    'favicon.webp',
];
function getFaviconFile(p) {
    return FAVICON_FILES.find((f) => (0, fs_1.existsSync)((0, path_1.join)(p, f)));
}
exports.default = (api) => {
    api.describe({
        config: {
            schema: (Joi) => Joi.string(),
        },
    });
    api.modifyAppData((memo) => __awaiter(void 0, void 0, void 0, function* () {
        if (api.config.favicon)
            return memo;
        const faviconFile = getFaviconFile(api.paths.absSrcPath);
        if (faviconFile) {
            memo.faviconFile = faviconFile;
        }
        return memo;
    }));
    api.addBeforeMiddlewares(() => [
        (req, res, next) => {
            if (api.appData.faviconFile &&
                req.path === `/${api.appData.faviconFile}`) {
                res.sendFile((0, path_1.join)(api.paths.absSrcPath, api.appData.faviconFile));
            }
            else {
                next();
            }
        },
    ]);
    api.onBuildComplete(({ err }) => {
        if (err)
            return;
        if (api.appData.faviconFile) {
            (0, fs_1.copyFileSync)((0, path_1.join)(api.paths.absSrcPath, api.appData.faviconFile), (0, path_1.join)(api.paths.absOutputPath, api.appData.faviconFile));
        }
    });
    api.modifyHTMLFavicon((memo) => {
        return api.appData.faviconFile
            ? `${api.config.publicPath}${api.appData.faviconFile}`
            : memo;
    });
};
