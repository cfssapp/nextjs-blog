"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = (api) => {
    api.describe({
        key: 'vite',
        config: {
            schema(Joi) {
                return Joi.object();
            },
        },
        enableBy: api.EnableBy.config,
    });
    // scan deps into api.appData by default for vite mode
    api.register({
        key: 'onBeforeCompiler',
        stage: Number.POSITIVE_INFINITY,
        fn() {
            return __awaiter(this, void 0, void 0, function* () {
                yield api.applyPlugins({
                    key: 'updateAppDataDeps',
                    type: api.ApplyPluginsType.event,
                });
            });
        },
    });
    // include extra monorepo package deps for vite pre-bundle
    api.modifyViteConfig((memo) => {
        var _a, _b;
        memo.optimizeDeps = Object.assign(Object.assign({}, (memo.optimizeDeps || {})), { include: (_b = (_a = memo.optimizeDeps) === null || _a === void 0 ? void 0 : _a.include) === null || _b === void 0 ? void 0 : _b.concat(Object.values(api.appData.deps)
                .map(({ matches }) => matches[0])
                .filter((item) => (item === null || item === void 0 ? void 0 : item.startsWith('@fs')) && !(item === null || item === void 0 ? void 0 : item.includes('node_modules')))) });
        return memo;
    });
    // add script modules and links to vite output htmldocument,to meet targets whether or not support ESM
    let buildStats;
    api.onBuildComplete(({ err, stats }) => {
        if (!err) {
            buildStats = stats;
        }
    });
    api.modifyHTML(($) => {
        if (buildStats) {
            $('head').append(buildStats.extraHtml.head);
            $('body').append(buildStats.extraHtml.body);
        }
        return $;
    });
};
