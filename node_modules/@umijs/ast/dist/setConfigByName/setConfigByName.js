"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setConfigByName = void 0;
const traverse = __importStar(require("@umijs/bundler-utils/compiled/babel/traverse"));
const t = __importStar(require("@umijs/bundler-utils/compiled/babel/types"));
function setConfigByName(ast, name, value) {
    let _value;
    let valueObject;
    let isChanged = false;
    try {
        _value = JSON.parse(value);
    }
    catch (error) {
        _value = value;
    }
    const valueType = typeof _value;
    switch (valueType) {
        case 'string':
            valueObject = t.stringLiteral(_value);
            break;
        case 'boolean':
            valueObject = t.booleanLiteral(_value);
            break;
        case 'number':
            valueObject = t.numericLiteral(_value);
            break;
        case 'object':
            if (Array.isArray(_value)) {
                valueObject = t.arrayExpression(_value.map((i) => {
                    return t.stringLiteral(i);
                }));
            }
            else {
                const valueObjs = [];
                Object.keys(_value).forEach((key) => {
                    valueObjs.push(t.objectProperty(t.identifier(key), t.stringLiteral(_value[key])));
                });
                valueObject = t.objectExpression(valueObjs);
            }
            break;
        default:
            console.log(`${valueType} is not supported.`);
            break;
    }
    if (!valueObject)
        return;
    // 这里是修改逻辑
    traverse.default(ast, {
        ObjectProperty(path) {
            var _a;
            //@ts-ignore
            if (((_a = path.node.key) === null || _a === void 0 ? void 0 : _a.name) === name) {
                path.node.value = valueObject;
                isChanged = true;
            }
        },
    });
    if (!isChanged) {
        // 这里是插入逻辑
        //@ts-ignore
        ast.program.body[0].declaration.properties.push(t.objectProperty(t.identifier(name), valueObject));
    }
    return ast;
}
exports.setConfigByName = setConfigByName;
