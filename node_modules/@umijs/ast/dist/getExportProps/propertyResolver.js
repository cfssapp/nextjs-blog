"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findArrayElements = exports.findArrayLiteralElements = exports.findClassStaticProperty = exports.findObjectMembers = exports.findObjectLiteralProperties = exports.NODE_RESOLVERS = exports.LITERAL_NODE_RESOLVERS = void 0;
const t = __importStar(require("@umijs/bundler-utils/compiled/babel/types"));
const StringResolver = {
    is(src) {
        return t.isStringLiteral(src);
    },
    get(src) {
        return src.value;
    },
};
const NumberResolver = {
    is(src) {
        return t.isNumericLiteral(src);
    },
    get(src) {
        return src.value;
    },
};
const BooleanResolver = {
    is(src) {
        return t.isBooleanLiteral(src);
    },
    get(src) {
        return src.value;
    },
};
const NullResolver = {
    is(src) {
        return t.isNullLiteral(src);
    },
    get() {
        return null;
    },
};
const UndefinedResolver = {
    is(src) {
        return t.isIdentifier(src) && src.name === 'undefined';
    },
    get() {
        return undefined;
    },
};
const ObjectLiteralResolver = {
    is(src) {
        return t.isObjectExpression(src);
    },
    get(src) {
        return findObjectLiteralProperties(src);
    },
};
const ObjectResolver = {
    is(src) {
        return t.isObjectExpression(src);
    },
    get(src) {
        return findObjectMembers(src);
    },
};
const ClassResolver = {
    is(src) {
        return t.isClass(src);
    },
    get(src) {
        return findClassStaticProperty(src);
    },
};
const ArrayLiteralResolver = {
    is(src) {
        return t.isArrayExpression(src);
    },
    get(src) {
        return findArrayLiteralElements(src);
    },
};
const ArrayResolver = {
    is(src) {
        return t.isArrayExpression(src);
    },
    get(src) {
        return findArrayElements(src);
    },
};
const FunctionResolver = {
    is(src) {
        return t.isFunctionExpression(src);
    },
    get() {
        return function () { };
    },
};
const ArrowFunctionResolver = {
    is(src) {
        return t.isArrowFunctionExpression(src);
    },
    get() {
        return () => { };
    },
};
exports.LITERAL_NODE_RESOLVERS = [
    StringResolver,
    NumberResolver,
    BooleanResolver,
    NullResolver,
    UndefinedResolver,
    ObjectLiteralResolver,
    ArrayLiteralResolver,
];
exports.NODE_RESOLVERS = [
    StringResolver,
    NumberResolver,
    BooleanResolver,
    NullResolver,
    UndefinedResolver,
    ObjectResolver,
    ArrayResolver,
    ClassResolver,
    FunctionResolver,
    ArrowFunctionResolver,
];
function findObjectLiteralProperties(node) {
    const target = {};
    node.properties.forEach((p) => {
        if (t.isObjectProperty(p) && t.isIdentifier(p.key)) {
            const resolver = exports.LITERAL_NODE_RESOLVERS.find((resolver) => resolver.is(p.value));
            if (resolver) {
                // @ts-ignore
                target[p.key.name] = resolver.get(p.value);
            }
        }
    });
    return target;
}
exports.findObjectLiteralProperties = findObjectLiteralProperties;
function findObjectMembers(node) {
    const target = {};
    node.properties.forEach((p) => {
        if (t.isObjectMember(p) && t.isIdentifier(p.key)) {
            if (t.isObjectMethod(p)) {
                // @ts-ignore
                target[p.key.name] = () => { };
            }
            else {
                const resolver = exports.NODE_RESOLVERS.find((resolver) => resolver.is(p.value));
                if (resolver) {
                    // @ts-ignore
                    target[p.key.name] = resolver.get(p.value);
                }
            }
        }
    });
    return target;
}
exports.findObjectMembers = findObjectMembers;
function findClassStaticProperty(node) {
    function isStaticNode(p) {
        return 'static' in p && p.static === true;
    }
    let body = node.body;
    if (!t.isClassBody(body))
        return;
    const target = {};
    body.body.forEach((p) => {
        if (isStaticNode(p) && t.isIdentifier(p.key)) {
            if (t.isMethod(p) || t.isTSDeclareMethod(p)) {
                // @ts-ignore
                target[p.key.name] = () => { };
            }
            else {
                const resolver = exports.NODE_RESOLVERS.find((resolver) => resolver.is(p.value));
                if (resolver) {
                    // @ts-ignore
                    target[p.key.name] = resolver.get(p.value);
                }
            }
        }
    });
    return target;
}
exports.findClassStaticProperty = findClassStaticProperty;
function findArrayLiteralElements(node) {
    const target = [];
    node.elements.forEach((p) => {
        const resolver = exports.LITERAL_NODE_RESOLVERS.find((resolver) => resolver.is(p));
        if (resolver) {
            target.push(resolver.get(p));
        }
    });
    return target;
}
exports.findArrayLiteralElements = findArrayLiteralElements;
function findArrayElements(node) {
    const target = [];
    node.elements.forEach((p) => {
        const resolver = exports.NODE_RESOLVERS.find((resolver) => resolver.is(p));
        if (resolver) {
            target.push(resolver.get(p));
        }
    });
    return target;
}
exports.findArrayElements = findArrayElements;
