"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExportProps = void 0;
const traverse = __importStar(require("@umijs/bundler-utils/compiled/babel/traverse"));
const t = __importStar(require("@umijs/bundler-utils/compiled/babel/types"));
const parse_1 = require("../utils/parse");
const propertyResolver_1 = require("./propertyResolver");
function getExportProps(code) {
    const ast = (0, parse_1.parse)(code);
    let props = undefined;
    traverse.default(ast, {
        Program: {
            enter(path) {
                const node = path.node;
                const defaultExport = findExportDefault(node);
                if (!defaultExport)
                    return;
                if (t.isIdentifier(defaultExport)) {
                    const { name } = defaultExport;
                    props = findAssignmentExpressionProps({
                        programNode: node,
                        name,
                    });
                }
                else if (t.isObjectExpression(defaultExport)) {
                    props = (0, propertyResolver_1.findObjectMembers)(defaultExport);
                }
                else if (t.isArrayExpression(defaultExport)) {
                    props = (0, propertyResolver_1.findArrayElements)(defaultExport);
                }
                else {
                    const resolver = propertyResolver_1.NODE_RESOLVERS.find((resolver) => resolver.is(defaultExport));
                    if (resolver) {
                        props = resolver.get(defaultExport);
                    }
                }
            },
        },
    });
    return props;
}
exports.getExportProps = getExportProps;
function findExportDefault(programNode) {
    for (const n of programNode.body) {
        if (t.isExportDefaultDeclaration(n)) {
            return n.declaration;
        }
    }
    return null;
}
function findAssignmentExpressionProps(opts) {
    const props = {};
    for (const n of opts.programNode.body) {
        let node = n;
        if (t.isExpressionStatement(node)) {
            node = node.expression;
        }
        if (t.isAssignmentExpression(node) &&
            t.isMemberExpression(node.left) &&
            t.isIdentifier(node.left.object) &&
            node.left.object.name === opts.name) {
            const resolver = propertyResolver_1.NODE_RESOLVERS.find((resolver) => resolver.is(t.isAssignmentExpression(node) && node.right));
            if (resolver) {
                props[node.left.property.name] = resolver.get(node.right);
            }
        }
    }
    return props;
}
