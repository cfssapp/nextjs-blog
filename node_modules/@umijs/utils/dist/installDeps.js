"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const execa = __importStar(require("../compiled/execa"));
function installDeps({ opts, cwd = process.cwd(), }) {
    const { dependencies, devDependencies } = opts;
    const useYarn = (0, fs_1.existsSync)((0, path_1.join)(cwd, 'yarn.lock')) ||
        (0, fs_1.existsSync)((0, path_1.join)(process.cwd(), 'yarn.lock'));
    const usePnpm = (0, fs_1.existsSync)((0, path_1.join)(cwd, 'pnpm-workspace.yaml')) ||
        (0, fs_1.existsSync)((0, path_1.join)(process.cwd(), 'pnpm-workspace.yaml'));
    const runNpm = useYarn ? 'yarn' : usePnpm ? 'pnpm' : 'npm';
    const install = useYarn || usePnpm ? 'add' : 'install';
    const devTag = useYarn || usePnpm ? '--D' : '--save-dev';
    const installDependencies = (deps, npmStr, insStr, devStr) => {
        console.log(`${npmStr} install dependencies packages:${deps.join(' ')}`);
        execa.execaCommandSync([npmStr, insStr, devStr]
            .concat(deps)
            .filter((n) => n)
            .join(' '), {
            encoding: 'utf8',
            cwd,
            env: Object.assign({}, process.env),
            stderr: 'pipe',
            stdout: 'pipe',
        });
        console.log(`install dependencies packages success`);
    };
    if (dependencies) {
        installDependencies(dependencies, runNpm, install);
    }
    if (devDependencies) {
        installDependencies(devDependencies, runNpm, install, devTag);
    }
}
exports.default = installDeps;
