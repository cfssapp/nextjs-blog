"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.packageNormalize = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const plugin_utils_1 = require("umi/plugin-utils");
const localeUtils_1 = require("./utils/localeUtils");
const withTmpPath_1 = require("./utils/withTmpPath");
const packageNormalize = (packageName) => packageName.replace(/[@\/\-.]/g, '_');
exports.packageNormalize = packageNormalize;
// TODO: runtime plugin
exports.default = (api) => {
    var _a;
    // TODO: antd 的校验考虑 antd 插件
    let hasAntd = false;
    try {
        hasAntd = !!require.resolve('antd');
    }
    catch (e) {
        api.logger.warn('antd is not installed. <SelecLang /> unavailable');
    }
    api.describe({
        key: 'locale',
        config: {
            default: {
                baseNavigator: true,
                useLocalStorage: true,
                baseSeparator: '-',
                antd: hasAntd,
            },
            schema(joi) {
                return joi.object({
                    default: joi.string(),
                    useLocalStorage: joi.boolean(),
                    baseNavigator: joi.boolean(),
                    title: joi.boolean(),
                    antd: joi.boolean(),
                    baseSeparator: joi.string(),
                });
            },
        },
        enableBy: api.EnableBy.config,
    });
    const reactIntlPkgPath = (0, plugin_utils_1.winPath)((0, path_1.dirname)(require.resolve('react-intl/package')));
    // polyfill
    if ((0, localeUtils_1.isNeedPolyfill)(((_a = api.userConfig) === null || _a === void 0 ? void 0 : _a.targets) || {})) {
        api.addEntryImportsAhead(() => [
            {
                source: require.resolve('intl'),
            },
        ]);
    }
    const addAntdLocales = (args) => __awaiter(void 0, void 0, void 0, function* () {
        var _b;
        return yield api.applyPlugins({
            key: 'addAntdLocales',
            type: api.ApplyPluginsType.add,
            initialValue: [
                `antd/${((_b = api.config) === null || _b === void 0 ? void 0 : _b.ssr) ? 'lib' : 'es'}/locale/${(0, localeUtils_1.getAntdLocale)(args.lang, args.country)}`,
            ],
            args,
        });
    });
    const getList = (resolveKey) => __awaiter(void 0, void 0, void 0, function* () {
        var _c, _d;
        const { paths } = api;
        return (0, localeUtils_1.getLocaleList)({
            localeFolder: ((_c = api.config) === null || _c === void 0 ? void 0 : _c.singular) ? 'locale' : 'locales',
            separator: (_d = api.config.locale) === null || _d === void 0 ? void 0 : _d.baseSeparator,
            absSrcPath: paths.absSrcPath,
            absPagesPath: paths.absPagesPath,
            addAntdLocales,
            resolveKey,
        });
    });
    api.onGenerateFiles(() => __awaiter(void 0, void 0, void 0, function* () {
        var _e, _f, _g, _h;
        const localeTpl = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../libs/locale/locale.tpl'), 'utf-8');
        // moment2dayjs
        const resolveKey = api.config.moment2dayjs ? 'dayjs' : 'moment';
        const momentPkgPath = (0, plugin_utils_1.winPath)((0, path_1.dirname)(require.resolve(`${resolveKey}/package.json`)));
        const EventEmitterPkg = (0, plugin_utils_1.winPath)((0, path_1.dirname)(require.resolve('event-emitter/package')));
        const { baseSeparator, baseNavigator, antd, title, useLocalStorage } = api
            .config.locale;
        const defaultLocale = ((_e = api.config.locale) === null || _e === void 0 ? void 0 : _e.default) || `zh${baseSeparator}CN`;
        const localeList = yield getList(resolveKey);
        const momentLocales = localeList
            .map(({ momentLocale }) => momentLocale)
            .filter((locale) => locale);
        const antdLocales = localeList
            .map(({ antdLocale }) => antdLocale)
            .filter((locale) => locale);
        let MomentLocales = momentLocales;
        let DefaultMomentLocale = '';
        // set moment default accounding to locale.default
        if (!MomentLocales.length && ((_f = api.config.locale) === null || _f === void 0 ? void 0 : _f.default)) {
            const [lang, country = ''] = defaultLocale.split(baseSeparator);
            const { momentLocale } = (0, localeUtils_1.getMomentLocale)(lang, country, resolveKey);
            if (momentLocale) {
                MomentLocales = [momentLocale];
                DefaultMomentLocale = momentLocale;
            }
        }
        let DefaultAntdLocales = [];
        // set antd default locale
        if (!antdLocales.length && ((_g = api.config.locale) === null || _g === void 0 ? void 0 : _g.antd)) {
            const [lang, country = ''] = defaultLocale.split(baseSeparator);
            DefaultAntdLocales = plugin_utils_1.lodash.uniq(yield addAntdLocales({
                lang,
                country,
            }));
        }
        const NormalizeAntdLocalesName = function () {
            // @ts-ignore
            return (0, exports.packageNormalize)(this);
        };
        api.writeTmpFile({
            content: plugin_utils_1.Mustache.render(localeTpl, {
                MomentLocales,
                DefaultMomentLocale,
                NormalizeAntdLocalesName,
                DefaultAntdLocales,
                Antd: !!antd,
                Title: title && api.config.title,
                BaseSeparator: baseSeparator,
                DefaultLocale: defaultLocale,
                DefaultLang: defaultLocale,
                momentPkgPath,
            }),
            path: 'locale.tsx',
        });
        const localeExportsTpl = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../libs/locale/localeExports.tpl'), 'utf-8');
        const localeDirName = api.config.singular ? 'locale' : 'locales';
        const localeDirPath = (0, path_1.join)(api.paths.absSrcPath, localeDirName);
        api.writeTmpFile({
            path: 'localeExports.ts',
            content: plugin_utils_1.Mustache.render(localeExportsTpl, {
                EventEmitterPkg,
                BaseSeparator: baseSeparator,
                BaseNavigator: baseNavigator,
                UseLocalStorage: !!useLocalStorage,
                LocaleDir: localeDirName,
                ExistLocaleDir: (0, fs_1.existsSync)(localeDirPath),
                LocaleList: localeList.map((locale) => (Object.assign(Object.assign({}, locale), { antdLocale: locale.antdLocale.map((antdLocale, index) => ({
                        locale: antdLocale,
                        index: index,
                    })), paths: locale.paths.map((path, index) => ({
                        path,
                        index,
                    })) }))),
                Antd: !!antd,
                DefaultLocale: JSON.stringify(defaultLocale),
                warningPkgPath: (0, plugin_utils_1.winPath)(require.resolve('warning/package')),
                reactIntlPkgPath,
            }),
        });
        // runtime.tsx
        const runtimeTpl = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../libs/locale/runtime.tpl'), 'utf-8');
        api.writeTmpFile({
            path: 'runtime.tsx',
            content: plugin_utils_1.Mustache.render(runtimeTpl, {
                Title: !!title,
            }),
        });
        // SelectLang.tsx
        const selectLang = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../libs/locale/SelectLang.tpl'), 'utf-8');
        api.writeTmpFile({
            path: 'SelectLang.tsx',
            content: plugin_utils_1.Mustache.render(selectLang, {
                Antd: !!antd,
                LocaleList: localeList,
                ShowSelectLang: localeList.length > 1 && !!antd,
                antdFiles: ((_h = api.config) === null || _h === void 0 ? void 0 : _h.ssr) ? 'lib' : 'es',
            }),
        });
        // index.ts
        api.writeTmpFile({
            path: 'index.ts',
            content: `
export { useIntl, formatMessage, FormattedMessage } from './localeExports.ts';
export { SelectLang } from './SelectLang.tsx';
`,
        });
    }));
    // Runtime Plugin
    api.addRuntimePlugin(() => [(0, withTmpPath_1.withTmpPath)({ api, path: 'runtime.tsx' })]);
    api.addRuntimePluginKey(() => ['locale']);
    // watch locale files
    api.addTmpGenerateWatcherPaths(() => __awaiter(void 0, void 0, void 0, function* () {
        const resolveKey = api.config.moment2dayjs ? 'dayjs' : 'moment';
        const localeList = yield getList(resolveKey);
        return (0, localeUtils_1.exactLocalePaths)(localeList);
    }));
};
