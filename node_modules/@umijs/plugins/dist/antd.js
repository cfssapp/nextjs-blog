"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const plugin_utils_1 = require("umi/plugin-utils");
const resolveProjectDep_1 = require("./utils/resolveProjectDep");
const withTmpPath_1 = require("./utils/withTmpPath");
exports.default = (api) => {
    let pkgPath;
    try {
        pkgPath =
            (0, resolveProjectDep_1.resolveProjectDep)({
                pkg: api.pkg,
                cwd: api.cwd,
                dep: 'antd',
            }) || (0, path_1.dirname)(require.resolve('antd/package.json'));
    }
    catch (e) { }
    api.describe({
        config: {
            schema(Joi) {
                return Joi.object({
                    configProvider: Joi.object(),
                    // themes
                    dark: Joi.boolean(),
                    compact: Joi.boolean(),
                    // babel-plugin-import
                    import: Joi.boolean(),
                    // less or css, default less
                    style: Joi.string().allow('less', 'css'),
                });
            },
        },
        enableBy: api.EnableBy.config,
    });
    function checkPkgPath() {
        if (!pkgPath) {
            throw new Error(`Can't find antd package. Please install antd first.`);
        }
    }
    api.modifyAppData((memo) => {
        checkPkgPath();
        const version = require(`${pkgPath}/package.json`).version;
        memo.antd = {
            pkgPath,
            version,
        };
        return memo;
    });
    api.modifyConfig((memo) => {
        checkPkgPath();
        // antd import
        memo.alias.antd = pkgPath;
        // moment > dayjs
        if (memo.antd.dayjs) {
            memo.alias.moment = (0, path_1.dirname)(require.resolve('dayjs/package.json'));
        }
        // dark mode & compact mode
        if (memo.antd.dark || memo.antd.compact) {
            const { getThemeVariables } = require('antd/dist/theme');
            memo.theme = Object.assign(Object.assign({}, getThemeVariables(memo.antd)), memo.theme);
        }
        return memo;
    });
    // babel-plugin-import
    api.addExtraBabelPlugins(() => {
        const style = api.config.antd.style || 'less';
        return api.config.antd.import && !api.appData.vite
            ? [
                [
                    require.resolve('babel-plugin-import'),
                    {
                        libraryName: 'antd',
                        libraryDirectory: 'es',
                        style: style === 'less' ? true : 'css',
                    },
                ],
            ]
            : [];
    });
    // antd config provider
    api.onGenerateFiles(() => {
        if (!api.config.antd.configProvider)
            return;
        api.writeTmpFile({
            path: `runtime.tsx`,
            content: plugin_utils_1.Mustache.render(`
import { ConfigProvider, Modal, message, notification } from 'antd';

export function rootContainer(container) {
  const finalConfig = {...{{{ config }}}}
  if (finalConfig.prefixCls) {
    Modal.config({
      rootPrefixCls: finalConfig.prefixCls
    });
    message.config({
      prefixCls: \`\${finalConfig.prefixCls}-message\`
    });
    notification.config({
      prefixCls: \`\${finalConfig.prefixCls}-notification\`
    });
  }
  return <ConfigProvider {...finalConfig}>{container}</ConfigProvider>;
}
      `.trim(), {
                config: JSON.stringify(api.config.antd.configProvider),
            }),
        });
    });
    api.addRuntimePlugin(() => {
        return api.config.antd.configProvider
            ? [(0, withTmpPath_1.withTmpPath)({ api, path: 'runtime.tsx' })]
            : [];
    });
    // import antd style if antd.import is not configured
    api.addEntryImportsAhead(() => {
        const style = api.config.antd.style || 'less';
        return api.config.antd.import && !api.appData.vite
            ? []
            : [
                {
                    source: style === 'less' ? 'antd/dist/antd.less' : 'antd/dist/antd.css',
                },
            ];
    });
};
