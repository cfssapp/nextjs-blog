"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const path_1 = require("path");
const plugin_utils_1 = require("umi/plugin-utils");
exports.default = (api) => {
    api.describe({
        key: 'unocss',
        config: {
            schema(Joi) {
                return Joi.object({
                    watch: Joi.array(),
                });
            },
        },
        enableBy: api.EnableBy.config,
    });
    const outputPath = 'uno.css';
    api.onBeforeCompiler(() => {
        /** 由于 @unocss/cli 对设置文件进行了检查，因此加入需要 unocss.config.ts 设置的提示
         * https://github.com/antfu/unocss/blob/main/packages/cli/src/index.ts#L93 */
        if (!(0, fs_1.existsSync)((0, path_1.join)(api.paths.cwd, 'unocss.config.ts')))
            api.logger.warn('请在项目目录中添加 unocss.config.ts 文件，并配置需要的 unocss presets，否则插件将没有效果！');
        const generatedPath = (0, path_1.join)(api.paths.absTmpPath, outputPath);
        const binPath = (0, path_1.join)(api.cwd, 'node_modules/.bin/unocss');
        const watchDirs = api.config.unocss.watch;
        /** 透过子进程建立 unocss 服务，将生成的 css 写入 generatedPath */
        const unocss = (0, child_process_1.exec)(`${binPath} ${watchDirs.join(' ')} --out-file ${generatedPath} ${api.env === 'development' ? '--watch' : ''}`, { cwd: api.cwd });
        unocss.on('error', (m) => {
            api.logger.error('unocss service encounter an error: ' + m);
        });
    });
    /** 将生成的 css 文件加入到 import 中 */
    api.addEntryImports(() => {
        const generatedPath = (0, plugin_utils_1.winPath)((0, path_1.join)(api.paths.absTmpPath, outputPath));
        return [{ source: generatedPath }];
    });
};
