"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllModels = exports.getModelUtil = void 0;
const t = __importStar(require("@umijs/bundler-utils/compiled/babel/types"));
const path_1 = require("path");
const plugin_utils_1 = require("umi/plugin-utils");
const modelUtils_1 = require("./utils/modelUtils");
const withTmpPath_1 = require("./utils/withTmpPath");
const utils_1 = require("@umijs/utils");
exports.default = (api) => {
    const pkgPath = (0, path_1.join)(__dirname, '../libs/dva.ts');
    api.describe({
        config: {
            schema(Joi) {
                return Joi.object({
                    extraModels: Joi.array().items(Joi.string()),
                    immer: Joi.object(),
                });
            },
        },
        enableBy: api.EnableBy.config,
    });
    api.modifyAppData((memo) => {
        const models = getAllModels(api);
        memo.pluginDva = {
            pkgPath,
            models,
        };
        return memo;
    });
    api.modifyConfig((memo) => {
        // import from dva
        memo.alias['dva$'] = pkgPath;
        return memo;
    });
    api.onGenerateFiles((args) => {
        var _a, _b, _c, _d, _e, _f;
        const models = args.isFirstTime
            ? api.appData.pluginDva.models
            : getAllModels(api);
        // models.ts
        api.writeTmpFile({
            path: 'models.ts',
            content: modelUtils_1.ModelUtils.getModelsContent(models),
        });
        // dva.tsx
        api.writeTmpFile({
            path: 'dva.tsx',
            tpl: `
// It's faked dva
// aliased to @umijs/plugins/templates/dva
import { create, Provider } from 'dva';
import createLoading from '${(0, utils_1.winPath)(require.resolve('dva-loading'))}';
${((_a = api.config.dva) === null || _a === void 0 ? void 0 : _a.immer)
                ? `
import dvaImmer, { enableES5, enableAllPlugins } from '${(0, utils_1.winPath)(require.resolve('dva-immer'))}';
`
                : ''}
import React, { useRef } from 'react';
import { history } from 'umi';
import { models } from './models';

export function RootContainer(props: any) {
  const app = useRef<any>();
  if (!app.current) {
    app.current = create(
      {
        history,
      },
      {
        initialReducer: {},
        setupMiddlewares(middlewares: Function[]) {
          return [...middlewares];
        },
        setupApp(app: IDvaApp) {
          app._history = history;
        },
      },
    );
    app.current.use(createLoading());
    ${((_b = api.config.dva) === null || _b === void 0 ? void 0 : _b.immer) ? `app.current.use(dvaImmer());` : ''}
    ${((_d = (_c = api.config.dva) === null || _c === void 0 ? void 0 : _c.immer) === null || _d === void 0 ? void 0 : _d.enableES5) ? `enableES5();` : ''}
    ${((_f = (_e = api.config.dva) === null || _e === void 0 ? void 0 : _e.immer) === null || _f === void 0 ? void 0 : _f.enableAllPlugins) ? `enableAllPlugins();` : ''}
    for (const id of Object.keys(models)) {
      app.current.model(models[id].model);
    }
    app.current.start();
  }
  return <Provider store={app.current!._store}>{props.children}</Provider>;
}
      `,
            context: {},
        });
        // runtime.tsx
        api.writeTmpFile({
            path: 'runtime.tsx',
            content: `
import React from 'react';
import { RootContainer } from './dva';

export function dataflowProvider(container, opts) {
  return React.createElement(RootContainer, opts, container);
}
      `,
        });
        // index.ts for export
        api.writeTmpFile({
            path: 'index.ts',
            content: `
export { connect, useDispatch, useStore, useSelector } from 'dva';`,
        });
    });
    api.addTmpGenerateWatcherPaths(() => {
        return [(0, path_1.join)(api.paths.absSrcPath, 'models')];
    });
    api.addRuntimePlugin(() => {
        return [(0, withTmpPath_1.withTmpPath)({ api, path: 'runtime.tsx' })];
    });
    // dva list model
    api.registerCommand({
        name: 'dva',
        fn() {
            api.logger.info(plugin_utils_1.chalk.green.bold('dva models'));
            api.appData.pluginDva.models.forEach((model) => {
                api.logger.info(`  - ${(0, path_1.relative)(api.cwd, model.file)}`);
            });
        },
    });
};
function getModelUtil(api) {
    return new modelUtils_1.ModelUtils(api, {
        contentTest(content) {
            return content.startsWith('// @dva-model');
        },
        astTest({ node, content }) {
            if (isModelObject(node)) {
                return true;
            }
            else if (content.includes('dva-model-extend') &&
                t.isCallExpression(node) &&
                node.arguments.length === 2 &&
                isModelObject(node.arguments[1])) {
                return true;
            }
            return false;
        },
    });
}
exports.getModelUtil = getModelUtil;
function getAllModels(api) {
    return getModelUtil(api).getAllModels({
        extraModels: [...(api.config.dva.extraModels || [])],
    });
}
exports.getAllModels = getAllModels;
function isModelObject(node) {
    return (t.isObjectExpression(node) &&
        node.properties.some((property) => {
            return [
                'state',
                'reducers',
                'subscriptions',
                'effects',
                'namespace',
            ].includes(property.key.name);
        }));
}
