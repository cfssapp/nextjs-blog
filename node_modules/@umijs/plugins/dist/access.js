"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const withTmpPath_1 = require("./utils/withTmpPath");
exports.default = (api) => {
    // TODO: route access
    api.describe({
        config: {
            schema(joi) {
                return joi.object();
            },
        },
        enableBy: api.EnableBy.config,
    });
    api.onGenerateFiles(() => __awaiter(void 0, void 0, void 0, function* () {
        // runtime.tsx
        api.writeTmpFile({
            path: 'runtime.tsx',
            content: `
import React from 'react';
import accessFactory from '@/access';
import { useModel } from '@@/plugin-model';
import { AccessContext } from './context';

function Provider(props) {
  const { initialState } = useModel('@@initialState');
  const access = React.useMemo(() => accessFactory(initialState), [initialState]);
  return (
    <AccessContext.Provider value={access}>
      { props.children }
    </AccessContext.Provider>
  );
}

export function accessProvider(container) {
  return <Provider>{ container }</Provider>;
}
      `,
        });
        // index.ts
        api.writeTmpFile({
            path: 'index.ts',
            content: `
import React from 'react';
import { AccessContext } from './context';

export const useAccess = () => {
  return React.useContext(AccessContext);
};
      `,
        });
        // context.ts
        api.writeTmpFile({
            path: 'context.ts',
            content: `
import React from 'react';
export const AccessContext = React.createContext<any>(null);
      `,
        });
    }));
    api.addRuntimePlugin(() => {
        return [(0, withTmpPath_1.withTmpPath)({ api, path: 'runtime.tsx' })];
    });
    api.addTmpGenerateWatcherPaths(() => [
        (0, path_1.join)(api.paths.absSrcPath, 'access.ts'),
        (0, path_1.join)(api.paths.absSrcPath, 'access.js'),
    ]);
};
