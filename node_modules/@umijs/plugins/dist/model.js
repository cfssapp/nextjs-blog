"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const t = __importStar(require("@umijs/bundler-utils/compiled/babel/types"));
const fs_1 = require("fs");
const path_1 = require("path");
const plugin_utils_1 = require("umi/plugin-utils");
const modelUtils_1 = require("./utils/modelUtils");
const withTmpPath_1 = require("./utils/withTmpPath");
exports.default = (api) => {
    api.describe({
        config: {
            schema(Joi) {
                return Joi.object({
                    extraModels: Joi.array().items(Joi.string()),
                });
            },
        },
        enableBy: api.EnableBy.config,
    });
    api.modifyAppData((memo) => __awaiter(void 0, void 0, void 0, function* () {
        const models = yield getAllModels(api);
        memo.pluginModel = {
            models,
        };
        return memo;
    }));
    api.onGenerateFiles((args) => __awaiter(void 0, void 0, void 0, function* () {
        const models = args.isFirstTime
            ? api.appData.pluginModel.models
            : yield getAllModels(api);
        // model.ts
        api.writeTmpFile({
            path: 'model.ts',
            content: modelUtils_1.ModelUtils.getModelsContent(models),
        });
        // index.tsx
        const indexContent = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../libs/model.tsx'), 'utf-8').replace('fast-deep-equal', (0, plugin_utils_1.winPath)(require.resolve('fast-deep-equal')));
        api.writeTmpFile({
            path: 'index.tsx',
            content: indexContent,
        });
        // runtime.tsx
        api.writeTmpFile({
            path: 'runtime.tsx',
            content: `
import React  from 'react';
import { Provider } from './';
import { models as rawModels } from './model';

function ProviderWrapper(props: any) {
  const models = React.useMemo(() => {
    return Object.keys(rawModels).reduce((memo, key) => {
      memo[rawModels[key].namespace] = rawModels[key].model;
      return memo;
    }, {});
  }, []);
  return <Provider models={models} {...props}>{ props.children }</Provider>
}

export function dataflowProvider(container, opts) {
  return <ProviderWrapper {...opts}>{ container }</ProviderWrapper>;
}
      `,
        });
    }));
    api.addTmpGenerateWatcherPaths(() => {
        return [(0, path_1.join)(api.paths.absSrcPath, 'models')];
    });
    api.addRuntimePlugin(() => {
        return [(0, withTmpPath_1.withTmpPath)({ api, path: 'runtime.tsx' })];
    });
};
function getAllModels(api) {
    return __awaiter(this, void 0, void 0, function* () {
        const extraModels = yield api.applyPlugins({
            key: 'addExtraModels',
            type: api.ApplyPluginsType.add,
            initialValue: [],
        });
        return new modelUtils_1.ModelUtils(api, {
            astTest({ node }) {
                return t.isArrowFunctionExpression(node) || t.isFunctionDeclaration(node);
            },
        }).getAllModels({
            extraModels: [...extraModels, ...(api.config.model.extraModels || [])],
        });
    });
}
