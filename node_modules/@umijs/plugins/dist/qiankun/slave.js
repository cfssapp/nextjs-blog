"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const fs_1 = require("fs");
const path_1 = require("path");
const plugin_utils_1 = require("umi/plugin-utils");
const withTmpPath_1 = require("../utils/withTmpPath");
const constants_1 = require("./constants");
// BREAK CHANGE: 需要手动配置 slave: {}，不能留空
function isSlaveEnable(opts) {
    var _a, _b;
    const slaveCfg = (_b = (_a = opts.userConfig) === null || _a === void 0 ? void 0 : _a.qiankun) === null || _b === void 0 ? void 0 : _b.slave;
    if (slaveCfg) {
        return slaveCfg.enable !== false;
    }
    return !!process.env.INITIAL_QIANKUN_SLAVE_OPTIONS;
}
exports.default = (api) => {
    api.describe({
        key: 'qiankun-slave',
        enableBy: isSlaveEnable,
    });
    api.addRuntimePlugin(() => {
        return [(0, withTmpPath_1.withTmpPath)({ api, path: 'slaveRuntimePlugin.ts' })];
    });
    api.register({
        key: 'addExtraModels',
        fn() {
            return [
                `@@/plugin-qiankun-slave/qiankunModel#{"namespace":"${constants_1.qiankunStateFromMasterModelNamespace}"}`,
            ];
        },
    });
    api.modifyDefaultConfig((memo) => {
        var _a, _b, _c;
        const initialSlaveOptions = Object.assign(Object.assign({ devSourceMap: true }, JSON.parse(process.env.INITIAL_QIANKUN_SLAVE_OPTIONS || '{}')), (memo.qiankun || {}).slave);
        const modifiedDefaultConfig = Object.assign(Object.assign({}, memo), { 
            // 默认开启 runtimePublicPath，避免出现 dynamic import 场景子应用资源地址出问题
            runtimePublicPath: true, 
            // TODO: runtimeHistory
            runtimeHistory: {}, qiankun: Object.assign(Object.assign({}, memo.qiankun), { slave: initialSlaveOptions }) });
        const shouldNotModifyDefaultBase = (_c = (_b = (_a = api.userConfig.qiankun) === null || _a === void 0 ? void 0 : _a.slave) === null || _b === void 0 ? void 0 : _b.shouldNotModifyDefaultBase) !== null && _c !== void 0 ? _c : initialSlaveOptions.shouldNotModifyDefaultBase;
        if (!shouldNotModifyDefaultBase) {
            // @ts-ignore
            modifiedDefaultConfig.base = `/${api.pkg.name}`;
        }
        return modifiedDefaultConfig;
    });
    api.modifyConfig((config) => {
        var _a, _b;
        // mfsu 场景默认给子应用增加 mfName 配置，从而避免冲突
        if (config.mfsu !== false) {
            config.mfsu = Object.assign(Object.assign({}, config.mfsu), { mfName: ((_a = config.mfsu) === null || _a === void 0 ? void 0 : _a.mfName) ||
                    `mf_${(_b = api.pkg.name) === null || _b === void 0 ? void 0 : _b.replace(/^@/, '').replace(/\W/g, '_')}` });
        }
        return config;
    });
    // api.modifyPublicPathStr((publicPathStr) => {
    //   const { runtimePublicPath } = api.config;
    //   const { shouldNotModifyRuntimePublicPath } = (api.config.qiankun || {})
    //     .slave!;
    //   if (runtimePublicPath === true && !shouldNotModifyRuntimePublicPath) {
    //     return `window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__ || "${
    //       api.config.publicPath || '/'
    //     }"`;
    //   }
    //   return publicPathStr;
    // });
    api.chainWebpack((config) => {
        (0, assert_1.default)(api.pkg.name, 'You should have name in package.json.');
        const { shouldNotAddLibraryChunkName } = (api.config.qiankun || {}).slave;
        config.output
            .libraryTarget('umd')
            .library(shouldNotAddLibraryChunkName ? api.pkg.name : `${api.pkg.name}-[name]`);
        // TODO: SOCKET_SERVER
        // TODO: devSourceMap
        return config;
    });
    // umi bundle 添加 entry 标记
    api.modifyHTML(($) => {
        $('script').each((_, el) => {
            var _a;
            const scriptEl = $(el);
            const umiEntry = /\/?umi(\.\w+)?\.js$/g;
            if (umiEntry.test((_a = scriptEl.attr('src')) !== null && _a !== void 0 ? _a : '')) {
                scriptEl.attr('entry', '');
            }
        });
        return $;
    });
    api.addEntryImports(() => {
        return [
            {
                source: '@@/plugin-qiankun-slave/lifecycles',
                specifier: '{ genMount as qiankun_genMount, genBootstrap as qiankun_genBootstrap, genUnmount as qiankun_genUnmount, genUpdate as qiankun_genUpdate }',
            },
        ];
    });
    api.addEntryCode(() => [
        `
export const bootstrap = qiankun_genBootstrap(render);
export const mount = qiankun_genMount('${api.config.mountElementId}');
export const unmount = qiankun_genUnmount('${api.config.mountElementId}');
export const update = qiankun_genUpdate();
if (!window.__POWERED_BY_QIANKUN__) {
  bootstrap().then(mount);
}
    `,
    ]);
    function getFileContent(file) {
        return (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../libs/qiankun/slave', file), 'utf-8');
    }
    api.onGenerateFiles(() => {
        //     api.writeTmpFile({
        //       path: 'slaveOptions.ts',
        //       content: `
        // let options = ${JSON.stringify((api.config.qiankun || {}).slave || {})};
        // export const getSlaveOptions = () => options;
        // export const setSlaveOptions = (newOpts) => options = ({ ...options, ...newOpts });
        //       `,
        //     });
        [
            'qiankunModel.ts',
            'connectMaster.tsx',
            'slaveRuntimePlugin.ts',
            'lifecycles.ts',
        ].forEach((file) => {
            api.writeTmpFile({
                path: file.replace(/\.tpl$/, ''),
                content: getFileContent(file)
                    .replace('__USE_MODEL__', api.isPluginEnable('model')
                    ? `import { useModel } from '@@/plugin/model'`
                    : `const useModel = null;`)
                    .replace(/from 'qiankun'/g, `from '${(0, plugin_utils_1.winPath)((0, path_1.dirname)(require.resolve('qiankun/package')))}'`)
                    .replace(/from 'lodash\//g, `from '${(0, plugin_utils_1.winPath)((0, path_1.dirname)(require.resolve('lodash/package')))}/`),
            });
        });
    });
};
