"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMasterEnable = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const plugin_utils_1 = require("umi/plugin-utils");
const withTmpPath_1 = require("../utils/withTmpPath");
const constants_1 = require("./constants");
function isMasterEnable(opts) {
    var _a;
    const masterCfg = (_a = opts.userConfig.qiankun) === null || _a === void 0 ? void 0 : _a.master;
    if (masterCfg) {
        return masterCfg.enable !== false;
    }
    return !!process.env.INITIAL_QIANKUN_MASTER_OPTIONS;
}
exports.isMasterEnable = isMasterEnable;
exports.default = (api) => {
    api.describe({
        key: 'qiankun-master',
        enableBy: isMasterEnable,
    });
    api.addRuntimePlugin(() => {
        return [(0, withTmpPath_1.withTmpPath)({ api, path: 'masterRuntimePlugin.tsx' })];
    });
    api.modifyDefaultConfig((config) => (Object.assign(Object.assign({}, config), { mountElementId: constants_1.defaultMasterRootId, qiankun: Object.assign(Object.assign({}, config.qiankun), { master: Object.assign(Object.assign({}, JSON.parse(process.env.INITIAL_QIANKUN_MASTER_OPTIONS || '{}')), (config.qiankun || {}).master) }) })));
    // TODO: modify routes
    api.modifyRoutes((memo) => {
        Object.keys(memo).forEach((id) => {
            const route = memo[id];
            if (route.microApp) {
                const appName = route.microApp;
                // TODO: config base
                const base = '/';
                // TODO: config masterHistoryType
                const masterHistoryType = 'browser';
                const routeProps = route.microAppProps || {};
                const normalizedRouteProps = JSON.stringify(routeProps).replace(/"/g, "'");
                route.file = `(async () => {
          const { getMicroAppRouteComponent } = await import('@@/plugin-qiankun-master/getMicroAppRouteComponent');
          return getMicroAppRouteComponent({ appName: '${appName}', base: '${base}', masterHistoryType: '${masterHistoryType}', routeProps: ${normalizedRouteProps} })
        })()`;
            }
        });
        return memo;
    });
    // state model for slave app
    api.addRuntimePluginKey(() => [constants_1.MODEL_EXPORT_NAME]);
    api.register({
        key: 'addExtraModels',
        fn() {
            const { path, exports } = api.appData.appJS || {};
            return path && exports.includes(constants_1.MODEL_EXPORT_NAME)
                ? [
                    `${path}#{"namespace":"${constants_1.qiankunStateForSlaveModelNamespace}","exportName":"${constants_1.MODEL_EXPORT_NAME}"}`,
                ]
                : [];
        },
    });
    function getFileContent(file) {
        return (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../libs/qiankun/master', file), 'utf-8');
    }
    api.onGenerateFiles(() => {
        var _a;
        api.writeTmpFile({
            path: 'masterOptions.ts',
            content: `
let options = ${JSON.stringify(Object.assign({ masterHistoryType: ((_a = api.config.history) === null || _a === void 0 ? void 0 : _a.type) || constants_1.defaultHistoryType, base: api.config.base || '/' }, api.config.qiankun.master))};
export const getMasterOptions = () => options;
export const setMasterOptions = (newOpts) => options = ({ ...options, ...newOpts });
      `,
        });
        api.writeTmpFile({
            path: 'MicroAppLoader.tsx',
            // 开启了 antd 插件的时候，使用 antd 的 loader 组件，否则提示用户必须设置一个自定义的 loader 组件
            content: api.isPluginEnable('antd')
                ? getFileContent('AntdLoader.tsx')
                : `export default function Loader() { console.warn(\`[plugins/qiankun]: Seems like you'r not using @umijs/plugin-antd, you need to provide a custom loader or set autoSetLoading false to shut down this warning!\`); return null; }`,
        });
        [
            'common.ts',
            'constants.ts',
            'types.ts',
            'masterRuntimePlugin.tsx',
            'getMicroAppRouteComponent.tsx.tpl',
            'ErrorBoundary.tsx',
            'MicroApp.tsx',
        ].forEach((file) => {
            if (file.endsWith('.tpl')) {
                api.writeTmpFile({
                    path: file.replace(/\.tpl$/, ''),
                    tpl: getFileContent(file),
                    context: {
                        runtimeHistory: api.config.runtimeHistory,
                        dynamicRoot: false,
                        hasModelPlugin: api.isPluginEnable('model'),
                        // dynamicRoot:
                        //   api.config.exportStatic && api.config.exportStatic.dynamicRoot,
                    },
                });
            }
            else {
                api.writeTmpFile({
                    path: file.replace(/\.tpl$/, ''),
                    content: getFileContent(file)
                        .replace('__USE_MODEL__', api.isPluginEnable('model')
                        ? `import { useModel } from '@@/plugin-model'`
                        : `const useModel = null;`)
                        .replace(/from 'qiankun'/g, `from '${(0, plugin_utils_1.winPath)((0, path_1.dirname)(require.resolve('qiankun/package')))}'`)
                        .replace(/from 'lodash\//g, `from '${(0, plugin_utils_1.winPath)((0, path_1.dirname)(require.resolve('lodash/package')))}/`),
                });
            }
        });
    });
};
