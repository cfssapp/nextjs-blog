"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const strip_ansi_1 = __importDefault(require("@umijs/utils/compiled/strip-ansi"));
// @ts-ignore
const ErrorOverlay = __importStar(require("react-error-overlay"));
const constants_1 = require("../constants");
const formatWebpackMessages_1 = require("../utils/formatWebpackMessages");
console.log('[webpack] connecting...');
let pingTimer = null;
const host = location.host;
const wsUrl = `ws://${host}`;
let isFirstCompilation = true;
let mostRecentCompilationHash = null;
let hasCompileErrors = false;
let hadRuntimeError = false;
const socket = new WebSocket(wsUrl, 'webpack-hmr');
socket.addEventListener('message', ({ data }) => __awaiter(void 0, void 0, void 0, function* () {
    data = JSON.parse(data);
    if (data.type === 'connected') {
        console.log(`[webpack] connected.`);
        // proxy(nginx, docker) hmr ws maybe caused timeout,
        // so send ping package let ws keep alive.
        pingTimer = setInterval(() => socket.send('ping'), 30000);
    }
    else {
        handleMessage(data).catch(console.error);
    }
}));
function waitForSuccessfulPing(ms = 1000) {
    return __awaiter(this, void 0, void 0, function* () {
        // eslint-disable-next-line no-constant-condition
        while (true) {
            try {
                yield fetch(`/__umi_ping`);
                break;
            }
            catch (e) {
                yield new Promise((resolve) => setTimeout(resolve, ms));
            }
        }
    });
}
socket.addEventListener('close', () => __awaiter(void 0, void 0, void 0, function* () {
    if (pingTimer)
        clearInterval(pingTimer);
    console.info('[webpack] Dev server disconnected. Polling for restart...');
    yield waitForSuccessfulPing();
    location.reload();
}));
ErrorOverlay.startReportingRuntimeErrors({
    onError: function () {
        hadRuntimeError = true;
    },
    filename: '/static/js/bundle.js',
});
// @ts-ignore
if (module.hot && typeof module.hot.dispose === 'function') {
    // @ts-ignore
    module.hot.dispose(function () {
        // TODO: why do we need this?
        ErrorOverlay.stopReportingRuntimeErrors();
    });
}
// There is a newer version of the code available.
function handleAvailableHash(hash) {
    // Update last known compilation hash.
    mostRecentCompilationHash = hash;
}
function handleSuccess() {
    const isHotUpdate = !isFirstCompilation;
    isFirstCompilation = false;
    hasCompileErrors = false;
    // Attempt to apply hot updates or reload.
    if (isHotUpdate) {
        tryApplyUpdates(function onHotUpdateSuccess() {
            // Only dismiss it when we're sure it's a hot update.
            // Otherwise it would flicker right before the reload.
            tryDismissErrorOverlay();
        });
    }
}
function handleWarnings(warnings) {
    const isHotUpdate = !isFirstCompilation;
    isFirstCompilation = false;
    hasCompileErrors = false;
    const formatted = (0, formatWebpackMessages_1.formatWebpackMessages)({
        warnings,
        errors: [],
    });
    // print warnings
    if (typeof console !== 'undefined' && typeof console.warn === 'function') {
        for (let i = 0; i < formatted.warnings.length; i++) {
            if (i === 5) {
                console.warn('There were more warnings in other files.\n' +
                    'You can find a complete log in the terminal.');
                break;
            }
            console.warn((0, strip_ansi_1.default)(formatted.warnings[i]));
        }
    }
    // Attempt to apply hot updates or reload.
    if (isHotUpdate) {
        tryApplyUpdates(function onSuccessfulHotUpdate() {
            // Only dismiss it when we're sure it's a hot update.
            // Otherwise it would flicker right before the reload.
            tryDismissErrorOverlay();
        });
    }
}
function handleErrors(errors) {
    isFirstCompilation = false;
    hasCompileErrors = true;
    const formatted = (0, formatWebpackMessages_1.formatWebpackMessages)({
        warnings: [],
        errors,
    });
    // Only show the first error.
    ErrorOverlay.reportBuildError(formatted.errors[0]);
    // Also log them to the console.
    if (typeof console !== 'undefined' && typeof console.error === 'function') {
        for (let i = 0; i < formatted.errors.length; i++) {
            console.error((0, strip_ansi_1.default)(formatted.errors[i]));
        }
    }
}
function tryDismissErrorOverlay() {
    if (!hasCompileErrors) {
        ErrorOverlay.dismissBuildError();
    }
}
// Is there a newer version of this code available?
function isUpdateAvailable() {
    // @ts-ignore
    return mostRecentCompilationHash !== __webpack_hash__;
}
function canApplyUpdates() {
    // @ts-ignore
    return module.hot.status() === 'idle';
}
function canAcceptErrors() {
    // NOTE: This var is injected by Webpack's DefinePlugin, and is a boolean instead of string.
    const hasReactRefresh = process.env.FAST_REFRESH;
    // @ts-ignore
    const status = module.hot.status();
    // React refresh can handle hot-reloading over errors.
    // However, when hot-reload status is abort or fail,
    // it indicates the current update cannot be applied safely,
    // and thus we should bail out to a forced reload for consistency.
    return hasReactRefresh && ['abort', 'fail'].indexOf(status) === -1;
}
function tryApplyUpdates(onHotUpdateSuccess) {
    // @ts-ignore
    if (!module.hot) {
        window.location.reload();
        return;
    }
    if (!isUpdateAvailable() || !canApplyUpdates()) {
        return;
    }
    function handleApplyUpdates(err, updatedModules) {
        const haveErrors = err || hadRuntimeError;
        // When there is no error but updatedModules is unavailable,
        // it indicates a critical failure in hot-reloading,
        // e.g. server is not ready to serve new bundle,
        // and hence we need to do a forced reload.
        const needsForcedReload = !err && !updatedModules;
        if ((haveErrors && !canAcceptErrors()) || needsForcedReload) {
            window.location.reload();
        }
        if (onHotUpdateSuccess)
            onHotUpdateSuccess();
        // While we were updating, there was a new update! Do it again.
        if (isUpdateAvailable()) {
            tryApplyUpdates();
        }
    }
    // @ts-ignore
    module.hot
        .check(/* autoApply */ true)
        .then((updatedModules) => {
        handleApplyUpdates(null, updatedModules);
    })
        .catch((err) => {
        handleApplyUpdates(err, null);
    });
}
function handleMessage(payload) {
    return __awaiter(this, void 0, void 0, function* () {
        // console.log('[payload]', payload);
        switch (payload.type) {
            case constants_1.MESSAGE_TYPE.hash:
                handleAvailableHash(payload.data);
                break;
            case constants_1.MESSAGE_TYPE.stillOk:
            case constants_1.MESSAGE_TYPE.ok:
                handleSuccess();
                break;
            case constants_1.MESSAGE_TYPE.errors:
                handleErrors(payload.data);
                break;
            case constants_1.MESSAGE_TYPE.warnings:
                handleWarnings(payload.data);
                break;
            default:
            // Do nothing
        }
    });
}
