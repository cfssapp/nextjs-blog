"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const esbuild_1 = require("@umijs/bundler-utils/compiled/esbuild");
const webpack_sources_1 = require("@umijs/bundler-webpack/compiled/webpack-sources");
const version = require('../../package.json');
const PLUGIN_NAME = 'ESBuildCSSMinifyPlugin';
const RE_CSS_FILE = /\.css(\?.*)?$/i;
class ESBuildCSSMinifyPlugin {
    constructor(options = {}) {
        this.options = options;
    }
    apply(compiler) {
        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation) => {
            compilation.hooks.chunkHash.tap(PLUGIN_NAME, (_, hash) => {
                hash.update(JSON.stringify({
                    version,
                    options: this.options,
                }));
            });
            compilation.hooks.processAssets.tapPromise({
                name: PLUGIN_NAME,
                stage: 400,
                additionalAssets: true,
            }, () => __awaiter(this, void 0, void 0, function* () {
                yield this.transformAssets(compilation);
            }));
        });
    }
    transformAssets(compilation) {
        return __awaiter(this, void 0, void 0, function* () {
            const { options: { devtool }, } = compilation.compiler;
            const sourcemap = this.options.sourcemap === undefined ? !!devtool : this.options.sourcemap;
            const assets = compilation.getAssets().filter((asset) => {
                return !asset.info.minimized && RE_CSS_FILE.test(asset.name);
            });
            yield Promise.all(assets.map((asset) => __awaiter(this, void 0, void 0, function* () {
                const { source, map } = asset.source.sourceAndMap();
                const sourceAsString = source.toString();
                const result = yield (0, esbuild_1.transform)(sourceAsString, {
                    loader: 'css',
                    sourcemap,
                    sourcefile: asset.name,
                    minify: true,
                });
                compilation.updateAsset(asset.name, 
                // @ts-ignore
                sourcemap
                    ? new webpack_sources_1.SourceMapSource(result.code, asset.name, result.map, sourceAsString, map, true)
                    : new webpack_sources_1.RawSource(result.code), Object.assign(Object.assign({}, asset.info), { minimized: true }));
            })));
        });
    }
}
exports.default = ESBuildCSSMinifyPlugin;
