"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const webpack_1 = require("@umijs/bundler-webpack/compiled/webpack");
const utils_1 = require("@umijs/utils");
const PLUGIN_NAME = 'ProgressPlugin';
class UmiProgressPlugin extends webpack_1.ProgressPlugin {
    constructor(options = {}) {
        super({ activeModules: true });
        this.options = options;
        this.handler = (percent, message, ...details) => {
            this.updateProgress({ percent, message, details });
        };
    }
    apply(compiler) {
        compiler.hooks.invalid.tap(PLUGIN_NAME, () => {
            utils_1.logger.wait('Compiling...');
        });
        compiler.hooks.done.tap(PLUGIN_NAME, (stats) => {
            const { errors, warnings } = stats.toJson({
                all: false,
                warnings: true,
                errors: true,
                colors: true,
            });
            const hasErrors = !!(errors === null || errors === void 0 ? void 0 : errors.length);
            const hasWarnings = !!(warnings === null || warnings === void 0 ? void 0 : warnings.length);
            hasWarnings;
            if (hasErrors) {
                errors.forEach((error) => {
                    utils_1.logger.error(`${error.moduleName}${error.loc ? `:${error.loc}` : ''}`);
                    console.log(error.message);
                });
            }
            else {
                const prefix = this.options.name ? `${this.options.name} ` : '';
                utils_1.logger.event(`${prefix}Compiled successfully in ${stats.endTime - stats.startTime} ms (${stats.compilation.modules.size} modules)`);
            }
        });
    }
    updateProgress(opts) {
        opts;
    }
}
exports.default = UmiProgressPlugin;
