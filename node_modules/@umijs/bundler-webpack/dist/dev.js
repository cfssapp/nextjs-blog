"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dev = void 0;
const mfsu_1 = require("@umijs/mfsu");
const utils_1 = require("@umijs/utils");
const path_1 = require("path");
const webpack_1 = __importDefault(require("../compiled/webpack"));
const config_1 = require("./config/config");
const constants_1 = require("./constants");
const server_1 = require("./server/server");
const types_1 = require("./types");
function dev(opts) {
    var _a, _b, _c, _d, _e;
    var _f;
    return __awaiter(this, void 0, void 0, function* () {
        const enableMFSU = opts.config.mfsu !== false;
        let mfsu = null;
        if (enableMFSU) {
            if (opts.config.srcTranspiler === types_1.Transpiler.swc) {
                utils_1.logger.warn(`Swc currently not supported for use with mfsu, recommended you use srcTranspiler: 'esbuild' in dev.`);
            }
            mfsu = new mfsu_1.MFSU({
                implementor: webpack_1.default,
                buildDepWithESBuild: (_a = opts.config.mfsu) === null || _a === void 0 ? void 0 : _a.esbuild,
                depBuildConfig: {
                    extraPostCSSPlugins: ((_b = opts.config) === null || _b === void 0 ? void 0 : _b.extraPostCSSPlugins) || [],
                },
                mfName: (_c = opts.config.mfsu) === null || _c === void 0 ? void 0 : _c.mfName,
                runtimePublicPath: opts.config.runtimePublicPath,
                tmpBase: ((_d = opts.config.mfsu) === null || _d === void 0 ? void 0 : _d.cacheDirectory) ||
                    (0, path_1.join)(opts.cwd, 'node_modules/.cache/mfsu'),
                getCacheDependency() {
                    var _a;
                    return {
                        version: require('../package.json').version,
                        esbuildMode: !!((_a = opts.config.mfsu) === null || _a === void 0 ? void 0 : _a.esbuild),
                    };
                },
            });
        }
        const webpackConfig = yield (0, config_1.getConfig)({
            cwd: opts.cwd,
            env: types_1.Env.development,
            entry: opts.entry,
            userConfig: opts.config,
            babelPreset: opts.babelPreset,
            extraBabelPlugins: [
                ...(opts.beforeBabelPlugins || []),
                ...((mfsu === null || mfsu === void 0 ? void 0 : mfsu.getBabelPlugins()) || []),
                ...(opts.extraBabelPlugins || []),
            ],
            extraBabelPresets: [
                ...(opts.beforeBabelPresets || []),
                ...(opts.extraBabelPresets || []),
            ],
            extraEsbuildLoaderHandler: (mfsu === null || mfsu === void 0 ? void 0 : mfsu.getEsbuildLoaderHandler()) || [],
            chainWebpack: opts.chainWebpack,
            modifyWebpackConfig: opts.modifyWebpackConfig,
            hmr: true,
            analyze: process.env.ANALYZE,
            cache: opts.cache,
        });
        const depConfig = yield (0, config_1.getConfig)({
            cwd: opts.cwd,
            env: types_1.Env.development,
            entry: opts.entry,
            userConfig: opts.config,
            hash: true,
            staticPathPrefix: mfsu_1.MF_DEP_PREFIX,
            name: constants_1.MFSU_NAME,
            cache: {
                buildDependencies: (_e = opts.cache) === null || _e === void 0 ? void 0 : _e.buildDependencies,
                cacheDirectory: (0, path_1.join)(opts.cwd, 'node_modules', '.cache', 'mfsu-deps'),
            },
        });
        (_f = webpackConfig.resolve).alias || (_f.alias = {});
        // TODO: REMOVE ME
        ['@umijs/utils/compiled/strip-ansi', 'react-error-overlay'].forEach((dep) => {
            // @ts-ignore
            webpackConfig.resolve.alias[dep] = require.resolve(dep);
        });
        yield (mfsu === null || mfsu === void 0 ? void 0 : mfsu.setWebpackConfig({
            config: webpackConfig,
            depConfig: depConfig,
        }));
        yield (0, server_1.createServer)({
            webpackConfig,
            userConfig: opts.config,
            cwd: opts.cwd,
            beforeMiddlewares: [
                ...((mfsu === null || mfsu === void 0 ? void 0 : mfsu.getMiddlewares()) || []),
                ...(opts.beforeMiddlewares || []),
            ],
            port: opts.port,
            host: opts.host,
            afterMiddlewares: [...(opts.afterMiddlewares || [])],
            onDevCompileDone: opts.onDevCompileDone,
        });
    });
}
exports.dev = dev;
