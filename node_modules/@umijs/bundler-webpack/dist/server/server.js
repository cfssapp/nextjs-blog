"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createServer = void 0;
const express_1 = __importDefault(require("@umijs/bundler-webpack/compiled/express"));
const http_proxy_middleware_1 = require("@umijs/bundler-webpack/compiled/http-proxy-middleware");
const webpack_1 = __importDefault(require("@umijs/bundler-webpack/compiled/webpack"));
const utils_1 = require("@umijs/utils");
const fs_1 = require("fs");
const http_1 = __importDefault(require("http"));
const path_1 = require("path");
const constants_1 = require("../constants");
const ws_1 = require("./ws");
function createServer(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const { webpackConfig, userConfig } = opts;
        const { proxy } = userConfig;
        const app = (0, express_1.default)();
        // basename middleware
        app.use((req, _res, next) => {
            const { url, path } = req;
            const { basename, history } = userConfig;
            if ((history === null || history === void 0 ? void 0 : history.type) === 'browser' &&
                basename !== '/' &&
                url.startsWith(basename)) {
                req.url = url.slice(basename.length);
                req.path = path.slice(basename.length);
            }
            next();
        });
        // cros
        app.use((_req, res, next) => {
            res.header('Access-Control-Allow-Origin', '*');
            res.header('Access-Control-Allow-Headers', 'Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild');
            res.header('Access-Control-Allow-Methods', 'GET, HEAD, PUT, POST, PATCH, DELETE, OPTIONS');
            next();
        });
        // compression
        app.use(require('@umijs/bundler-webpack/compiled/compression')());
        // TODO: headers
        // before middlewares
        (opts.beforeMiddlewares || []).forEach((m) => app.use(m));
        // TODO: add to before middleware
        app.use((req, res, next) => {
            if (req.path === '/umi.js' && (0, fs_1.existsSync)((0, path_1.join)(opts.cwd, 'umi.js'))) {
                res.setHeader('Content-Type', 'application/javascript');
                res.send((0, fs_1.readFileSync)((0, path_1.join)(opts.cwd, 'umi.js'), 'utf-8'));
            }
            else {
                next();
            }
        });
        // webpack dev middleware
        const compiler = (0, webpack_1.default)(Array.isArray(webpackConfig) ? webpackConfig : [webpackConfig]);
        const webpackDevMiddleware = require('@umijs/bundler-webpack/compiled/webpack-dev-middleware');
        const compilerMiddleware = webpackDevMiddleware(compiler, {
            publicPath: '/',
            writeToDisk: userConfig.writeToDisk,
            stats: 'none',
            // watchOptions: { ignored }
        });
        app.use(compilerMiddleware);
        // hmr hooks
        let stats;
        let isFirstCompile = true;
        compiler.compilers.forEach(addHooks);
        function addHooks(compiler) {
            compiler.hooks.invalid.tap('server', () => {
                sendMessage(constants_1.MESSAGE_TYPE.invalid);
            });
            compiler.hooks.done.tap('server', (_stats) => {
                var _a;
                stats = _stats;
                sendStats(getStats(stats));
                (_a = opts.onDevCompileDone) === null || _a === void 0 ? void 0 : _a.call(opts, {
                    stats,
                    isFirstCompile,
                    time: stats.endTime - stats.startTime,
                });
                isFirstCompile = false;
            });
        }
        function sendStats(stats, force, sender) {
            const shouldEmit = !force &&
                stats &&
                (!stats.errors || stats.errors.length === 0) &&
                (!stats.warnings || stats.warnings.length === 0) &&
                stats.assets &&
                stats.assets.every((asset) => !asset.emitted);
            if (shouldEmit) {
                sendMessage(constants_1.MESSAGE_TYPE.stillOk, null, sender);
                return;
            }
            sendMessage(constants_1.MESSAGE_TYPE.hash, stats.hash, sender);
            if ((stats.errors && stats.errors.length > 0) ||
                (stats.warnings && stats.warnings.length > 0)) {
                if (stats.warnings && stats.warnings.length > 0) {
                    sendMessage(constants_1.MESSAGE_TYPE.warnings, stats.warnings, sender);
                }
                if (stats.errors && stats.errors.length > 0) {
                    sendMessage(constants_1.MESSAGE_TYPE.errors, stats.errors, sender);
                }
            }
            else {
                sendMessage(constants_1.MESSAGE_TYPE.ok, null, sender);
            }
        }
        function getStats(stats) {
            return stats.toJson({
                all: false,
                hash: true,
                assets: true,
                warnings: true,
                errors: true,
                errorDetails: false,
            });
        }
        function sendMessage(type, data, sender) {
            (sender || ws).send(JSON.stringify({ type, data }));
        }
        // mock
        // proxy
        if (proxy) {
            Object.keys(proxy).forEach((key) => {
                app.use(key, (0, http_proxy_middleware_1.createProxyMiddleware)(proxy[key]));
            });
        }
        // after middlewares
        (opts.afterMiddlewares || []).forEach((m) => {
            // TODO: FIXME
            app.use(m.toString().includes(`{ compiler }`) ? m({ compiler }) : m);
        });
        // history fallback
        app.use(require('@umijs/bundler-webpack/compiled/connect-history-api-fallback')({
            index: '/',
        }));
        // hmr reconnect ping
        app.use('/__umi_ping', (_, res) => {
            res.end('pong');
        });
        // index.html
        // TODO: remove me
        app.get('/', (_req, res, next) => {
            res.set('Content-Type', 'text/html');
            const htmlPath = (0, path_1.join)(opts.cwd, 'index.html');
            if ((0, fs_1.existsSync)(htmlPath)) {
                const html = (0, fs_1.readFileSync)(htmlPath, 'utf-8');
                res.send(html);
            }
            else {
                next();
            }
        });
        const server = http_1.default.createServer(app);
        const ws = (0, ws_1.createWebSocketServer)(server);
        ws.wss.on('connection', (socket) => {
            if (stats) {
                sendStats(getStats(stats), false, socket);
            }
        });
        const port = opts.port || 8000;
        server.listen(port, () => {
            const host = opts.host && opts.host !== '0.0.0.0' ? opts.host : '127.0.0.1';
            utils_1.logger.ready(`App listening at ${utils_1.chalk.green(`http://${host}:${port}`)}`);
        });
        return server;
    });
}
exports.createServer = createServer;
