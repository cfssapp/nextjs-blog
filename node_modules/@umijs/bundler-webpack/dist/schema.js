"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSchemas = void 0;
const types_1 = require("./types");
const options = [
    'cheap-source-map',
    'cheap-eval-source-map',
    'cheap-hidden-source-map',
    'cheap-inline-source-map',
    'cheap-module-source-map',
    'cheap-module-eval-source-map',
    'cheap-module-hidden-source-map',
    'cheap-module-inline-source-map',
    'eval',
    'eval-source-map',
    'source-map',
    'hidden-source-map',
    'inline-source-map',
];
const DEVTOOL_REGEX = new RegExp('^' + // start of string
    '(#@|@|#)?' + // maybe one of the pragmas
    `(${options.join('$|')})`);
function getSchemas() {
    return {
        alias: (Joi) => Joi.object(),
        autoCSSModules: (Joi) => Joi.boolean(),
        autoprefixer: (Joi) => Joi.object(),
        chainWebpack: (Joi) => Joi.function(),
        copy: (Joi) => Joi.array().items(Joi.alternatives().try(Joi.object({
            from: Joi.string(),
            to: Joi.string(),
        }), Joi.string())),
        cssLoader: (Joi) => Joi.object(),
        cssLoaderModules: (Joi) => Joi.object(),
        cssMinifier: (Joi) => Joi.string().valid(types_1.CSSMinifier.cssnano, types_1.CSSMinifier.esbuild, types_1.CSSMinifier.parcelCSS, types_1.CSSMinifier.none),
        cssMinifierOptions: (Joi) => Joi.object(),
        deadCode: (Joi) => Joi.object(),
        define: (Joi) => Joi.object(),
        depTranspiler: (Joi) => Joi.string().valid(types_1.Transpiler.babel, types_1.Transpiler.esbuild, types_1.Transpiler.swc, types_1.Transpiler.none),
        devtool: (Joi) => Joi.alternatives().try(Joi.string().regex(DEVTOOL_REGEX), Joi.boolean()),
        esm: (Joi) => Joi.object(),
        externals: (Joi) => Joi.alternatives().try(Joi.object(), Joi.string(), Joi.func()),
        extraBabelPlugins: (Joi) => Joi.alternatives().try(Joi.string(), Joi.array().items(Joi.alternatives().try(Joi.string(), Joi.object()))),
        extraBabelPresets: (Joi) => Joi.alternatives().try(Joi.string(), Joi.array().items(Joi.alternatives().try(Joi.string(), Joi.object()))),
        extraPostCSSPlugins: (Joi) => Joi.array(),
        fastRefresh: (Joi) => Joi.boolean(),
        forkTSChecker: (Joi) => Joi.object(),
        hash: (Joi) => Joi.boolean(),
        ignoreMomentLocale: (Joi) => Joi.boolean(),
        inlineLimit: (Joi) => Joi.number(),
        jsMinifier: (Joi) => Joi.string().valid(types_1.JSMinifier.esbuild, types_1.JSMinifier.swc, types_1.JSMinifier.terser, types_1.JSMinifier.uglifyJs, types_1.JSMinifier.none),
        jsMinifierOptions: (Joi) => Joi.object(),
        lessLoader: (Joi) => Joi.object(),
        manifest: (Joi) => Joi.object(),
        mdx: (Joi) => Joi.object({
            loader: Joi.string(),
            loaderOptions: Joi.object(),
        }),
        mfsu: (Joi) => Joi.alternatives(Joi.object({
            cacheDirectory: Joi.string(),
            esbuild: Joi.boolean(),
            mfName: Joi.string(),
        }), Joi.boolean()),
        outputPath: (Joi) => Joi.string(),
        postcssLoader: (Joi) => Joi.object(),
        proxy: (Joi) => Joi.object(),
        publicPath: (Joi) => Joi.string(),
        purgeCSS: (Joi) => Joi.object(),
        runtimePublicPath: (Joi) => Joi.object(),
        sassLoader: (Joi) => Joi.object(),
        srcTranspiler: (Joi) => Joi.string().valid(types_1.Transpiler.babel, types_1.Transpiler.esbuild, types_1.Transpiler.swc, types_1.Transpiler.none),
        styleLoader: (Joi) => Joi.object(),
        svgo: (Joi) => Joi.alternatives().try(Joi.object(), Joi.boolean()),
        svgr: (Joi) => Joi.object(),
        targets: (Joi) => Joi.object(),
        theme: (Joi) => Joi.object(),
        writeToDisk: (Joi) => Joi.boolean(),
    };
}
exports.getSchemas = getSchemas;
