"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// MIT: https://github.com/gregberge/svgr/blob/main/packages/webpack/src/index.ts
// TODO: prebuild @svgr/core @svgr/plugin-jsx @svgr/plugin-svgo
const core_1 = require("@svgr/core");
// @ts-ignore
const plugin_jsx_1 = __importDefault(require("@svgr/plugin-jsx"));
// @ts-ignore
const plugin_svgo_1 = __importDefault(require("@svgr/plugin-svgo"));
const esbuild_1 = require("@umijs/bundler-utils/compiled/esbuild");
const path_1 = require("path");
const util_1 = require("util");
const tranformSvg = (0, util_1.callbackify)((contents, options, state) => __awaiter(void 0, void 0, void 0, function* () {
    const jsCode = yield (0, core_1.transform)(contents, options, state);
    const result = yield (0, esbuild_1.transform)(jsCode, {
        loader: 'tsx',
        target: 'es2015',
    });
    if (!(result === null || result === void 0 ? void 0 : result.code)) {
        throw new Error(`Error while transforming using Esbuild`);
    }
    return result.code;
}));
function svgrLoader(contents) {
    this.cacheable && this.cacheable();
    const callback = this.async();
    const options = this.getOptions();
    const previousExport = (() => {
        if (contents.startsWith('export '))
            return contents;
        const exportMatches = contents.match(/^module.exports\s*=\s*(.*)/);
        return exportMatches ? `export default ${exportMatches[1]}` : null;
    })();
    const state = {
        caller: {
            name: 'svgr-loader',
            previousExport,
            defaultPlugins: [plugin_svgo_1.default, plugin_jsx_1.default],
        },
        filePath: (0, path_1.normalize)(this.resourcePath),
    };
    if (!previousExport) {
        tranformSvg(contents, options, state, callback);
    }
    else {
        this.fs.readFile(this.resourcePath, (err, result) => {
            if (err) {
                callback(err);
                return;
            }
            tranformSvg(String(result), options, state, callback);
        });
    }
}
exports.default = svgrLoader;
