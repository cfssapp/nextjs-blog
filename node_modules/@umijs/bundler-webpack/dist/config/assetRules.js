"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addAssetRules = void 0;
function addAssetRules(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const { config, userConfig } = opts;
        const inlineLimit = parseInt(userConfig.inlineLimit || '10000', 10);
        const rule = config.module.rule('asset');
        rule
            .oneOf('avif')
            .test(/\.avif$/)
            .type('asset')
            .mimetype('image/avif')
            .parser({
            dataUrlCondition: {
                maxSize: inlineLimit,
            },
        })
            .generator({
            filename: `${opts.staticPathPrefix}[name].[hash:8].[ext]`,
        });
        rule
            .oneOf('image')
            .test(/\.(bmp|gif|jpg|jpeg|png)$/)
            .type('asset')
            .parser({
            dataUrlCondition: {
                maxSize: inlineLimit,
            },
        })
            .generator({
            filename: `${opts.staticPathPrefix}[name].[hash:8].[ext]`,
        });
        const fallback = rule
            .oneOf('fallback')
            .exclude.add(/^$/) /* handle data: resources */
            .add(/\.(js|mjs|jsx|ts|tsx)$/)
            .add(/\.(css|less|sass|scss|stylus)$/)
            .add(/\.html$/)
            .add(/\.json$/);
        if (userConfig.mdx) {
            fallback.add(/\.mdx?$/);
        }
        fallback
            .end()
            .type('asset/resource')
            .generator({
            filename: `${opts.staticPathPrefix}[name].[hash:8].[ext]`,
        });
    });
}
exports.addAssetRules = addAssetRules;
