"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addCopyPlugin = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
function addCopyPlugin(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const { config, userConfig, cwd } = opts;
        const copyPatterns = [
            (0, fs_1.existsSync)((0, path_1.join)(cwd, 'public')) && {
                from: (0, path_1.join)(cwd, 'public'),
            },
            ...(userConfig.copy
                ? userConfig.copy.map((item) => {
                    if (typeof item === 'string') {
                        return {
                            from: (0, path_1.join)(cwd, item),
                            to: item,
                        };
                    }
                    return {
                        // 相对于 process.cwd，所以这里需要使用绝对路径
                        from: (0, path_1.join)(cwd, item.from),
                        to: item.to,
                    };
                })
                : []),
        ].filter(Boolean);
        if (copyPatterns.length) {
            config
                .plugin('copy')
                .use(require('@umijs/bundler-webpack/compiled/copy-webpack-plugin'), [
                {
                    patterns: copyPatterns,
                },
            ]);
        }
    });
}
exports.addCopyPlugin = addCopyPlugin;
