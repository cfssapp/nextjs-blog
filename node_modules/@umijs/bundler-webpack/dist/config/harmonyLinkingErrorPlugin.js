"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addHarmonyLinkingErrorPlugin = void 0;
// ref: https://github.com/webpack/webpack/blob/ccecc17c01af96edddb931a76e7a3b21ef2969d8/lib/dependencies/HarmonyImportDependency.js#L164
const LINKING_ERROR_TAG = 'was not found in';
// build 时会出现 css modules 的引用警告，但这应该是需要忽略的
const CSS_NO_EXPORTS = /\.(css|sass|scss|styl|less)' \(module has no exports\)/;
class HarmonyLinkingErrorPlugin {
    apply(compiler) {
        compiler.hooks.afterCompile.tap('HarmonyLinkingErrorPlugin', (compilation) => {
            if (!compilation.warnings.length) {
                return;
            }
            const harmonyLinkingErrors = compilation.warnings.filter((w) => {
                return (w.name === 'ModuleDependencyWarning' &&
                    !w.module.resource.includes('node_modules') &&
                    w.message.includes(LINKING_ERROR_TAG) &&
                    !CSS_NO_EXPORTS.test(w.message));
            });
            if (!harmonyLinkingErrors.length) {
                return;
            }
            compilation.errors.push(...harmonyLinkingErrors);
        });
    }
}
function addHarmonyLinkingErrorPlugin(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const { config } = opts;
        config.plugin('harmony-linking-error-plugin').use(HarmonyLinkingErrorPlugin);
    });
}
exports.addHarmonyLinkingErrorPlugin = addHarmonyLinkingErrorPlugin;
