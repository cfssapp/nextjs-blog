"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addForkTSCheckerPlugin = void 0;
// @ts-ignore
const fork_ts_checker_webpack_plugin_1 = __importDefault(require("@umijs/bundler-webpack/compiled/fork-ts-checker-webpack-plugin"));
function addForkTSCheckerPlugin(opts) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const { config, userConfig } = opts;
        if (userConfig.forkTSChecker) {
            // use user's typescript
            if ((_a = userConfig.forkTSChecker.typescript) === null || _a === void 0 ? void 0 : _a.enable) {
                userConfig.forkTSChecker.typescript.typescriptPath =
                    require.resolve('typescript');
            }
            config
                .plugin('fork-ts-checker-plugin')
                .use(fork_ts_checker_webpack_plugin_1.default, [userConfig.forkTSChecker]);
        }
    });
}
exports.addForkTSCheckerPlugin = addForkTSCheckerPlugin;
