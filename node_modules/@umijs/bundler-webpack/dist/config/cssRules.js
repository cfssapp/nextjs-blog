"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addCSSRules = void 0;
function addCSSRules(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const { config, userConfig } = opts;
        const rulesConfig = [
            { name: 'css', test: /\.css(\?.*)?$/ },
            {
                name: 'less',
                test: /\.less(\?.*)?$/,
                loader: require.resolve('@umijs/bundler-webpack/compiled/less-loader'),
                loaderOptions: {
                    implementation: require.resolve('@umijs/bundler-webpack/compiled/less'),
                    lessOptions: Object.assign({ modifyVars: userConfig.theme, javascriptEnabled: true }, userConfig.lessLoader),
                },
            },
            {
                name: 'sass',
                test: /\.(sass|scss)(\?.*)?$/,
                loader: require.resolve('@umijs/bundler-webpack/compiled/sass-loader'),
                loaderOptions: userConfig.sassLoader || {},
            },
        ];
        for (const { name, test, loader, loaderOptions } of rulesConfig) {
            const rule = config.module.rule(name);
            const nestRulesConfig = [
                userConfig.autoCSSModules && {
                    rule: rule
                        .test(test)
                        .oneOf('css-modules')
                        .resourceQuery(/modules/),
                    isCSSModules: true,
                },
                {
                    rule: rule.test(test).oneOf('css').sideEffects(true),
                    isCSSModules: false,
                },
            ].filter(Boolean);
            // @ts-ignore
            for (const { rule, isCSSModules } of nestRulesConfig) {
                if (userConfig.styleLoader) {
                    rule
                        .use('style-loader')
                        .loader(require.resolve('@umijs/bundler-webpack/compiled/style-loader'))
                        .options(Object.assign({ base: 0, esModule: true }, userConfig.styleLoader));
                }
                else {
                    rule
                        .use('mini-css-extract-plugin')
                        .loader(require.resolve('@umijs/bundler-webpack/compiled/mini-css-extract-plugin/loader'))
                        .options({
                        publicPath: './',
                        emit: true,
                        esModule: true,
                    });
                }
                rule
                    .use('css-loader')
                    .loader(require.resolve('css-loader'))
                    .options(Object.assign(Object.assign({ importLoaders: 1, esModule: true, url: true, import: true }, (isCSSModules
                    ? {
                        modules: Object.assign({ localIdentName: '[local]___[hash:base64:5]' }, userConfig.cssLoaderModules),
                    }
                    : {})), userConfig.cssLoader));
                rule
                    .use('postcss-loader')
                    .loader(require.resolve('@umijs/bundler-webpack/compiled/postcss-loader'))
                    .options({
                    postcssOptions: Object.assign({ ident: 'postcss', plugins: [
                            require('@umijs/bundler-webpack/compiled/postcss-flexbugs-fixes'),
                            require('postcss-preset-env')({
                                browsers: opts.browsers,
                                autoprefixer: Object.assign({ flexbox: 'no-2009' }, userConfig.autoprefixer),
                                stage: 3,
                            }),
                        ].concat(userConfig.extraPostCSSPlugins || []) }, userConfig.postcssLoader),
                });
                if (loader) {
                    rule
                        .use(loader)
                        .loader(typeof loader === 'string' ? require.resolve(loader) : loader)
                        .options(loaderOptions || {});
                }
            }
        }
    });
}
exports.addCSSRules = addCSSRules;
