"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addSVGRules = void 0;
function addSVGRules(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const { config, userConfig } = opts;
        const { svgr, svgo = {} } = userConfig;
        if (svgr) {
            const svgrRule = config.module.rule('svgr');
            svgrRule
                .test(/\.svg$/)
                .issuer(/\.[jt]sx?$/)
                .type('javascript/auto')
                .use('svgr-loader')
                .loader(require.resolve('../loader/svgr'))
                .options(Object.assign(Object.assign({ svgoConfig: Object.assign({ plugins: [
                        {
                            name: 'preset-default',
                            params: {
                                overrides: {
                                    removeTitle: false,
                                },
                            },
                        },
                    ] }, svgo) }, svgr), { svgo: !!svgo }))
                .end()
                .use('url-loader')
                .loader(require.resolve('@umijs/bundler-webpack/compiled/url-loader'))
                .end();
        }
        if (svgo === false) {
            const svgRule = config.module.rule('svg');
            svgRule
                .test(/\.svg$/)
                .use('url-loader')
                .loader(require.resolve('@umijs/bundler-webpack/compiled/url-loader'));
            return;
        }
        const svgRule = config.module.rule('svg');
        svgRule
            .test(/\.svg$/)
            .use('svgo-loader')
            .loader(require.resolve('@umijs/bundler-webpack/compiled/svgo-loader'))
            .options(Object.assign({ configFile: false }, svgo))
            .end();
    });
}
exports.addSVGRules = addSVGRules;
