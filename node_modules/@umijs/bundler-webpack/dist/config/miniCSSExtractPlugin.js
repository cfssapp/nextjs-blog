"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addMiniCSSExtractPlugin = void 0;
// @ts-ignore
const mini_css_extract_plugin_1 = __importDefault(require("@umijs/bundler-webpack/compiled/mini-css-extract-plugin"));
function addMiniCSSExtractPlugin(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const { config, userConfig, useHash } = opts;
        const hash = useHash ? '.[contenthash:8]' : '';
        if (!userConfig.styleLoader) {
            config.plugin('mini-css-extract-plugin').use(mini_css_extract_plugin_1.default, [
                {
                    filename: `[name]${hash}.css`,
                    chunkFilename: `[name]${hash}.chunk.css`,
                    ignoreOrder: true,
                },
            ]);
        }
    });
}
exports.addMiniCSSExtractPlugin = addMiniCSSExtractPlugin;
