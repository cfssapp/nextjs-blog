"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addCompressPlugin = void 0;
// @ts-ignore
const css_minimizer_webpack_plugin_1 = __importDefault(require("@umijs/bundler-webpack/compiled/css-minimizer-webpack-plugin"));
const terser_webpack_plugin_1 = __importDefault(require("../../compiled/terser-webpack-plugin"));
const ESBuildCSSMinifyPlugin_1 = __importDefault(require("../plugins/ESBuildCSSMinifyPlugin"));
const ParcelCSSMinifyPlugin_1 = require("../plugins/ParcelCSSMinifyPlugin");
const types_1 = require("../types");
function addCompressPlugin(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const { config, userConfig, env } = opts;
        const jsMinifier = userConfig.jsMinifier || types_1.JSMinifier.esbuild;
        const cssMinifier = userConfig.cssMinifier || types_1.CSSMinifier.esbuild;
        if (env === types_1.Env.development ||
            process.env.COMPRESS === 'none' ||
            (jsMinifier === types_1.JSMinifier.none && cssMinifier === types_1.CSSMinifier.none)) {
            config.optimization.minimize(false);
            return;
        }
        config.optimization.minimize(true);
        let minify;
        if (jsMinifier === types_1.JSMinifier.esbuild) {
            minify = terser_webpack_plugin_1.default.esbuildMinify;
        }
        else if (jsMinifier === types_1.JSMinifier.terser) {
            minify = terser_webpack_plugin_1.default.terserMinify;
        }
        else if (jsMinifier === types_1.JSMinifier.swc) {
            minify = terser_webpack_plugin_1.default.swcMinify;
        }
        else if (jsMinifier === types_1.JSMinifier.uglifyJs) {
            minify = terser_webpack_plugin_1.default.uglifyJsMinify;
        }
        else if (jsMinifier !== types_1.JSMinifier.none) {
            throw new Error(`Unsupported jsMinifier ${userConfig.jsMinifier}.`);
        }
        if (jsMinifier !== types_1.JSMinifier.none) {
            config.optimization.minimizer(`js-${jsMinifier}`).use(terser_webpack_plugin_1.default, [
                {
                    minify,
                    terserOptions: userConfig.jsMinifierOptions,
                },
            ]);
        }
        if (cssMinifier === types_1.CSSMinifier.esbuild) {
            config.optimization
                .minimizer(`css-${cssMinifier}`)
                .use(ESBuildCSSMinifyPlugin_1.default, [userConfig.cssMinifierOptions]);
        }
        else if (cssMinifier === types_1.CSSMinifier.cssnano) {
            config.optimization
                .minimizer(`css-${cssMinifier}`)
                .use(css_minimizer_webpack_plugin_1.default, [
                {
                    minimizerOptions: userConfig.cssMinifierOptions,
                    parallel: true,
                },
            ]);
        }
        else if (cssMinifier === types_1.CSSMinifier.parcelCSS) {
            config.optimization
                .minimizer(`css-${cssMinifier}`)
                .use(ParcelCSSMinifyPlugin_1.ParcelCSSMinifyPlugin);
        }
        else if (cssMinifier !== types_1.CSSMinifier.none) {
            throw new Error(`Unsupported cssMinifier ${userConfig.cssMinifier}.`);
        }
    });
}
exports.addCompressPlugin = addCompressPlugin;
