"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = void 0;
const path_1 = require("path");
const webpack_1 = __importDefault(require("../../compiled/webpack"));
const webpack_5_chain_1 = __importDefault(require("../../compiled/webpack-5-chain"));
const constants_1 = require("../constants");
const RuntimePublicPathPlugin_1 = require("../plugins/RuntimePublicPathPlugin");
const types_1 = require("../types");
const browsersList_1 = require("../utils/browsersList");
const assetRules_1 = require("./assetRules");
const bundleAnalyzerPlugin_1 = require("./bundleAnalyzerPlugin");
const compressPlugin_1 = require("./compressPlugin");
const copyPlugin_1 = require("./copyPlugin");
const cssRules_1 = require("./cssRules");
const definePlugin_1 = require("./definePlugin");
const detectDeadCodePlugin_1 = require("./detectDeadCodePlugin");
const fastRefreshPlugin_1 = require("./fastRefreshPlugin");
const forkTSCheckerPlugin_1 = require("./forkTSCheckerPlugin");
const harmonyLinkingErrorPlugin_1 = require("./harmonyLinkingErrorPlugin");
const ignorePlugin_1 = require("./ignorePlugin");
const javaScriptRules_1 = require("./javaScriptRules");
const manifestPlugin_1 = require("./manifestPlugin");
const miniCSSExtractPlugin_1 = require("./miniCSSExtractPlugin");
const nodePolyfill_1 = require("./nodePolyfill");
const progressPlugin_1 = require("./progressPlugin");
const speedMeasureWebpackPlugin_1 = require("./speedMeasureWebpackPlugin");
const svgRules_1 = require("./svgRules");
function getConfig(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const { userConfig } = opts;
        const isDev = opts.env === types_1.Env.development;
        const config = new webpack_5_chain_1.default();
        userConfig.targets || (userConfig.targets = constants_1.DEFAULT_BROWSER_TARGETS);
        const useHash = !!(opts.hash || (userConfig.hash && !isDev));
        const applyOpts = {
            name: opts.name,
            config,
            userConfig,
            cwd: opts.cwd,
            env: opts.env,
            babelPreset: opts.babelPreset,
            extraBabelPlugins: opts.extraBabelPlugins || [],
            extraBabelPresets: opts.extraBabelPresets || [],
            extraEsbuildLoaderHandler: opts.extraEsbuildLoaderHandler || [],
            browsers: (0, browsersList_1.getBrowsersList)({
                targets: userConfig.targets,
            }),
            useHash,
            staticPathPrefix: opts.staticPathPrefix !== undefined ? opts.staticPathPrefix : 'static/',
        };
        // mode
        config.mode(opts.env);
        config.stats('none');
        // entry
        Object.keys(opts.entry).forEach((key) => {
            const entry = config.entry(key);
            if (isDev && opts.hmr) {
                entry.add(require.resolve('../../client/client/client'));
            }
            entry.add(opts.entry[key]);
        });
        // devtool
        config.devtool(isDev
            ? userConfig.devtool === false
                ? false
                : userConfig.devtool || constants_1.DEFAULT_DEVTOOL
            : userConfig.devtool);
        // output
        const absOutputPath = (0, path_1.join)(opts.cwd, userConfig.outputPath || constants_1.DEFAULT_OUTPUT_PATH);
        const disableCompress = process.env.COMPRESS === 'none';
        config.output
            .path(absOutputPath)
            .filename(useHash ? `[name].[contenthash:8].js` : `[name].js`)
            .chunkFilename(useHash ? `[name].[contenthash:8].async.js` : `[name].js`)
            .publicPath(userConfig.publicPath || 'auto')
            .pathinfo(isDev || disableCompress);
        // resolve
        // prettier-ignore
        config.resolve
            .set('symlinks', true)
            .modules
            .add('node_modules')
            .end()
            .alias
            .merge(userConfig.alias || {})
            .end()
            .extensions
            .merge([
            '.wasm',
            '.mjs',
            '.js',
            '.jsx',
            '.ts',
            '.tsx',
            '.json'
        ])
            .end();
        // externals
        config.externals(userConfig.externals || []);
        // target
        config.target(['web', 'es5']);
        // experiments
        config.experiments({
            topLevelAwait: true,
            outputModule: !!userConfig.esm,
        });
        // node polyfill
        yield (0, nodePolyfill_1.addNodePolyfill)(applyOpts);
        // rules
        yield (0, javaScriptRules_1.addJavaScriptRules)(applyOpts);
        yield (0, cssRules_1.addCSSRules)(applyOpts);
        yield (0, assetRules_1.addAssetRules)(applyOpts);
        yield (0, svgRules_1.addSVGRules)(applyOpts);
        // plugins
        // mini-css-extract-plugin
        yield (0, miniCSSExtractPlugin_1.addMiniCSSExtractPlugin)(applyOpts);
        // ignoreMomentLocale
        yield (0, ignorePlugin_1.addIgnorePlugin)(applyOpts);
        // define
        yield (0, definePlugin_1.addDefinePlugin)(applyOpts);
        // fast refresh
        yield (0, fastRefreshPlugin_1.addFastRefreshPlugin)(applyOpts);
        // progress
        yield (0, progressPlugin_1.addProgressPlugin)(applyOpts);
        // detect-dead-code-plugin
        yield (0, detectDeadCodePlugin_1.addDetectDeadCodePlugin)(applyOpts);
        // fork-ts-checker
        yield (0, forkTSCheckerPlugin_1.addForkTSCheckerPlugin)(applyOpts);
        // copy
        yield (0, copyPlugin_1.addCopyPlugin)(applyOpts);
        // manifest
        yield (0, manifestPlugin_1.addManifestPlugin)(applyOpts);
        // hmr
        if (isDev && opts.hmr) {
            config.plugin('hmr').use(webpack_1.default.HotModuleReplacementPlugin);
        }
        // compress
        yield (0, compressPlugin_1.addCompressPlugin)(applyOpts);
        // purgecss
        // await applyPurgeCSSWebpackPlugin(applyOpts);
        // handle HarmonyLinkingError
        yield (0, harmonyLinkingErrorPlugin_1.addHarmonyLinkingErrorPlugin)(applyOpts);
        // runtimePublicPath
        if (userConfig.runtimePublicPath) {
            config.plugin('runtimePublicPath').use(RuntimePublicPathPlugin_1.RuntimePublicPathPlugin);
        }
        // cache
        if (opts.cache) {
            config.cache({
                type: 'filesystem',
                version: require('../../package.json').version,
                buildDependencies: {
                    config: opts.cache.buildDependencies || [],
                },
                cacheDirectory: opts.cache.cacheDirectory ||
                    (0, path_1.join)(opts.cwd, 'node_modules', '.cache', 'bundler-webpack'),
            });
            // tnpm 安装依赖的情况 webpack 默认的 managedPaths 不生效
            // 使用 immutablePaths 避免 node_modules 的内容被写入缓存
            // tnpm 安装的依赖路径中同时包含包名和版本号，满足 immutablePaths 使用的条件
            // ref: smallfish
            if ( /*isTnpm*/require('@umijs/utils/package').__npminstall_done) {
                config.snapshot({
                    immutablePaths: [
                        opts.cache.absNodeModulesPath || (0, path_1.join)(opts.cwd, 'node_modules'),
                    ],
                });
            }
            config.infrastructureLogging(Object.assign({ level: 'error' }, (process.env.WEBPACK_FS_CACHE_DEBUG
                ? {
                    debug: /webpack\.cache/,
                }
                : {})));
        }
        // analyzer
        if (opts.analyze) {
            yield (0, bundleAnalyzerPlugin_1.addBundleAnalyzerPlugin)(applyOpts);
        }
        // chain webpack
        if (opts.chainWebpack) {
            yield opts.chainWebpack(config, {
                env: opts.env,
                webpack: webpack_1.default,
            });
        }
        if (userConfig.chainWebpack) {
            yield userConfig.chainWebpack(config, {
                env: opts.env,
                webpack: webpack_1.default,
            });
        }
        let webpackConfig = config.toConfig();
        // speed measure
        // TODO: mini-css-extract-plugin 报错
        webpackConfig = yield (0, speedMeasureWebpackPlugin_1.addSpeedMeasureWebpackPlugin)({
            webpackConfig,
        });
        if (opts.modifyWebpackConfig) {
            webpackConfig = yield opts.modifyWebpackConfig(webpackConfig, {
                env: opts.env,
                webpack: webpack_1.default,
            });
        }
        return webpackConfig;
    });
}
exports.getConfig = getConfig;
